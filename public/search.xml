<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker快速入门</title>
      <link href="/2019/04/20/sui-bi/docker-bi-ji/"/>
      <url>/2019/04/20/sui-bi/docker-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。</li><li>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</li></ul><h2 id="CentOS7-Docker-安装"><a href="#CentOS7-Docker-安装" class="headerlink" title="CentOS7 Docker 安装"></a>CentOS7 Docker 安装</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># uname -r 命令查看你当前的内核版本</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># uname -r</span>安装一些必要的系统工具：<span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span>添加软件源信息：<span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span>更新 yum 缓存：<span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo yum makecache fast</span>安装 Docker-ce：<span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo yum -y install docker-ce</span></code></pre><h2 id="启动-Docker-后台服务"><a href="#启动-Docker-后台服务" class="headerlink" title="启动 Docker 后台服务"></a>启动 Docker 后台服务</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo systemctl start docker</span>测试运行 hello-world<span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run hello-world</span></code></pre><p><img src="https://img-blog.csdnimg.cn/2019041017350624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt><br>本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行</p><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><blockquote><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com。" target="_blank" rel="noopener">http://hub-mirror.c.163.com。</a></p></blockquote><p>新版的 Docker 使用 /etc/docker/daemon.json（Linux） 来配置 Daemon。<br>请在该配置文件中加入（没有该文件的话，请先建一个）：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>删除 Docker CE</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker-ce$ <span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/lib/docker</code></pre><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><p>列出本地镜像: docker images</p><pre class=" language-bash"><code class="language-bash">docker images -a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；docker images  --digests :显示镜像的摘要信息；docker images -f :显示满足条件的镜像；docker images --format :指定返回值的模板文件；docker images --no-trunc :显示完整的镜像信息；docker images  -q :只显示镜像ID。</code></pre><p>docker pull : 从镜像仓库中拉取或者更新指定镜像</p><pre class=" language-bash"><code class="language-bash">docker pull -a :拉取所有 tagged 镜像docker pull --disable-content-trust :忽略镜像的校验,默认开启docker pull java  <span class="token keyword">:</span> 下载java最新版镜像docker pull -a java</code></pre><p>docker inspec 获取容器/镜像的详细信息</p><pre class=" language-bash"><code class="language-bash">docker inspec 94errf55dterdocker inspec 镜像ID  -f :指定返回值的模板文件。docker inspec 镜像ID -s :显示总的文件大小。docker inspec 镜像ID  --type :为指定类型返回JSON。</code></pre><p>docker search : 从Docker Hub查找镜像</p><pre class=" language-bash"><code class="language-bash">docker search mysql--automated :只列出 automated build类型的镜像；--no-trunc :显示完整的镜像描述；-s :列出收藏数不小于指定值的镜像。</code></pre><p>docker rmi : 删除本地一个或多少镜像(容器)</p><pre class=" language-bash"><code class="language-bash">docker rmi mysql-f :强制删除；--no-prune :不移除该镜像的过程镜像，默认移除；</code></pre><p>docker ps : 列出容器<br><img src="https://img-blog.csdnimg.cn/20190419130626584.png" alt></p><pre class=" language-bash"><code class="language-bash">-a :显示所有的容器，包括未运行的。-f :根据条件过滤显示的内容。--format :指定返回值的模板文件。-l :显示最近创建的容器。-n :列出最近创建的n个容器。--no-trunc :不截断输出。-q :静默模式，只显示容器编号。-s :显示总的文件大小。</code></pre><h2 id="如何创建一个镜像"><a href="#如何创建一个镜像" class="headerlink" title="如何创建一个镜像"></a>如何创建一个镜像</h2><blockquote><p>创建镜像的方法又三种：基于已有镜像的容器创建，基于本地模板导入，基于<code>Dockerfile</code>创建</p></blockquote><p><code>docker commit</code> :从容器创建一个新的镜像</p><pre class=" language-bash"><code class="language-bash">docker commit <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>-a :提交的镜像作者；-c :使用Dockerfile指令来创建镜像；-m :提交时的说明文字；-p :在commit时，将容器暂停。</code></pre><p>首先启动一个镜像 为容器重新分配一个伪输入终端 以交互模式运行容器</p><pre class=" language-bash"><code class="language-bash">docker run -ti ubuntu:14.04 /bin/bash<span class="token comment" spellcheck="true"># 运行后启动进入命令 记住容器ID</span>root@97cc221196d7:/<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 创建一个test文件 并退出</span>root@97cc221196d7:/<span class="token comment" spellcheck="true"># touch  test</span>root@97cc221196d7:/<span class="token comment" spellcheck="true"># exit</span><span class="token comment" spellcheck="true"># 此时容易和原来的相比已经发生改变， 可以docker commit提交一个新的镜像，提交时用ID或名称指定容器</span>docker commit -m <span class="token string">"add a new file is name test"</span> -a <span class="token string">"qxw"</span> 97cc221196d7 <span class="token function">test</span><span class="token comment" spellcheck="true">#成功返回新的镜像ID</span>sha256:342175794310960ce0b0932bb05b818fb4abc2bcc5d29824018d7783f83d76a9<span class="token comment" spellcheck="true"># 再次查看镜像列表</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<span class="token function">test</span>                latest              342175794310        2 minutes ago       188MBubuntu              14.04               390582d83ead        5 weeks ago         188MBhello-world         latest              fce289e99eb9        3 months ago        1.84kB</code></pre><h2 id="存储和载入镜像"><a href="#存储和载入镜像" class="headerlink" title="存储和载入镜像"></a>存储和载入镜像</h2><blockquote><p>可以使用<code>docker save</code>和<code>docker load</code>来存储和载入镜像</p></blockquote><p><code>docker save</code> : 将指定镜像保存成 tar 归档文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 保存咋当前目录下</span> docker save -o test.tar <span class="token function">test</span></code></pre><p><code>docker load</code>: 载入一个镜像</p><pre class=" language-bash"><code class="language-bash"> docker load --input test.tar 或 docker load <span class="token operator">&lt;</span> test.tar</code></pre><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><p>docker push : 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 可以先添加新的标签 user/test:latest 然后用docker push 上传</span>docker tag test:latest  user/test:latestdocker push  user/test:latest<span class="token comment" spellcheck="true">## 第一次使用会提示登录信息或注册</span></code></pre><h2 id="容器的基本操作"><a href="#容器的基本操作" class="headerlink" title="容器的基本操作"></a>容器的基本操作</h2><blockquote><p>容器是镜像的一个实例，所不同的是，它带有额外的可写文件层</p></blockquote><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p><code>docker create</code> ：创建一个新的容器但不启动它</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker create -it ubuntu:14.041140d5e5a0a6b9d79adc053fc5d359209e860bf474327a52b3a8da5337173c74</code></pre><p>新建并启动容器</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker run ubuntu:14.04 /bin/echo <span class="token string">'hello world'</span>hello world</code></pre><p>后台启动一个容器运行</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker run -d ubuntu /bin/sh -c <span class="token string">"while true;do echo hello word;sleep 1;done"</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker <span class="token function">ps</span>CONTAINER ID        IMAGE                 47168308c196        ubuntu  <span class="token comment" spellcheck="true">#获取容器的输出信息</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker logs 471</code></pre><h3 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h3><ul><li><code>docker stop</code>  命令来中止一个运行中的容器，它会向容器发送信号，等待一段时间后在发送信号终止器</li><li><code>docker kill</code>   命令会直接中止容器<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker stop 471471</code></pre></li></ul><p>查看处于中止状态的容器ID</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker <span class="token function">ps</span> -a -q47168308c19697765732ff5a</code></pre><p>处于中止的容器 可以用过  <code>docker start</code>  重新启动</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker start 471471</code></pre><p>重启一个容器</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker restart 471471</code></pre><h3 id="如何进入容器"><a href="#如何进入容器" class="headerlink" title="如何进入容器"></a>如何进入容器</h3><ul><li><code>docker attach</code> :连接到正在运行中的容器。</li><li>当多个窗口同时attach 到同一个容器时，所有窗口都会同步显示，如果某个窗口操作的命令阻塞了，所有的窗口都会阻塞</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker attach 471hello wordhello wordhello word</code></pre><ul><li>docker exec：在运行的容器中执行命令。可以直接进入容器操作命令<pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker <span class="token function">exec</span> -ti 47168308c196  /bin/bashroot@47168308c196:/$ <span class="token function">ls</span> -ldrwxr-xr-x  2 root root 4096 Mar  7 21:01 bindrwxr-xr-x  2 root root 4096 Apr 24  2018 boot</code></pre><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3></li><li>可以使用<code>docker rm</code> 命令删除处于终止状态的容器。命令为 <code>docker rm</code></li><li>-f ,–force=false  强行终止并删除一个运行中的容器</li><li>-l,–link=false  删除容器的链接 但保留容器</li><li>-v,–volumes=false, 删除容器挂载的数据券</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker <span class="token function">ps</span> -aCONTAINER ID        IMAGE               COMMAND                  CREATED                      8714bb6a3cee        hello-world         <span class="token string">"/hello"</span>                 4 hours ago        <span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker <span class="token function">rm</span> 8714  或  docker <span class="token function">rm</span>  -f 87148714</code></pre><h3 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h3><ul><li><code>docker export</code> :将文件系统作为一个tar归档文件导出。不管这个容器是否处于运行状态</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker <span class="token function">export</span> 47168 <span class="token operator">></span> test_stop.tar<span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ <span class="token function">ls</span> -l-rw-r--r-- 1 root root  72308736 Apr 19 14:59 test_stop.tar</code></pre><ul><li>导出的容器可以使用<code>docker  import</code>导入成为镜像</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> test_stop.tar <span class="token operator">|</span> docker <span class="token function">import</span> - test/ubuntu:v1.0sha256:c6c6209a648fd9520fb3a9b3cfcec5f9e53bf82aeffcc2e9edba01942f7c9100<span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEtest/ubuntu         v1.0                c6c6209a648f        5 seconds ago       69.8MB</code></pre><ul><li>既可以使用<code>docker  load</code>命令导入一个镜像文件。也可以使用<code>docker  import</code>导入一个容器快照到本地镜像库。两者的区别在于：快照文件将丢弃所有的历史记录和元数据信息。而镜像存储文件将保存完整记录。体积也要大。从容器快照文件导入时可以重新指定标签等元数据信息。</li></ul><h2 id="创建和使用私有仓库"><a href="#创建和使用私有仓库" class="headerlink" title="创建和使用私有仓库"></a>创建和使用私有仓库</h2><ul><li>官方提供了registry镜像来搭建一套本地私有仓库的环境</li><li><code>-v</code> 用户指定镜像文件存储的路径 默认路径是容器的 <code>/tmp/registry</code>目录下<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 自动下载并启动一个registry容器 创建一个本地私有仓库</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry<span class="token comment" spellcheck="true"># 此时本地将启动一个私有仓库，监听端口为5000</span></code></pre>然后在本地电脑上安装一个<code>docker</code> 上传镜像到服务器<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#首先使用docker命令标记一个镜像格式为</span>docker tag hello-world 39.108.144.143:5000/hellp-world<span class="token comment" spellcheck="true">#使用docke  push  上传至服务器</span>docker push 39.108.144.143:5000/hellp-world</code></pre></li><li>Docker从1.3.X之后，与docker registry交互默认使用的是https，然而此处搭建的私有仓库只提供http服务，所以当与私有仓库交互时就会报上面的错误<br><img src="https://img-blog.csdnimg.cn/20190419162858537.png" alt></li><li>这个问题需要在启动docker server时增加启动参数为默认使用http访问。修改<code>daemon.json</code>文件</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"insecure-registries"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"39.108.144.143:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>查看镜像推送结果：<code>curl  http:39.108.144.143:5000/v1/search</code><br>下载私有仓库镜像： <code>docker   pull 39.108.144.143:5000/hellp-world</code></p></blockquote><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><ul><li>容器中管理数据主要有两种方式： 数据卷，数据卷容器</li></ul><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>数据卷是一个可供容器使用的特许目录，它绕过文件系统，可以提供很多有用的特性</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立即生效</li><li>对数据卷的更新，不会影响镜像</li><li>卷会一直存在，直到没有容器使用。数据卷的使用类似Linux目录下或文件mount操作。</li></ul><p><strong>如何在容器中创建一个数据卷</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用training/webapp创建一个web容器，并创建一个数据卷挂载到容器的/webapp目录</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker run -d -P --name web -v /webapp  training/webapp python app.py- P :只允许外部访问容器需要暴露的端口-v :也可以指定挂载一个本地的已有目录到容器中去作为数据卷<span class="token comment" spellcheck="true"># 加载主机的src/webapp目录到容器opt/webapp 目录下</span>docker run -d -P --name web -v /src/webapp:/opt/webapp   training/webapp python app.py<span class="token comment" spellcheck="true"># docker 挂载数据默认权限是读写(rw),可以通过ro 指定为只读</span>docker run -d -P --name web -v /src/webapp:/opt/webapp  ro  training/webapp python app.py<span class="token comment" spellcheck="true"># 挂载一个本地主机文件作为数据卷，记录在容器中输入过的命令历史</span>docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><ul><li>如果需要在容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器。</li><li>数据卷容器其实就是一个普通的容器，专门用它提供数据卷 供其它容器挂载使用</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建数据卷容器 ,并在其中创建一个数据卷挂载到 /dbdat</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span>root@3266a5692131:/<span class="token comment" spellcheck="true"># ls</span>bin  boot  dbdata  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token comment" spellcheck="true"># 然后,可以在其它容器中使用 --volumes-from来挂载dbdata容器中的数据卷。</span><span class="token comment" spellcheck="true"># 创建db1和db2两个容器，并从dbdata 容器挂载数据卷</span>docker run -it --volumes-from dbdata --name db1 ubuntudocker run -it --volumes-from dbdata --name db2 ubuntu<span class="token comment" spellcheck="true"># 进入dbdata容器 并创建一个文件夹</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it -v /dbdata --name 3266a ubuntu</span>root@74d186f5896d:/<span class="token comment" spellcheck="true"># cd /dbdata/</span>root@74d186f5896d:/dbdata<span class="token comment" spellcheck="true"># touch test</span>root@74d186f5896d:/dbdata<span class="token comment" spellcheck="true"># ls</span><span class="token function">test</span><span class="token comment" spellcheck="true"># 在db1容器中查看它</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it --volumes-from dbdata --name d822cd  ubuntu</span>d186f5896d:/dbdata<span class="token comment" spellcheck="true"># ls</span></code></pre><ul><li>如果删除了挂载的容器，数据卷不会自动删除，如果要删除一个数据卷，必须删除最后一个还挂着它的容器时显示使用docker rm -v命令来指定同时删除关联的容器</li><li>使用容器卷可以让用户在容器之间自由升级和移动数据卷</li></ul><h2 id="网络基础配置"><a href="#网络基础配置" class="headerlink" title="网络基础配置"></a>网络基础配置</h2><ul><li>使用-P标记时，Docker会随机映射一个端口</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -P --name fe9531 -v /webapp  training/webapp python app.py</span>4fd207fa931ff015a0c659219d1f7dcc787c353e5ab1f49afaf506472b9e82d2<span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker logs -f 4fd20</span> * Running on http://0.0.0.0:5000/ <span class="token punctuation">(</span>Press CTRL+<span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># 将本地5000端口 映射到容器的5000端口</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 5000:5000 training/webapp python </span><span class="token comment" spellcheck="true"># 映射到指定地址的指定端口</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><span class="token comment" spellcheck="true"># 查看端口映射</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker port ea1ecbd4dda4</span>5000/tcp -<span class="token operator">></span> 127.0.0.1:5000</code></pre><h2 id="Dockerfile命令语法"><a href="#Dockerfile命令语法" class="headerlink" title="Dockerfile命令语法"></a>Dockerfile命令语法</h2><ul><li>Dockerfile 是由一行行命令组成，一般二言分为四部分：基础镜像信息，维护者信息，镜像操作指令和容器启动时指令</li></ul><p><strong>FROM</strong></p><ul><li>功能为指定基础镜像，并且必须是第一条指令。</li><li>如果不以任何镜像为基础，那么写法为：FROM scratch。</li><li>同时意味着接下来所写的指令将作为镜像的第一层开始<pre class=" language-bash"><code class="language-bash">语法：FROM <span class="token operator">&lt;</span>image<span class="token operator">></span>FROM <span class="token operator">&lt;</span>image<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span>FROM <span class="token operator">&lt;</span>image<span class="token operator">></span>:<span class="token operator">&lt;</span>digest<span class="token operator">></span> 三种写法，其中<span class="token operator">&lt;</span>tag<span class="token operator">></span>和<span class="token operator">&lt;</span>digest<span class="token operator">></span> 是可选项，如果没有选择，那么默认值为latest</code></pre><strong>MAINTAINER</strong></li><li>构建指令，用于将image的制作者相关的信息写入到image中</li></ul><p><strong>RUN</strong></p><p>镜像操作指令。RUN命令有两种格式</p><pre class=" language-bash"><code class="language-bash">RUN <span class="token operator">&lt;</span>command<span class="token operator">></span>RUN <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 两种写法比对：</span>RUN /bin/bash -c 'source <span class="token variable">$HOME</span>/.bashrc<span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$HOME</span>RUN <span class="token punctuation">[</span><span class="token string">"/bin/bash"</span>, <span class="token string">"-c"</span>, <span class="token string">"echo hello"</span><span class="token punctuation">]</span></code></pre><ul><li>第一种后边直接跟shell命令。在linux操作系统上默认 <code>/bin/sh -c</code></li><li>在windows操作系统上默认 <code>cmd /S /C</code></li><li>第二种是类似于函数调用。可将<code>executable</code>理解成为可执行文件，后面就是两个参数。</li></ul><p><strong>CMD</strong></p><ul><li>容器启动时要运行的命令。语法有三种写法：</li></ul><pre class=" language-bash"><code class="language-bash">CMD <span class="token punctuation">[</span><span class="token string">"executable"</span>,<span class="token string">"param1"</span>,<span class="token string">"param2"</span><span class="token punctuation">]</span>CMD <span class="token punctuation">[</span><span class="token string">"param1"</span>,<span class="token string">"param2"</span><span class="token punctuation">]</span>CMD <span class="token function">command</span> param1 param2<span class="token comment" spellcheck="true"># 举例说明两种写法：</span>CMD <span class="token punctuation">[</span> <span class="token string">"sh"</span>, <span class="token string">"-c"</span>, <span class="token string">"echo <span class="token variable">$HOME</span>"</span> CMD <span class="token punctuation">[</span> <span class="token string">"echo"</span>, <span class="token string">"<span class="token variable">$HOME</span>"</span> <span class="token punctuation">]</span></code></pre><ul><li>第三种比较好理解了，就时shell这种执行方式和写法</li><li>第一种和第二种其实都是可执行文件加上参数的形式</li><li>这里边包括参数的一定要用双引号，就是”,不能是单引号。千万不能写成单引号。原因是参数传递后，docker解析的是一个JSON array</li></ul><p><strong>LABEL</strong></p><ul><li>功能是为镜像指定标签.。LABEL会继承基础镜像种的LABEL，如遇到key相同，则值覆盖</li></ul><pre class=" language-bash"><code class="language-bash">语法：LABEL <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true">#一个Dockerfile种可以有多个LABEL，如下：</span>LABEL <span class="token string">"com.example.vendor"</span><span class="token operator">=</span><span class="token string">"ACME Incorporated"</span>LABEL com.example.label-with-value<span class="token operator">=</span><span class="token string">"foo"</span>LABEL version<span class="token operator">=</span><span class="token string">"1.0"</span>LABEL description<span class="token operator">=</span><span class="token string">"This text illustrates \that label-values can span multiple lines."</span><span class="token comment" spellcheck="true">#但是并不建议这样写，最好就写成一行，如太长需要换行的话则使用\符号</span>LABEL multi.label1<span class="token operator">=</span><span class="token string">"value1"</span> \multi.label2<span class="token operator">=</span><span class="token string">"value2"</span> \other<span class="token operator">=</span><span class="token string">"value3"</span></code></pre><h2 id="创建支持SSh的服务镜像"><a href="#创建支持SSh的服务镜像" class="headerlink" title="创建支持SSh的服务镜像"></a>创建支持SSh的服务镜像</h2><p><strong>基于commit 命令创建</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 首先创建一个容器</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it ubuntu:14.04 /bin/bash</span><span class="token comment" spellcheck="true"># 尝试使用SSHD命令 发现没有安装该服务</span><span class="token punctuation">[</span>root@03e74d026566:/<span class="token comment" spellcheck="true"># sshd</span>bash: sshd: <span class="token function">command</span> not found<span class="token comment" spellcheck="true"># 更新软件源信息</span>root@03e74d026566:/<span class="token comment" spellcheck="true"># apt-get update</span><span class="token comment" spellcheck="true"># 安装和配置SSh服务</span>root@03e74d026566:/<span class="token comment" spellcheck="true"># apt-get install openssh-server</span><span class="token comment" spellcheck="true">#要正常启动SSH服务 需要手动创建并启动它</span>root@03e74d026566:/<span class="token comment" spellcheck="true"># mkdir -p /var/run/sshd</span>root@03e74d026566:/<span class="token comment" spellcheck="true"># /usr/sbin/sshd -D &amp;</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> 3848<span class="token comment" spellcheck="true">#查看容器22的端口已经处于监听状态</span>root@2173083a66ec:/<span class="token comment" spellcheck="true"># netstat -tunlp</span>Active Internet connections <span class="token punctuation">(</span>only servers<span class="token punctuation">)</span>Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program nametcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      3026/sshdtcp6       0      0 :::22                   :::*                    LISTEN      3026/sshd<span class="token comment" spellcheck="true"># 修改SSH服务的安全登录配置，取消pam登录限制</span>root@2173083a66ec:/<span class="token comment" spellcheck="true"># sed -ri 's/session required pam_loginuid.so/#session required pam_loginuid.so/g'  /etc/pam.d/sshd</span><span class="token comment" spellcheck="true"># 在用户目录下创建.ssh目录 并复制需要登录的公匙信息到authorized_keys文件中(一般为本地主机目录用户下的.ssh/id_rsa.pub文件中 可由ssh-keygen -t rsa 命令生成)</span>root@2173083a66ec:/<span class="token comment" spellcheck="true"># mkdir root/.ssh</span>root@2173083a66ec:/<span class="token comment" spellcheck="true"># vi /root/.ssh/authorized_keys</span><span class="token comment" spellcheck="true"># 创建自动启动SSH服务的可执行文件 并添加可执行权限</span>root@2173083a66ec:/<span class="token comment" spellcheck="true"># vi /run.sh</span><span class="token comment" spellcheck="true">#!/bin/bash</span>/usr/sbin/sshd -Droot@2173083a66ec:/<span class="token comment" spellcheck="true"># chmod +x run.sh</span><span class="token comment" spellcheck="true"># 最后退出保存容器</span>root@2173083a66ec:/<span class="token comment" spellcheck="true"># exit</span><span class="token comment" spellcheck="true"># 保存为一个新镜像</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker commit 217 sshd:ubuntu</span>sha256:043bbe1d3ca0429fa5e00e1ce35e0f3d666cc303393ca09b2776bef81be3085a<span class="token comment" spellcheck="true"># 使用镜像启动容器 并添加端口映射 10022->22</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -p 10022:22 -d sshd:ubuntu /run.sh</span>0aabe835d56311abdc7ab1febf293a15b5240128a927a8638635b204203deb4b<span class="token comment" spellcheck="true"># 在宿主机上测试连接ssh</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ssh 172.18.83.251 -p 10022</span></code></pre><p><strong>使用Dockerfile创建</strong></p><p>首先应创建一个sshd_ ubuntu 工作目录:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> sshd ubuntu<span class="token comment" spellcheck="true"># 在其中，创建Dockerfile和run.sh文件:</span>$ <span class="token function">cd</span> sshd_ ubuntu/$ <span class="token function">touch</span> Dockerfile run. sh <span class="token comment" spellcheck="true"># 编写run.sh脚本和authorized keys文件</span><span class="token comment" spellcheck="true"># 文件run.sh的内容与上-小节中致: </span><span class="token comment" spellcheck="true">#!/bin/bash</span>/usr/sbin/sshd -D<span class="token comment" spellcheck="true"># 在宿主主机上生成SSH密钥对，并创建authorized keys 文件:</span>$ ssh-keygen -t rsa$ <span class="token function">cat</span> ~/.ssh/id_ rsa. pub <span class="token operator">></span>authorized keys</code></pre><p>编写Dockerfile文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#设置继承镜像</span>FROM ubuntu:14.04<span class="token comment" spellcheck="true">#提供一些作者的信息</span>MAINTAINER from blog.qinxuewu.club by qxw <span class="token punctuation">(</span>870439570@qq.com<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 下面开始运行命令，此处更改ubuntu的源为国内163的源</span>RUN <span class="token keyword">echo</span> <span class="token string">"deb http:/ /mirrors.163. com/ubuntu/ trusty main restricted universemultiverse"</span> <span class="token operator">></span> /etc/apt/ sources.listRUN <span class="token keyword">echo</span> <span class="token string">"deb http://mirrors. 163. com/ubuntu/”trusty-security main restricteduniverse multiverse"</span> <span class="token operator">>></span> /etc/apt/sources.listRUN <span class="token keyword">echo</span><span class="token string">"deb http://mirrors.163. com/ubuntu/ trusty-updates main restricteduniverse multiverse"</span> <span class="token operator">>></span> /etc/apt/sources.listRUN <span class="token keyword">echo</span> <span class="token string">"deb http://mirrors. 163. com/ubuntu/ trusty-proposed main restricteduniverse multiverse"</span> <span class="token operator">>></span> /etc/apt/sources.listRUN <span class="token keyword">echo</span> <span class="token string">"deb http: //mirrors.163. com/ubuntu/ trusty-backports main restricteduniverse multiverse"</span> <span class="token operator">>></span> /etc/apt/sources.listRUN <span class="token function">apt-get</span> update<span class="token comment" spellcheck="true">#安装ssh服务</span>RUN <span class="token function">apt-get</span> <span class="token function">install</span> -y openssh-serverRUN <span class="token function">mkdir</span> -p /var/ run/sshdRUN <span class="token function">mkdir</span> -P /root/ .ssh<span class="token comment" spellcheck="true">#取消pam限制</span>RUN <span class="token function">sed</span> -ri <span class="token string">'s/session required pam loginuid.so/#session required pam_ loginuid.so/g'</span> /etc/pam.d/sshd<span class="token comment" spellcheck="true"># 复制配置文件到相应位置，并赋予脚本可执行权限</span>ADD authorized keys /root/ .ssh/authorized keysADD run.sh /run.shRUN <span class="token function">chmod</span> 755 /run.sh<span class="token comment" spellcheck="true">#开放端口</span>EXPOSE 22普设置自启动命令CMD <span class="token punctuation">[</span><span class="token string">"/run. sh"</span><span class="token punctuation">]</span></code></pre><p>创建镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#在sshd_ ubuntu 目录下，使用docker build 命令来创建镜像。注意一下，在最后还有一个“.”，表示使用当前目录中的Dockerfile.</span>$ <span class="token function">cd</span> sshd ubuntu$ <span class="token function">sudo</span> docker build -t sshd:dockerfile <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 启动测试</span>$ docker run -d -p 10012:22 sshd:dockerfile$ <span class="token function">ssh</span> 172.18.83.251 -p 10012</code></pre><h2 id="Docker-安装-Nginx"><a href="#Docker-安装-Nginx" class="headerlink" title="Docker 安装 Nginx"></a>Docker 安装 Nginx</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查询</span>$ docker search nginx<span class="token comment" spellcheck="true"># 拉取官方镜像</span>$ docker pull nginx<span class="token comment" spellcheck="true"># 使用nginx镜像 运行容器</span>$ docker run -p 80:80 --name mynginx -v <span class="token variable">$PWD</span>/www:/www -v <span class="token variable">$PWD</span>/conf/nginx.conf:/etc/nginx/nginx.conf -v <span class="token variable">$PWD</span>/logs:/wwwlogs  -d nginx  <span class="token comment" spellcheck="true"># 启动参数说明</span>-p 80:80：将容器的80端口映射到主机的80端口--name mynginx：将容器命名为mynginx-v <span class="token variable">$PWD</span>/www:/www：将主机中当前目录下的www挂载到容器的/www-v <span class="token variable">$PWD</span>/conf/nginx.conf:/etc/nginx/nginx.conf：将主机中当前目录下的nginx.conf挂载到容器的/etc/nginx/nginx.conf-v <span class="token variable">$PWD</span>/logs:/wwwlogs：将主机中当前目录下的logs挂载到容器的/wwwlogs</code></pre><h2 id="Docker-安装-Tomcat"><a href="#Docker-安装-Tomcat" class="headerlink" title="Docker 安装 Tomcat"></a>Docker 安装 Tomcat</h2><pre class=" language-bash"><code class="language-bash">$ docker pull tomcat<span class="token comment" spellcheck="true"># 拉取最新版本</span>$ docker pull tomcat<span class="token comment" spellcheck="true"># 使用镜像运行容器</span>$ docker run --name tomcat -p 8080:8080 -v <span class="token variable">$PWD</span>/test:/usr/local/tomcat/webapps/test -d tomcat  <span class="token comment" spellcheck="true"># 启动参数说明</span>-p 8080:8080：将容器的8080端口映射到主机的8080端口-v <span class="token variable">$PWD</span>/test:/usr/local/tomcat/webapps/test：将主机中当前目录下的test挂载到容器的/test</code></pre><h2 id="使用docker安装ElasticSearch"><a href="#使用docker安装ElasticSearch" class="headerlink" title="使用docker安装ElasticSearch"></a>使用docker安装ElasticSearch</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用docker安装ElasticSearch</span><span class="token comment" spellcheck="true">#搜索镜像</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker search elasticsearch<span class="token comment" spellcheck="true">#拉取镜像</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span>$ docker pull elasticsearch:6.5.0<span class="token comment" spellcheck="true">#启动一个ElasticSearch容器</span><span class="token punctuation">[</span>root@izadux3fzjykx7z ~<span class="token punctuation">]</span> $ docker run --name elasticsearch -d -e ES_JAVA_OPTS<span class="token operator">=</span><span class="token string">"-Xms214m -Xmx214m"</span> -p 9200:9200 -p 9300:9300 elasticsearch:6.5.0</code></pre><h2 id="Docker-安装-MySQL"><a href="#Docker-安装-MySQL" class="headerlink" title="Docker 安装 MySQL"></a>Docker 安装 MySQL</h2><pre class=" language-bash"><code class="language-bash">$ docker search mysql$ docker pull mysql:5.6$ docker run -p 3306:3306 --name mymysql -v <span class="token variable">$PWD</span>/conf:/etc/mysql/conf.d -v <span class="token variable">$PWD</span>/logs:/logs -v <span class="token variable">$PWD</span>/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d mysql:5.6<span class="token comment" spellcheck="true"># 启动参数说明</span>-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。-v -v <span class="token variable">$PWD</span>/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。-v <span class="token variable">$PWD</span>/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。-v <span class="token variable">$PWD</span>/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456：初始化 root 用户的密码。</code></pre><h2 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h2><pre class=" language-bash"><code class="language-bash">$ docker search  redis$ docker pull  redis:3.2$ docker run -p 6379:6379 -v <span class="token variable">$PWD</span>/data:/data  -d redis:3.2 redis-server --appendonly <span class="token function">yes</span><span class="token comment" spellcheck="true"># 参数说明</span>-p 6379:6379 <span class="token keyword">:</span> 将容器的6379端口映射到主机的6379端口-v <span class="token variable">$PWD</span>/data:/data <span class="token keyword">:</span> 将主机中当前目录下的data挂载到容器的/dataredis-server --appendonly <span class="token function">yes</span> <span class="token keyword">:</span> 在容器执行redis-server启动命令，并打开redis持久化配置<span class="token comment" spellcheck="true"># 进入redis命令行</span>$ docker <span class="token function">exec</span> -it 容器id redis-cli</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Docker安装手册：<a href="https://docs.docker-cn.com/engine/installation/" target="_blank" rel="noopener">https://docs.docker-cn.com/engine/installation/</a></li><li>菜鸟教程：<a href="http://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">http://www.runoob.com/docker/centos-docker-install.html</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker技术入门与实战</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一条SQL查询语句是如何执行的</title>
      <link href="/2019/04/16/shu-ju-ku/sql-cha-xun-yu-ju-shi-ru-he-zhi-xing-de/"/>
      <url>/2019/04/16/shu-ju-ku/sql-cha-xun-yu-ju-shi-ru-he-zhi-xing-de/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MySQL可以分为<code>Server</code>层和<code>存储引擎</code>层两部分</p></blockquote><ul><li><code>Server</code>层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</li><li><code>存储引擎层</code>负责数据的存储和提取。其架构模式是插件式的，支持InnoDB、MyISAM、Memory等多个存储引擎。现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。</li><li>不同的存储引擎共用一个Server层，也就是从连接器到执行器的部分</li></ul><p>一条普通的查询语是怎样执行并返回结果了</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_test <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">10</span>；</code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g24it5uzpkj30og0mu0v4.jpg" alt="一套查询SQL的执行流程图"></p><p><strong>连接器</strong></p><ul><li>第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在<code>show processlist</code>命令中看到它。客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数<code>wait_timeout</code>控制的，默认值是<code>8</code>小时。数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</li></ul><p><strong>查询缓存</strong></p><ul><li>连接建立完成后，你就可以执行<code>select</code>语句了。执行逻辑就会来到第二步：查询缓存。</li><li>MySQL拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以<code>key-value对</code>的形式，被直接缓存在内存中。<code>key是查询的语句</code>，<code>value是查询的结果</code>。如果你的查询能够直接在这个缓存中找到key，那么这个value就会被直接返回给客户端。</li><li>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。</li></ul><blockquote><p>大多数情况下建议不要使用查询缓存，查询缓存往往弊大于利。查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。</p></blockquote><p><strong>分析器</strong></p><ul><li>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL需要知道你要做什么，因此需要对SQL语句做解析。分析器先会做<code>“词法分析”</code>,词法分析完后就要做<code>“语法分析”</code>。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个SQL语句是否满足MySQL语法。如果你的语句不对，就会收到<code>“You have an error in your SQL syntax”</code>的错误提醒</li></ul><p><strong>优化器</strong></p><ul><li>经过了分析器，MySQL就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。</li><li>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。</li></ul><blockquote><p>比如你执行下面这样的语句，这个语句是执行两个表的join：<br><code>mysql&gt; select * from t1 join t2 using(ID)  where t1.c=10 and t2.d=20;</code></p></blockquote><ul><li>既可以先从表t1里面 取出c=10的记录的ID值，再根据ID值关联到表t2，再判断t2里面d的值是否等于20。</li><li>也可以先从表t2里面取出d=20的记录的ID值，再根据ID值关联到t1，再判断t1里面c的值是否等于10。<br>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。</li></ul><p><strong>执行器</strong></p><ul><li>MySQL通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。</li><li>开始执行的时候，要先判断一下你对这个表T有没有执行查询的权限，如果没有，就会返回没有权限的错误</li><li>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</li></ul><blockquote><p><code>mysql&gt; select * from T where ID=10;</code><br>比如我们这个例子中的表T中，ID字段没有索引，那么执行器的执行流程是这样的：<br>调用InnoDB引擎接口取这个表的第一行，判断ID值是不是10，如果不是则跳过，如果是则将这行存在结果集中；<br>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。<br>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端</p></blockquote><ul><li>至此，这个整个语句就执行完成了。一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</li></ul><blockquote><p>参考：MySql实战45讲</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatile的内存语义</title>
      <link href="/2019/04/05/java/volatile-de-nei-cun-yu-yi/"/>
      <url>/2019/04/05/java/volatile-de-nei-cun-yu-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="volatile的特性"><a href="#volatile的特性" class="headerlink" title="volatile的特性"></a>volatile的特性</h2><ul><li><code>volatile</code>修饰的变量可以禁止指令重排序和保证了内存可见性和单一操作的原子性，类似<code>i++</code>这样的复合操作的原子性保证不了</li><li>有<code>volatile</code>关键字修饰的共享变量进行写操作数，会多出一个<code>lock</code>前缀指令。<code>lock</code>前缀指令其实就相当于一个内存屏障。在多处理器下，会将当前处理器工作内存的数据回写到主内存中，并且这个回写操作会其它线程中缓存该内存地址的数据无效。相当于会在写操作后，发出一个信号给缓存了这个数的线程，告诉它们值更新了，需要从主内存中从新获取<ul><li>在<code>JVM</code>底层<code>volatile</code>是采用“<code>内存屏障</code>”来实现的。</li></ul></li><li><code>volatile</code>经常用于两个两个场景：状态标记两、单列模式中的<code>DCL</code></li></ul><h2 id="volatile写-读建立的happens-before关系"><a href="#volatile写-读建立的happens-before关系" class="headerlink" title="volatile写-读建立的happens-before关系"></a>volatile写-读建立的happens-before关系</h2><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span>  <span class="token keyword">int</span>  count<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//普通变量</span>  <span class="token keyword">private</span>  <span class="token keyword">volatile</span>  <span class="token keyword">boolean</span> falg<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//volatile 修饰的变量</span>    <span class="token comment" spellcheck="true">//写操作</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 1</span>        falg<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 读操作</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>falg<span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">//3</span>            <span class="token keyword">int</span>  sum<span class="token operator">=</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 4</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>假设有两个线程：线程<code>A</code>调用读方法， 线程<code>B</code>调用写方法<br>根据happens-before规则，这个过程的建立分为三类：</li></ul><ol><li><code>程序次序规则</code>： 1 happens-before 2,3 happens-before 4</li><li><code>volatile规则</code>：2 happens-before 3 。对一个volatile变量的写操作先行发生于后面对这个变量的读操作</li><li><code>传递规则</code>： 1 happens-before 4 ；</li></ol><p><img src="https://img-blog.csdnimg.cn/20190405130152624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt></p><ul><li>如果<code>falg</code>不是volatile修饰的，那么<code>操作1</code>和<code>操作2</code>之间没有数据依赖性，处理器可能会对这两个操作进行<code>重排序</code>，这时<code>线程A</code>正好执行先执行了<code>操作2</code>，然后这时<code>线程B</code>抢先执行了<code>操作3</code>, 发现为<code>true</code>就执行<code>if语句</code>里的代码， 得到值可能就是<code>1</code>，而不是我们所预想的输出<code>sum=2</code>。</li></ul><h2 id="volatile写-读的内存语义"><a href="#volatile写-读的内存语义" class="headerlink" title="volatile写-读的内存语义"></a>volatile写-读的内存语义</h2><ul><li><code>volatile写操作</code>：当对一个volatile共享变量写操作时，JMM会当前线程对应的更新的后的本地内存中的值强制刷新到主内存中</li><li><code>volatile读操作</code>：当读一个<code>volatile</code>共享变量时，JMM会把当前线程对应的本地内存<code>标记为无效</code>，然后线程会从主内存中加载最新的值到工作内存中进行操作。<br><img src="https://img-blog.csdnimg.cn/20190405131645165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt></li><li>线程A写一个<code>volatile</code>变量，其实就是新城A向接下来要读取这个共享变量的某个线程，发送了一个信号，告诉它我已经修改了共享变量，你的工作内存的值要被标记无效。</li><li>线程B读一个<code>volatile</code>变量，其实就是接收了之前线程A发出的修改共享变量的信号。</li><li>对一个volatile变量的写操作，随后对这个变量的读操作，其实就是两个线程之间的进行了通讯。</li></ul><h2 id="volatile的内存语义的实现"><a href="#volatile的内存语义的实现" class="headerlink" title="volatile的内存语义的实现"></a>volatile的内存语义的实现</h2><ul><li>重排序分为编译器重排序和处理器重排序，为了实现volatile内存语义，JMM会分别限制这两种重排序的内型。<blockquote><p><code>volatilec</code>重排序规则</p></blockquote></li></ul><table><thead><tr><th>第一个操作</th><th>第二个操作</th></tr></thead><tbody><tr><td>普通读/写</td><td>普通读/写: yes ,      <code>volatile</code>读 ：yes,           <code>volatile</code>写 ：no,</td></tr><tr><td>volatile读</td><td>普通读/写: no ,      <code>volatile</code>读 ：no,           <code>volatile</code>写 ：no,</td></tr><tr><td>volatile写</td><td>普通读/写: yes ,      <code>volatile</code>读 ：no,           <code>volatile</code>写 ：no,</td></tr></tbody></table><ul><li>当第一个操作为普通变量的读/写时，如果第二个操作是<code>volatile</code>写，则编译器不能重排序这个两个操作。</li><li>当第一个操作是<code>volatile</code>读时,第二个操作不管是什么都不能重排序，这个规则确保volatile读之后的操作不会排序的它之前。</li><li>当一个操作是volatile写时，第二个操作时volatile读时，不能重排序</li></ul><blockquote><p>为了实现<code>volatile</code>内存语义，编译器生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p></blockquote><ul><li>在每个<code>volatile写</code>之前插入一个<code>StoreStore</code>屏障</li><li>在每个<code>volatile写</code>操作的后面插入一个StoreLoad屏障</li><li>在每个<code>volatile读</code>操作的后面插入一个LoadLoad屏障</li><li>在每个<code>volatile读</code>操作的后面插入一个LoadStore屏障<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1w7ueh8mdj30nk0ed427.jpg" alt="volatile写指令序列示意图"></li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1w833hp28j30ot0eh0wk.jpg" alt="volatile读指令序列示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成prometheus+Grafana监控</title>
      <link href="/2019/04/02/spring-xi-lie/springboot-ji-cheng-prometheus-grafana-jian-kong/"/>
      <url>/2019/04/02/spring-xi-lie/springboot-ji-cheng-prometheus-grafana-jian-kong/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>Prometheus</code>是一个最初在SoundCloud上构建的开源系统监视和警报工具包 。</li></ul><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>prometheus监控  https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>prometheus<span class="token punctuation">.</span>io<span class="token operator">/</span>docs<span class="token operator">/</span>introduction<span class="token operator">/</span>overview<span class="token operator">/</span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>micrometer<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>micrometer<span class="token operator">-</span>registry<span class="token operator">-</span>prometheus<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class=" language-bash"><code class="language-bash">spring.application.name<span class="token operator">=</span>SpringBootPrometheus<span class="token comment" spellcheck="true"># 监控端点配置</span><span class="token comment" spellcheck="true"># 自定义端点路径  将  /actuator/{id}为/manage/{id}</span><span class="token comment" spellcheck="true">#management.endpoints.web.base-path=/manage</span>management.endpoints.web.exposure.include<span class="token operator">=</span>*management.metrics.tags.application<span class="token operator">=</span><span class="token variable">${spring.application.name}</span></code></pre><h2 id="启动类添加"><a href="#启动类添加" class="headerlink" title="启动类添加"></a>启动类添加</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreemarkerApplication</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.application.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span>  String application<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>FreemarkerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    MeterRegistryCustomizer<span class="token operator">&lt;</span>MeterRegistry<span class="token operator">></span> <span class="token function">configurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>registry<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commonTags</span><span class="token punctuation">(</span><span class="token string">"application"</span><span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>查看度量指标是否集成成功</p></blockquote><p>浏览器访问：<a href="http://localhost:8081/actuator/prometheus" target="_blank" rel="noopener">http://localhost:8081/actuator/prometheus</a></p><p><img src="https://img-blog.csdnimg.cn/20190402132903893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="启动成功"></p><h2 id="安装Prometheus"><a href="#安装Prometheus" class="headerlink" title="安装Prometheus"></a>安装Prometheus</h2><ul><li>下载地址：<a href="https://prometheus.io/download/" target="_blank" rel="noopener">https://prometheus.io/download/</a>  </li><li>选择时间序列数据库版本<br><img src="https://img-blog.csdnimg.cn/20190402133007321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote><p><code>Prometheus</code>会将所有采集到的样本数据以时间序列（time-series）的方式保存在内存数据库中，并且定时保存到硬盘上。</p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/2019040213340280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="解压"></p><ul><li>Linux启动方式：<code>nohup /home/prometheus/prometheus2.8.1/prometheus &amp;</code></li></ul><h2 id="配置prometheus-yml"><a href="#配置prometheus-yml" class="headerlink" title="配置prometheus.yml"></a>配置prometheus.yml</h2><ul><li>SpringBoot官方配置：<a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/</a></li><li>prometheus官方文档：<a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">https://prometheus.io/docs/introduction/overview/</a></li><li>Prometheus-配置解析: <a href="https://www.cnblogs.com/liujiliang/p/10080849.html" target="_blank" rel="noopener">https://www.cnblogs.com/liujiliang/p/10080849.html</a></li></ul><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># 全局配置</span>global:  scrape_interval:     15s <span class="token comment" spellcheck="true"># 多久 收集 一次数据</span>  evaluation_interval: 15s <span class="token comment" spellcheck="true"># 多久评估一次 规则</span>  scrape_timeout:      10s   <span class="token comment" spellcheck="true"># 每次 收集数据的 超时时间</span><span class="token comment" spellcheck="true"># Alertmanager configuration</span>alerting:  alertmanagers:  - static_configs:    - targets:      <span class="token comment" spellcheck="true"># - alertmanager:9093</span><span class="token comment" spellcheck="true"># # 规则文件, 可以使用通配符</span>rule_files:  <span class="token comment" spellcheck="true"># - "first_rules.yml"</span>  <span class="token comment" spellcheck="true"># - "second_rules.yml"</span>scrape_configs:  - job_name: <span class="token string">'prometheus'</span>    static_configs:    - targets: <span class="token punctuation">[</span><span class="token string">'localhost:9090'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># SpringBoot应用配置</span>  - job_name: <span class="token string">'SpringBootPrometheus'</span>    scrape_interval: 5s    metrics_path: <span class="token string">'/actuator/prometheus'</span>    static_configs:      - targets: <span class="token punctuation">[</span><span class="token string">'127.0.0.1:8081'</span><span class="token punctuation">]</span></code></pre><h2 id="启动Prometheus"><a href="#启动Prometheus" class="headerlink" title="启动Prometheus"></a>启动Prometheus</h2><blockquote><p>浏览器访问：<a href="http://localhost:9090" target="_blank" rel="noopener">http://localhost:9090</a><br><img src="https://img-blog.csdnimg.cn/20190402134739139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="启动成功界面"></p></blockquote><h2 id="查看Prometheus监控的应用"><a href="#查看Prometheus监控的应用" class="headerlink" title="查看Prometheus监控的应用"></a>查看Prometheus监控的应用</h2><p><img src="https://img-blog.csdnimg.cn/20190402135041685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="监控的应用"></p><ul><li>UP状态表示目前存活的实例</li><li><blockquote><p>查看具体的监控指标<br><img src="https://img-blog.csdnimg.cn/20190402135346932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt></p></blockquote><h2 id="Grafana安装配置"><a href="#Grafana安装配置" class="headerlink" title="Grafana安装配置"></a>Grafana安装配置</h2></li><li>下载地址:<a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">https://grafana.com/grafana/download</a></li><li>这里本机使用win系统：<a href="https://dl.grafana.com/oss/release/grafana-6.0.2.windows-amd64.zip" target="_blank" rel="noopener">https://dl.grafana.com/oss/release/grafana-6.0.2.windows-amd64.zip</a></li></ul><p><img src="https://img-blog.csdnimg.cn/20190402190244641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="下载解压"></p><blockquote><p>启动   <code>grafana-server.exe</code><br>Linux启动方式：nohup /home/prometheus/prometheus2.8.1/prometheus &amp;</p></blockquote><p>浏览器访问：<a href="http://127.0.0.1:3000/login" target="_blank" rel="noopener">http://127.0.0.1:3000/login</a></p><p><img src="https://img-blog.csdnimg.cn/20190402190347714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="登录界面"></p><p><strong>默认用户和密码均为<code>admin</code></strong></p><h3 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h3><p>在Data Sources选项中添加数据源<br><img src="https://img-blog.csdnimg.cn/201904021916327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="搜索Prometheus数据源"></p><ul><li>设置<code>数据源的名称</code>（唯一的，可添加多个数据源）和<code>Prometheus</code>的访问地址，如果<code>Prometheus</code>有设置账号密码才可以访问，则需要在Auth模块勾选<code>Basuc Auth</code> 设置账号密码</li></ul><p><img src="https://img-blog.csdnimg.cn/20190402201837863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="设置"></p><h3 id="导入仪表盘模板"><a href="#导入仪表盘模板" class="headerlink" title="导入仪表盘模板"></a>导入仪表盘模板</h3><ul><li>模板地址：<a href="https://grafana.com/dashboards" target="_blank" rel="noopener">https://grafana.com/dashboards</a></li><li>在搜索框中搜索<code>Spring Boot</code>会检索出相关的模板，选择一个自己喜欢<br><img src="https://img-blog.csdnimg.cn/20190402203107140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="搜索"><br>这里我选择我比较喜欢第三个和第五个。模板ID分别是<code>4701</code>，<code>6756</code><br><img src="https://img-blog.csdnimg.cn/20190402203322934.png" alt="第三个"><br><img src="https://img-blog.csdnimg.cn/2019040220365069.png" alt="倒数第二个"></li><li>红框标注的部分就是项目中需要配置代码, 复制模板ID<br><img src="https://img-blog.csdnimg.cn/20190402203353935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="模板ID4701"></li><li>开始导入,输入模板ID 点击<code>Load</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20190402204059907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt><br><img src="https://img-blog.csdnimg.cn/20190402203841680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="选择导入"></p><ul><li>设置<br><img src="https://img-blog.csdnimg.cn/20190402204013516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt></li><li>添加完成<br><img src="https://img-blog.csdnimg.cn/20190402204848531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="添加完成"></li><li>Grafana还支持很多数据源的监控， 后续在慢慢研究</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> prometheus </tag>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解线程池ThreadPoolExecutor</title>
      <link href="/2019/03/31/java/shen-ru-li-jie-xian-cheng-chi-threadpoolexecutor/"/>
      <url>/2019/03/31/java/shen-ru-li-jie-xian-cheng-chi-threadpoolexecutor/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>使用线程池技术可以降低资源的消耗，提高响应速度和线程的可重复利用性</li><li>当提交一个新任务到线程池后，线程池首先会判断核心线程池(<code>corePoolSize</code>）里的线程是否都在执行任务，如果不是则创建一个新的工作线程来执行任务。如果核心线程池<code>corePoolSize</code>的线程都被占用在执行任务，线程判断工作队列是否已满，如果工作队列没有满：则将新提交的任务存储到工作队列中，如果工作队列已满：判断线程池（<code>maximumPoolSize</code>）的线程是否处于工作状态，如果没有，则创建一个新的工作线程来执行任务。如果线程池已满，则交给饱和策略处理这个任务<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1w864isphj30p50a8dhl.jpg" alt="线程池处理的流程"></li></ul><h3 id="线程池的五种状态"><a href="#线程池的五种状态" class="headerlink" title="线程池的五种状态"></a>线程池的五种状态</h3><ul><li><code>RUNNING(运行中)</code>：线程池处在<code>RUNNING</code>状态时，能够接收新任务，以及对已添加的任务进行处理。线程池的初始化状态是RUNNING。</li><li><code>SHUTDOWN(关掉)</code>：调用线程池的<code>shutdown()</code>接口时，线程池由<code>RUNNING -&gt; SHUTDOWN</code>。处在<code>SHUTDOWN</code>状态时，不接收新任务，但能处理已添加的任务。</li><li><code>STOP(停止):</code>调用线程池的<code>shutdownNow</code>()接口时，线程池由(<code>RUNNING or SHUTDOWN</code> ) <code>-&gt; STOP</code>。处在<code>STOP</code>状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。 </li><li><code>tidying</code>：当线程池在<code>SHUTDOWN</code>状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 <code>SHUTDOWN -&gt; TIDYING</code>。 当线程池在<code>STOP</code>状态下，线程池中执行的任务为空时，就会由<code>STOP -&gt; TIDYING</code>。</li><li><code>terminated</code>(终止)：线程池彻底终止，就变成<code>terminated</code>状态。 线程池处在<code>tidying</code>状态时，执行完<code>terminated()</code>之后，就会由 <code>tidying -&gt; terminated</code>。</li></ul><h3 id="线程池的参数"><a href="#线程池的参数" class="headerlink" title="线程池的参数"></a>线程池的参数</h3><ul><li><code>corePoolSize</code>: 初始化指定的核心线程数量</li><li><code>maximumPoolSize</code>:允许的最大线程数。当前的线程数小于<code>maximumPoolSize</code>，则会新建线程来执行任务</li><li><code>keepAliveTime</code>:线程空闲的时间</li><li><code>unit</code>:keepAliveTime的单位</li><li><p><code>workQueue</code>:保存等待执行的任务的阻塞队列。初始化核心线程池已满时，队列未满会吧任务存储到队列中。</p><blockquote><p>可供选择的几种阻塞队列<br><code>ArrayBlockingQueue</code>：是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。<br><code>LinkedBlockingQueue</code>：一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。<br><code>SynchronousQueue</code>：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。<br><code>PriorityBlockingQueue</code>：一个具有优先级得无限阻塞队列</p></blockquote></li><li><p><code>threadFactory</code>：用于设置创建线程的工厂。不指定 则是默认</p></li><li><code>handler</code>:线程池的拒绝策略。线程池中的线程已经饱和了，而且阻塞队列也已经满了，则线程池会选择一种拒绝策略来处理该任务</li></ul><blockquote><p>线程池提供的<code>四种拒绝策略</code>，也可以实现自己的拒绝策略： </p></blockquote><ul><li><code>AbortPolicy</code>：默认策略  抛出异常</li><li><code>CallerRunsPolicy</code>：由当前调用者所在的线程来执行任务</li><li><code>DiscardOldestPolicy</code>：丢弃阻塞队列中靠最前的任务，并执行当前任务</li><li><code>DiscardPolicy</code>：直接丢弃多余的任务</li></ul><pre class=" language-java"><code class="language-java"> ThreadPoolExecutor executor<span class="token operator">=</span><span class="token keyword">new</span>                <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token number">10</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>getCorePoolSize()</code>  返回核心线程数。</li><li><code>getMaximumPoolSize()</code>  返回允许的最大线程数。</li><li><code>getPoolSize()</code>   返回池中的当前线程数。</li><li><code>getQueue()</code>     返回此执行程序使用的任务队列。</li><li><code>isShutdown()</code>  如果此执行程序已关闭，则返回 true。</li><li><code>isTerminated()</code>   如果关闭后所有任务都已完成，则返回 true。</li><li><code>execute(Runnable command)</code>  在将来某个时间执行给定任务</li><li><code>shutdown()</code>   按过去执行已提交任务的顺序发起一个有序的关闭，但是不接受新任务。</li><li><code>shutdownNow()</code>    尝试停止所有的活动执行任务、暂停等待任务的处理，并返回等待执行的任务列表。</li></ul><h2 id="自定义线程名称"><a href="#自定义线程名称" class="headerlink" title="自定义线程名称"></a>自定义线程名称</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 命名线程工厂</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NamedThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger poolNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> ThreadGroup group<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger threadNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> String namePrefix<span class="token punctuation">;</span>        <span class="token function">NamedThreadFactory</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SecurityManager s <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            group <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> name <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                name <span class="token operator">=</span> <span class="token string">"pool"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            namePrefix <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> poolNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-thread-"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> Thread <span class="token function">newThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> r<span class="token punctuation">,</span> namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span>                t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadPoolExecutor executor<span class="token operator">=</span><span class="token keyword">new</span>                <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token number">10</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">NamedThreadFactory</span><span class="token punctuation">(</span><span class="token string">"test-poll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="类中其他属性"><a href="#类中其他属性" class="headerlink" title="类中其他属性"></a>类中其他属性</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 线程池的控制状态:用来表示线程池的运行状态（整型的高3位）和运行的worker数量（低29位）</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 29位的偏移量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最大容量（2^29 - 1）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// runState is stored in the high-order bits</span>    <span class="token comment" spellcheck="true">// 线程运行状态，总共有5个状态，需要3位来表示（所以偏移量的29 = 32 - 3）</span>   <span class="token comment" spellcheck="true">/**    * RUNNING    :    接受新任务并且处理已经进入阻塞队列的任务    * SHUTDOWN    ：    不接受新任务，但是处理已经进入阻塞队列的任务    * STOP        :    不接受新任务，不处理已经进入阻塞队列的任务并且中断正在运行的任务    * TIDYING    :    所有的任务都已经终止，workerCount为0， 线程转化为TIDYING状态并且调用terminated钩子函数    * TERMINATED:    terminated钩子函数已经运行完成    **/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 阻塞队列</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 可重入锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存放工作线程集合</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashSet<span class="token operator">&lt;</span>Worker<span class="token operator">></span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Worker<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 终止条件</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition termination <span class="token operator">=</span> mainLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最大线程池容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> largestPoolSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 已完成任务数量</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> completedTaskCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 线程工厂</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> ThreadFactory threadFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拒绝执行处理器</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> RejectedExecutionHandler handler<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 线程等待运行时间</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否运行核心线程超时</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> allowCoreThreadTimeOut<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 核心池的大小</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最大线程池大小</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 默认拒绝执行处理器</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> RejectedExecutionHandler defaultHandler <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>                                                <span class="token comment" spellcheck="true">// 核心大小不能小于0</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>                                            <span class="token comment" spellcheck="true">// 线程池的初始最大容量不能小于0</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>                                <span class="token comment" spellcheck="true">// 初始最大容量不能小于核心大小</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                                                <span class="token comment" spellcheck="true">// keepAliveTime不能小于0</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化相应的域</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 进行下面三步** 1. 如果运行的线程小于corePoolSize,则尝试使用用户定义的Runnalbe对象创建一个新的线程*     调用addWorker函数会原子性的检查runState和workCount，通过返回false来防止在不应*     该添加线程时添加了线程* 2. 如果一个任务能够成功入队列，在添加一个线城时仍需要进行双重检查（因为在前一次检查后*     该线程死亡了），或者当进入到此方法时，线程池已经shutdown了，所以需要再次检查状态，*    若有必要，当停止时还需要回滚入队列操作，或者当线程池没有线程时需要创建一个新线程* 3. 如果无法入队列，那么需要增加一个新线程，如果此操作失败，那么就意味着线程池已经shut*     down或者已经饱和了，所以拒绝任务*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取线程池控制状态</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// worker数量小于corePoolSize</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加worker</span>            <span class="token comment" spellcheck="true">// 成功则返回</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不成功则再次获取线程池控制状态</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 线程池处于RUNNING状态，将用户自定义的Runnable对象添加进workQueue队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 再次检查，获取线程池控制状态</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程池不处于RUNNING状态，将自定义任务从workQueue队列中移除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 拒绝执行命令</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// worker数量等于0</span>            <span class="token comment" spellcheck="true">// 添加worker</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加worker失败</span>        <span class="token comment" spellcheck="true">// 拒绝执行命令</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="addWorker"><a href="#addWorker" class="headerlink" title="addWorker"></a>addWorker</h4><ol><li><p>原子性的增加workerCount。</p></li><li><p>将用户给定的任务封装成为一个worker，并将此worker添加进workers集合中。</p></li><li><p>启动worker对应的线程，并启动该线程，运行worker的run方法。</p></li><li><p>回滚worker的创建动作，即将worker从workers集合中删除，并原子性的减少workerCount。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retry<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 外层无限循环</span>        <span class="token comment" spellcheck="true">// 获取线程池控制状态</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取状态</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>            <span class="token comment" spellcheck="true">// 状态大于等于SHUTDOWN，初始的ctl为RUNNING，小于SHUTDOWN</span>            <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>        <span class="token comment" spellcheck="true">// 状态为SHUTDOWN</span>               firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>        <span class="token comment" spellcheck="true">// 第一个任务为null</span>               <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// worker队列不为空</span>            <span class="token comment" spellcheck="true">// 返回</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// worker数量</span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                                <span class="token comment" spellcheck="true">// worker数量大于等于最大容量</span>                wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// worker数量大于等于核心线程池大小或者最大线程池大小</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// 比较并增加worker的数量</span>                <span class="token comment" spellcheck="true">// 跳出外层循环</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取线程池控制状态</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此次的状态与上次获取的状态不相同</span>                <span class="token comment" spellcheck="true">// 跳过剩余部分，继续循环</span>                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// worker开始标识</span>    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// worker被添加标识</span>    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// </span>    Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化worker</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取worker对应的线程</span>        <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 线程不为null</span>            <span class="token comment" spellcheck="true">// 线程池锁</span>            <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取锁</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                <span class="token comment" spellcheck="true">// 线程池的运行状态</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                                    <span class="token comment" spellcheck="true">// 小于SHUTDOWN</span>                    <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等于SHUTDOWN并且firstTask为null</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable    // 线程刚添加进来，还未启动就存活</span>                        <span class="token comment" spellcheck="true">// 抛出线程状态异常</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 将worker添加到worker集合</span>                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 获取worker集合的大小</span>                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 队列大小大于largestPoolSize</span>                        <span class="token comment" spellcheck="true">// 重新设置largestPoolSize</span>                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 设置worker已被添加标识</span>                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 释放锁</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// worker被添加</span>                <span class="token comment" spellcheck="true">// 开始执行worker的run方法</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 设置worker已开始标识</span>                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// worker没有开始</span>            <span class="token comment" spellcheck="true">// 添加worker失败</span>            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><p>runWorker函数中会实际执行给定任务（即调用用户重写的run方法），并且当给定任务完成后，会继续从阻塞队列中取任务，直到阻塞队列为空（即任务全部完成）。在执行给定任务时，会调用钩子函数，利用钩子函数可以完成用户自定义的一些逻辑。在runWorker中会调用到getTask函数和processWorkerExit钩子函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前线程</span>    Thread wt <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取w的firstTask</span>    Runnable task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置w的firstTask为null</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 释放锁（设置state为0，允许中断）</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// allow interrupts</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 任务不为null或者阻塞队列还存在任务</span>            <span class="token comment" spellcheck="true">// 获取锁</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// If pool is stopping, ensure thread is interrupted;</span>            <span class="token comment" spellcheck="true">// if not, ensure thread is not interrupted.  This</span>            <span class="token comment" spellcheck="true">// requires a recheck in second case to deal with</span>            <span class="token comment" spellcheck="true">// shutdownNow race while clearing interrupt</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>    <span class="token comment" spellcheck="true">// 线程池的运行状态至少应该高于STOP</span>                 <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token comment" spellcheck="true">// 线程被中断</span>                  <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token comment" spellcheck="true">// 再次检查，线程池的运行状态至少应该高于STOP</span>                <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// wt线程（当前线程）没有被中断</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 中断wt线程（当前线程）</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 在执行之前调用钩子函数</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                Throwable thrown <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 运行给定的任务</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 执行完后调用钩子函数</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                task <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 增加给worker完成的任务数量</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 释放锁</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理完成后，调用钩子函数</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此函数用于从workerQueue阻塞队列中获取Runnable对象，由于是阻塞队列，所以支持有限时间等待（poll）和无限时间等待（take）。在该函数中还会响应shutDown和、shutDownNow函数的操作，若检测到线程池处于SHUTDOWN或STOP状态，则会返回null，而不再返回阻塞队列中的Runnalbe对象。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Did the last poll() time out?</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 无限循环，确保操作成功</span>            <span class="token comment" spellcheck="true">// 获取线程池控制状态</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 运行的状态</span>            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 大于等于SHUTDOWN（表示调用了shutDown）并且（大于等于STOP（调用了shutDownNow）或者worker阻塞队列为空）</span>                <span class="token comment" spellcheck="true">// 减少worker的数量</span>                <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 返回null，不执行任务</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取worker数量</span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Are workers subject to culling?</span>            <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否允许coreThread超时或者workerCount大于核心大小</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// worker数量大于maximumPoolSize</span>                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// workerCount大于1或者worker阻塞队列为空（在阻塞队列不为空时，需要保证至少有一个wc）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 比较并减少workerCount</span>                    <span class="token comment" spellcheck="true">// 返回null，不执行任务，该worker会退出</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 跳过剩余部分，继续循环</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Runnable r <span class="token operator">=</span> timed <span class="token operator">?</span>                    workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 等待指定时间</span>                    workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">// 一直等待，直到有元素</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> r<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 等待指定时间后，没有获取元素，则超时</span>                timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 抛出了被中断异常，重试，没有超时</span>                timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>processWorkerExit函数是在worker退出时调用到的钩子函数，而引起worker退出的主要因素如下</p><ol><li><p>阻塞队列已经为空，即没有任务可以运行了。</p></li><li><p>调用了shutDown或shutDownNow函数</p></li></ol><p>此函数会根据是否中断了空闲线程来确定是否减少workerCount的值，并且将worker从workers集合中移除并且会尝试终止线程池。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">,</span> <span class="token keyword">boolean</span> completedAbruptly<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>completedAbruptly<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果被中断，则需要减少workCount    // If abrupt, then workerCount wasn't adjusted</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取可重入锁</span>        <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取锁</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将worker完成的任务添加到总的完成任务中</span>            completedTaskCount <span class="token operator">+=</span> w<span class="token punctuation">.</span>completedTasks<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 从workers集合中移除该worker</span>            workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放锁</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 尝试终止</span>        <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取线程池控制状态</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateLessThan</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 小于STOP的运行状态</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>completedAbruptly<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> min <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> corePoolSize<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 允许核心超时并且workQueue阻塞队列不为空</span>                    min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">>=</span> min<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// workerCount大于等于min</span>                    <span class="token comment" spellcheck="true">// 直接返回</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// replacement not needed</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 添加worker</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查shutdown权限</span>            <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置线程池控制状态为SHUTDOWN</span>            <span class="token function">advanceRunState</span><span class="token punctuation">(</span>SHUTDOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 中断空闲worker</span>            <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用shutdown钩子函数</span>            <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook for ScheduledThreadPoolExecutor</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 尝试终止</span>        <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 无限循环，确保操作成功</span>            <span class="token comment" spellcheck="true">// 获取线程池控制状态</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span>                                            <span class="token comment" spellcheck="true">// 线程池的运行状态为RUNNING</span>                <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> TIDYING<span class="token punctuation">)</span> <span class="token operator">||</span>                            <span class="token comment" spellcheck="true">// 线程池的运行状态最小要大于TIDYING</span>                <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 线程池的运行状态为SHUTDOWN并且workQueue队列不为null</span>                <span class="token comment" spellcheck="true">// 不能终止，直接返回</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 线程池正在运行的worker数量不为0    // Eligible to terminate</span>                <span class="token comment" spellcheck="true">// 仅仅中断一个空闲的worker</span>                <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span>ONLY_ONE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取线程池的锁</span>            <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取锁</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span>TIDYING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 比较并设置线程池控制状态为TIDYING</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 终止，钩子函数</span>                        <span class="token function">terminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 设置线程池控制状态为TERMINATED</span>                        ctl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>TERMINATED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 释放在termination条件上等待的所有线程</span>                        termination<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 释放锁</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// else retry on failed CAS</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> onlyOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 线程池的锁</span>        <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取锁</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Worker w <span class="token operator">:</span> workers<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遍历workers队列</span>                <span class="token comment" spellcheck="true">// worker对应的线程</span>                Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 线程未被中断并且成功获得锁</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 中断线程</span>                        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 释放锁</span>                        w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>onlyOne<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 若只中断一个，则跳出循环</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放锁</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadPoolExecutor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解阻塞队列ArrayBlockingQueue源码</title>
      <link href="/2019/03/30/java/shen-ru-li-jie-arrayblockingqueue/"/>
      <url>/2019/03/30/java/shen-ru-li-jie-arrayblockingqueue/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>ArrayBlockingQueue</code>是一个由数组构成的有界阻塞队列，此队列按 <code>FIFO</code>（先进先出）原则对元素进行排序,支持公平和非公平模式，默认情况下不保证线程公平的访问队列。新元素插入到队列的尾部，队列获取操作则是从队列头部开始获得元素<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1w8723xluj30fg01mmy3.jpg" alt="继承AbstractQueue类,实现BlockingQueue接口"><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2></li><li><code>ArrayBlockingQueue(int capacity)</code>  创建一个固定容量和默认非公司访问策略队列</li><li><code>ArrayBlockingQueue(int capacity, boolean fair)</code>  创建一个具有固定容量和指定访问策略的 队列</li><li><code>ArrayBlockingQueue(int capacity, boolean fair, Collection&lt;? extends E&gt; c)</code> 创建一个具有固定容量和指定访问策略，并且制定元素类型的 队列</li><li><code>boolean add(E e)</code> 插入指定元素到队列尾部，成功返回true,队列已满会直接抛出异常</li><li><code>boolean    offer(E e)</code> 插入指定元素到队列尾部，成功时返回 true，如果此队列已满，则返回 false</li><li><code>E    peek()</code>  获取但不移除此队列的头；如果此队列为空，则返回 null</li><li><code>E    poll()</code>  获取并移除此队列的头，如果此队列为空，则返回 null</li><li><code>void    put(E e)</code>    将指定的元素插入此队列的尾部，如果该队列已满，则等待可用的空间</li><li><code>E    take()</code> 获取并移除此队列的头部，在元素变得可用之前一直等待</li></ul><h2 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h2><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">/** 存放队列的 */</span>    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>    <span class="token keyword">int</span> takeIndex<span class="token punctuation">;</span>    <span class="token keyword">int</span> putIndex<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 可重入锁*/</span>    <span class="token keyword">final</span> ReentrantLock lock<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull<span class="token punctuation">;</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1w8814qlcj30h90astgb.jpg" alt="构造函数"></p><ul><li><code>ArrayBlockingQueue</code>的公平模式是使用<code>ReentrantLock</code>可重入锁实现的。并使用Condition使用队列的阻塞和唤醒<h2 id="put入队"><a href="#put入队" class="headerlink" title="put入队"></a>put入队</h2></li><li>put操作比较简单。阻塞的添加。首先判断插入元素是否为空，如果是空则抛出控指针</li><li>然后获取可重入的排他锁，根据初始化时选择是公平还是非公平模式的锁，加的锁是一个支持可中断的锁。当队列的count等于数组的长度，此时队列已满。则使用<code>await</code>的方法是当前线程进入阻塞模式。未满就执行增加元素，并释放锁。<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1w88ty60dj30c005wtbi.jpg" alt="put"></li><li>队列未满，则添加元素到队列尾巴，当<code>++putIndex == items.length</code>条件成立说明此时队列已满，<code>putIndex</code>赋值为0 从头开始。然后累加队列的总个数，并唤醒一个阻塞的线程</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1w89x8h87j30au04q0us.jpg" alt="队列未满添加元素"></p><h2 id="take出队"><a href="#take出队" class="headerlink" title="take出队"></a>take出队</h2><ul><li>出队的操作也很简单，首先拿到锁，然后判断队列是否为空，为空则进入阻塞等待。不为空则执行<code>dequeue</code>出队，并释放锁。<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1w8ahc4xij30ck05odil.jpg" alt="出队"><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//首先获取队列数组</span>      <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>      <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//拿到出队的元素，临时存储</span>      E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//出队的元素置为null</span>      items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//当出队元素到队列的最后一个元素，takeIndex还原为0</span>          takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      count<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//迭代器操作</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>          itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//唤醒一个阻塞线程，返回出队的元素</span>      notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> x<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArrayBlockingQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解ConcurrentLinkedQueue源码</title>
      <link href="/2019/03/29/java/shen-ru-li-jie-concurrentlinkedqueue-yuan-ma/"/>
      <url>/2019/03/29/java/shen-ru-li-jie-concurrentlinkedqueue-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>ConcurrentLinkedQueue</code>是一个基于链接节点的无边界的线程安全队列，它采用先进先出原则对元素进行排序，插入元素放入队列尾部，出队时从队列头部返回元素，利用CAS方式实现的</li><li><code>ConcurrentLinkedQueue</code>的结构由头节点和尾节点组成的，都是使用<code>volatile</code>修饰的。每个节点由节点元素<code>item</code>和指向下一个节点的<code>next</code>引用组成，组成一张链表结构。</li><li><code>ConcurrentLinkedQueue</code>继承自<code>AbstractQueue</code>类，实现<code>Queue</code>接口</li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li><code>boolean    add(E e)</code> 将指定元素插入此队列的尾部，当队列满时，抛出异常<ul><li><code>boolean    contains(Object o)</code> 判断队列是否包含次元素</li></ul></li><li><code>boolean    isEmpty()</code> 判断队列是否为空 <ul><li><code>boolean    offer(E e)</code>  将元素插入队列尾部，当队列满时返回false</li><li><code>E    peek()</code>     获取队列头部元素但不删除</li><li><code>E    poll()</code>   获取队列头部元素，并删除</li><li><code>boolean    remove(Object o)</code> 从队列中移指定元素</li></ul></li><li><code>int    size()</code>  返回此队列中的元素数量,需要遍历一遍集合。判断队列是否为空时，不推荐此方法</li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 头节点</span> <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾节点</span> <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> tail<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token function">ConcurrentLinkedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//初始化构造时 头结点等于尾结点</span>        head <span class="token operator">=</span> tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//创建一个最初包含给定 collection 元素的 ConcurrentLinkedQueue，按照此 collection 迭代器的遍历顺序来添加元素。</span> <span class="token keyword">public</span> <span class="token function">ConcurrentLinkedQueue</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> null<span class="token punctuation">,</span> t <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>E e <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> null<span class="token punctuation">)</span>                h <span class="token operator">=</span> t <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">lazySetNext</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                t <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> null<span class="token punctuation">)</span>            h <span class="token operator">=</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> h<span class="token punctuation">;</span>        tail <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">volatile</span> E item<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造一个新节点</span>   <span class="token function">Node</span><span class="token punctuation">(</span>E item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            UNSAFE<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> itemOffset<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">casItem</span><span class="token punctuation">(</span>E cmp<span class="token punctuation">,</span> E val<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> itemOffset<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">void</span> <span class="token function">lazySetNext</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>     UNSAFE<span class="token punctuation">.</span><span class="token function">putOrderedObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nextOffset<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">boolean</span> <span class="token function">casNext</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> cmp<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nextOffset<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe UNSAFE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前结点的偏移量</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> itemOffset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下一个结点的偏移量</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> nextOffset<span class="token punctuation">;</span>     <span class="token keyword">static</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                UNSAFE <span class="token operator">=</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> Node<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>                itemOffset <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>                    <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                nextOffset <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>                    <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="offer入队操作"><a href="#offer入队操作" class="headerlink" title="offer入队操作"></a>offer入队操作</h3><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>初始化操作就是创建一个新结点，并且<code>head</code>和<code>tail</code>相等,结点的数据域为空。<br><img src="https://img-blog.csdnimg.cn/20190328214940402.png" alt="初始化操作"></li><li>当第一次入队操作时，检查插入的值是否为空，为空则抛空指针，然后用当前的值创建一个新<code>Node</code>结点。然后执行死循环开始入队操作<br><img src="https://img-blog.csdnimg.cn/20190328220017332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="死循环入队操作"></li><li>首先定义了两个指针<code>p和t</code>,都指向<code>tail</code></li><li>然后定义<code>q</code>结点存储<code>p</code>的next指向的结点,此时p的next是为空没有结点的<br><img src="https://img-blog.csdnimg.cn/20190328220810259.png" alt="q指向p的next"></li><li>此时<code>q==null</code> 条件成立。执行<code>p.casNext(null, newNode)</code>.以cas方式把p的下一个节点指向新创建出来的结点，然后往下执行,<code>p=t</code> 直接返回true。此时初始化构造的结点的next指向第一次入队成功的结点<br><img src="https://img-blog.csdnimg.cn/2019032822184113.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="第一次入队成功结构"></li><li>第二次入队操作，首先也是非空检查，然后创建一个新结点。此时死循环入队操作。定义了两个指针<code>p和t</code>,都指向<code>tail</code>。定义<code>q</code>结点存储<code>p</code>的next指向的结点,此时p的next是不为空的，指向了上面创建的结点。所以<code>q==null</code>不成立。执行else操作</li></ul><p><img src="https://img-blog.csdnimg.cn/20190328222604551.png" alt="第二次入队q==null不成立"></p><ul><li>此时<code>p</code>也不等于<code>q</code>。<code>p！=t</code>不成立，p和t都是指向<code>tail</code>。因为不成立所以让<code>p=q</code>,此时p和q都是指向第二个结点。再次循循环操作。<br><img src="https://img-blog.csdnimg.cn/2019032822351839.png" alt></li><li>然后再次<code>p和t</code>,都指向<code>tail</code>。定义<code>q</code>结点存储<code>p</code>的next指向的结点。此时p的next指向还是空，所以<code>q=null</code>成立。执行<code>p.casNext(null, newNode)</code>.以cas方式把<code>p</code>的<code>next</code>指向新创建出来的结点。<br><img src="https://img-blog.csdnimg.cn/20190328224115536.png" alt></li><li>此时<code>if (p != t)</code>是成立的 执行<code>casTail(t, newNode);</code> 期望值是<code>t</code>,更新值新创建的结点。于是更新了tail结点移动到最后添加的结点</li></ul><p><img src="https://img-blog.csdnimg.cn/20190328224628328.png" alt><br>大概的入队流程就是这样重复上述操作。直到入队成功。<code>tail</code>结点并不是每次都是尾结点。所以每次入队都要通过<code>tail</code>定位尾结点。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//检查结点是为null，如果插入null则抛出空指针</span>        <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造一个新结点</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//死循换，一直到入队成功</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> t <span class="token operator">=</span> tail<span class="token punctuation">,</span> p <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//p表示队列尾结点，默认情况尾巴=结点就是taill结点</span>            <span class="token comment" spellcheck="true">//获取p结点的下一个节点</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//q为空,说明p就是taill结点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//case方式设置p(p=t)节点的next指向当前节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">//p不等于t更新尾结点,</span>                        <span class="token function">casTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//失败了也是没事的，因为表示有其他线程成功更新了tail节点</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//其他线程抢先完成入队，需要重新尝试</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//q不为空，p和相等</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>                p <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> head<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token comment" spellcheck="true">// // 在两跳之后检查尾部更新.</span>                p <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> q<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一个标号</span>        restartFromHead<span class="token operator">:</span>        <span class="token comment" spellcheck="true">//死循环方</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 定义p，h两个指针 都指向head</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">,</span> p <span class="token operator">=</span> h<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取当前p的值</span>                E item <span class="token operator">=</span> p<span class="token punctuation">.</span>item<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//值不为空，且以cas方式设置p的item赋值为空。两个条件成立向下执行</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">casItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// p和h不相等则更新头结点，否则直接返回值</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> h<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">//更新头结点，预期值是h,当p的next指向不为空，更新值是q,为空则是p</span>                        <span class="token function">updateHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> q <span class="token operator">:</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//返回当前p的值</span>                    <span class="token keyword">return</span> item<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果item为空说明已经被出队了，然后判断q是否null,是空则说明当前队列为空了。但是q = p.next赋值语句已经执行了</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//更新头结点，预期值h=head,更新p.此时p的item是空，说明已经被出队了</span>                    <span class="token function">updateHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>                    <span class="token keyword">continue</span> restartFromHead<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    p <span class="token operator">=</span> q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>出队操作是以死循环的方式直到出队成功。 第一次出队首先执行<code>for (Node&lt;E&gt; h = head, p = h, q;;)</code> 定义两个指针<code>p</code>和<code>h</code>都指向<code>head</code><br><img src="https://img-blog.csdnimg.cn/2019032900283295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt></li><li>然后定义一个item存储p(这里就是head)的值，然后判断item是否为空，此时第一次出队时为空的，则执行 <code>else if ((q = p.next) == null)</code> ,此条件不成立，因为head的next有结点。执行 <code>else if (p == q)</code>，此时不相等，因为上个操作已经<code>把q赋值为p的next结点了</code>。所以执行最后的else语句  <code>p = q;</code>在次循环执行。<br><img src="https://img-blog.csdnimg.cn/20190329004142245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt></li><li>此时<code>p.item</code>不为空条件成立且以<code>cas</code>方式更新<code>p</code>的i<code>tem</code>为空 <code>p.casItem(item, null)</code>。如果都两个条件都成立，判断 <code>if (p != h)</code>此时不成立的，更新<code>updateHead(h, ((q = p.next) != null) ? q : p);</code> 预期值是<code>h,</code>更新值是<code>q</code> 因为不为空。并返回item,第一次出队成功。</li></ul><p><img src="https://img-blog.csdnimg.cn/2019032900524254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt="第一次出队成功结构"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>CoucurrentLinkedQueue</code>的结构由头节点和尾节点组成的，都是使用<code>volatile</code>修饰的。每个节点由节点元素<code>item</code>和指向下一个节点的<code>next</code>引用组成.</li><li><code>入队</code>:先检查插入的值是否为空，如果是空则抛出异常。然后以死循坏的方式执行一直到入队成功，整个过程大概就是把<code>tail</code>结点的<code>next</code>指向新结点，然后更新<code>tail</code>为新结点即可。但是<code>tail</code>结点并不是每次都是尾结点。所以每次入队都要通过<code>tail</code>定位尾结点。</li><li><code>出队</code>：出队操作就是从队列里返回一个最早插入的节点元素，并清空该节点对元素的引用。并不是每次出队都更新<code>head</code>节点，当<code>head</code>节点有元素时，直接弹出<code>head</code>节点的元素，并以<code>cas</code>方式设置节点的<code>item</code>为<code>null</code>,不会更新<code>head</code>节点。只有当<code>head</code>节点没有元素值时，出队操作才会更新<code>head</code>节点，这种做法是为了减少<code>cas</code>方式更新<code>head</code>节点的消耗，提供出队的效率</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ConcurrentLinkedQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解ThreadLocal源码</title>
      <link href="/2019/03/28/java/shen-ru-li-jie-threadlocal-yuan-ma/"/>
      <url>/2019/03/28/java/shen-ru-li-jie-threadlocal-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>ThreadLocal</code> 是一个本地线程副本变量工具类。主要用于将私有线程和该线程存放的副本对象做一个映射，各个线程之间的变量互不干扰。在高并发场景下，可以实现无状态的调用，适用于各个线程不共享变量值的操作。</li><li>内部使用静态内部类<code>ThreadLocalMap</code>存储每个线程变量副本的方法，key存储的是当前线程的<code>ThreadLocal</code>对象，value就是当前<code>ThreadLocal</code>对应的线程变量的的副本值。</li></ul><h2 id="提供方法"><a href="#提供方法" class="headerlink" title="提供方法"></a>提供方法</h2><ul><li><code>T    get()</code>   返回此线程局部变量的当前线程副本中的值。</li><li><code>protected  T    initialValue()</code>   返回此线程局部变量的当前线程的“<code>初始值</code>”。线程第一次使用 <code>get()</code> 方法访问变量时将调用此方法，但如果线程之前调用了 <code>set(T)</code> 方法，则不会对该线程再调用 <code>initialValue</code> 方法。通常，此方法对每个线程最多调用一次，但如果在调用 <code>get()</code> 后又调用了 <code>remove()</code>，则可能再次调用此方法。<ul><li><code>void    remove()</code> 移除此线程局部变量当前线程的值。</li><li><code>void    set(T value)</code>   将此线程局部变量的当前线程副本中的值设置为指定值。</li></ul></li></ul><h2 id="怎嘛使用"><a href="#怎嘛使用" class="headerlink" title="怎嘛使用"></a>怎嘛使用</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalTest</span> <span class="token punctuation">{</span>    ThreadLocal<span class="token operator">&lt;</span>Integer<span class="token operator">></span> threadLocal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回此线程局部变量的当前线程的“初始值”。</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> Integer <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//   返回此线程局部变量的当前线程副本中的值。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将此线程局部变量的当前线程副本中的值设置为指定值。</span>        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocalTest test<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ThreadLocalTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> state<span class="token operator">=</span>test<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取值："</span><span class="token operator">+</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> state<span class="token operator">=</span>test<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取值："</span><span class="token operator">+</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出</span>Thread<span class="token operator">-</span><span class="token number">0</span>获取值：<span class="token number">1</span>Thread<span class="token operator">-</span><span class="token number">0</span>获取值：<span class="token number">2</span>Thread<span class="token operator">-</span><span class="token number">0</span>获取值：<span class="token number">3</span>Thread<span class="token operator">-</span><span class="token number">1</span>获取值：<span class="token number">1</span>Thread<span class="token operator">-</span><span class="token number">1</span>获取值：<span class="token number">2</span>Thread<span class="token operator">-</span><span class="token number">1</span>获取值：<span class="token number">3</span></code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="set-方法"><a href="#set-方法" class="headerlink" title="set()方法"></a>set()方法</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录当前线程</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前线》的ThreadLocalMap </span>        ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//ThreadLocalMap  不为空则直接设置当前变成的副本值，</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">//创建ThreadLocalMap  key当前线程对象,value：副本值</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p><code>ThreadLocalMap</code> 内部类</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/** 与此ThreadLocal关联的值.  */</span>            Object value<span class="token punctuation">;</span>            <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><ul><li>源码中可以看出  <code>ThreadLocalMap</code> 依靠<code>Entry</code> 来存储<code>ThreadLocal</code>和副本值，key就是<code>ThreadLocal</code>，<code>value</code>就是<code>ThreadLocal</code>的变量副本值。<code>Entry</code> 集成<code>WeakReference</code>，说明是一个弱引用关系。当一个对象仅仅被弱引用指向, 而没有任何其他强引用指向的时候, 如果这时GC运行, 那么这个对象就会被回收，不论当前的内存空间是否足够，这个对象都会被回收。</li></ul><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//获取与ThreadLocal关联的Thread中的ThreadLocal。</span>    ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li><code>ThreadLocal</code>是包含在<code>Thread</code>类中的</li></ul><p><code>ThreadLocalMap</code>的<code>set</code>方法</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//计算ThreadLocal 散列值 找到存储位置</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//利用线性探测法找到合适的存储位置</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                 e <span class="token operator">!=</span> null<span class="token punctuation">;</span>                 e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果找到的k和传入的key相等，说明存在，覆盖更新即可</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// key == null，但是存在值（因为此处的e != null），说明之前的ThreadLocal对象已经被回收了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 替换之前的的元素</span>                    <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不存在对应key的实例，则创建一个新的</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//增加容量大小</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//        // 如果没有清理陈旧的 Entry 并且数组中的元素大于了阈值，则进行 rehash</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">>=</span> threshold<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//整表格的大小。 首先扫描整个表，删除过时的条目。 如果这不足以缩小表的大小，则将表大小加倍。</span>                <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="get-操作"><a href="#get-操作" class="headerlink" title="get()操作"></a>get()操作</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录当前访问线程</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前线程的ThreadLocalMap对象</span>        <span class="token comment" spellcheck="true">//Thread的    ThreadLocal.ThreadLocalMap threadLocals参数</span>        ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//存在ThreadLocalMap 则获取相对应的Entry</span>            ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//ThreadLocalMap内部类中有一个Entry内部类</span>                <span class="token comment" spellcheck="true">//依靠Entry`来存储`ThreadLocal`和副本值。直接以ThreadLocal为key获取副本值</span>                T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//getEntry方法</span>    <span class="token keyword">private</span> Entry <span class="token function">getEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//计算ThreadLocal的在数组中的位置，采用了开放定址法</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Entry e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//存在则返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>                      <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token comment" spellcheck="true">//不在在的操作</span>                <span class="token keyword">return</span> <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**          key:线程本地对象          i:哈希表的索引          e: 对应的Entry          */</span>        <span class="token keyword">private</span> Entry <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Entry e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">//key == null，有利于GC回收，能够有效地避免内存泄漏。</span>                    <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>参考：<a href="http://cmsblogs.com/?p=2442" target="_blank" rel="noopener">http://cmsblogs.com/?p=2442</a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解Semaphore源码</title>
      <link href="/2019/03/24/java/shen-ru-li-jie-semaphore-yuan-ma/"/>
      <url>/2019/03/24/java/shen-ru-li-jie-semaphore-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>Semaphore</code> 通常用于限制可以访问某些资源（物理或逻辑的）的线程数目。</li><li>比如数据库的连接资源是非常有限的，如果同时有上千个线程去数据获取连接，对数据造成的压力是非常的，会造成数据库无法连接而报错，<code>Semaphore</code>就可以限制此类问题</li><li><code>Semaphore</code>有非公平和公平模式，默认是非公平的。当<code>Semaphore</code>设置为1时，可以排它锁使用，同一个时刻，只能限制一个线程访问。和<code>CountDownLatch</code>一样的，内部都有一个Sync内部类，基于AQS实现同步状态的释放和获取。</li></ul><h2 id="Semaphore提供的方法"><a href="#Semaphore提供的方法" class="headerlink" title="Semaphore提供的方法"></a>Semaphore提供的方法</h2><ul><li><code>Semaphore(int permits)</code> 创建非公平的指定许可数的信号量</li><li><code>Semaphore(int permits, boolean fair)</code> 创建指定的许可数和指定是否是公平模式的信号量</li><li><code>void acquire()</code> 从此信号量获取一个许可，在提供一个许可前一直将线程阻塞，否则线程被中断</li><li><code>void acquire(int permits)</code>  从此信号量获取给定数目的许可，在提供这些许可前一直将线程阻塞，或者线程已被中断。</li><li><code>int availablePermits()</code> 返回此信号量中当前可用的许可数。</li><li><code>int getQueueLength()</code> 返回正在等待获取的线程的估计数目。</li><li><code>boolean hasQueuedThreads()</code> 查询是否有线程正在等待获取。</li><li><code>Collection&lt;Thread&gt;   getQueuedThreads()</code>  返回一个 collection，包含可能等待获取的线程。</li><li><code>reducePermits(int reduction)</code>  根据指定的缩减量减小可用许可的数目。</li><li><code>release()</code> 释放一个许可，将其返回给信号量。</li><li><code>release(int permits)</code> 返回标识此信号量的字符串，以及信号量的状态。</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Semaphore s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//非公平</span>    <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span>   <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取一个许可</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 获取一个许可开始执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 退出。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//规划一个许可</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>输出结果,可以看出同一时刻只能三个线程进入执行，当有一个线程退出归还许可后，立马就会有其余线程去竞争这个多出的许可。</li></ul><pre class=" language-java"><code class="language-java">Thread<span class="token operator">-</span><span class="token number">0</span> 获取一个许可开始执行<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Thread<span class="token operator">-</span><span class="token number">1</span> 获取一个许可开始执行<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Thread<span class="token operator">-</span><span class="token number">2</span> 获取一个许可开始执行<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Thread<span class="token operator">-</span><span class="token number">2</span> 退出。Thread<span class="token operator">-</span><span class="token number">1</span> 退出。Thread<span class="token operator">-</span><span class="token number">3</span> 获取一个许可开始执行<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Thread<span class="token operator">-</span><span class="token number">0</span> 退出。Thread<span class="token operator">-</span><span class="token number">4</span> 获取一个许可开始执行<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Thread<span class="token operator">-</span><span class="token number">5</span> 获取一个许可开始执行<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Thread<span class="token operator">-</span><span class="token number">4</span> 退出。Thread<span class="token operator">-</span><span class="token number">3</span> 退出。Thread<span class="token operator">-</span><span class="token number">5</span> 退出</code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><blockquote><p>初始化一个信号时</p></blockquote><ul><li>当执行<code>new Semaphore(3)</code>时，默认是非公平的实现方式。看看内部是如何是实现的</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> permits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span>permits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>源码中可以看出是通过<code>NonfairSync`</code>这个<code>内部类返回的一个实列，</code>NonfairSync<code>是</code>Sync`子类。<blockquote><p><code>acquire</code> 获取一个许可</p></blockquote></li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>获取许可时调用的是AQS中的<code>acquireSharedInterruptibly</code>方法，以共享模式获同步状态，如果被中断则中止。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断线程是否中断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//获取同步状态失败 执行如下方法，这个方法以自旋的方式一直获取同步状态</span>            <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li><code>tryAcquireShared</code>由Sync类提供实现，非公平模式调用<code>NonfairSync</code>的,否则调用<code>FairSync</code>类的方法</li></ul><blockquote><p>非公平</p></blockquote><pre class=" language-java"><code class="language-java">   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>2694183684443567898L<span class="token punctuation">;</span>        <span class="token function">NonfairSync</span><span class="token punctuation">(</span><span class="token keyword">int</span> permits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>permits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取锁</span>        <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Sync类的非公平获取同步状态方法</span>            <span class="token keyword">return</span> <span class="token function">nonfairTryAcquireShared</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>公平</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 2014338818796000944L<span class="token punctuation">;</span>        <span class="token function">FairSync</span><span class="token punctuation">(</span><span class="token keyword">int</span> permits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>permits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//公平模式获取信号量</span>        <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//自旋操作</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//公平模式，先要判断该线程是否位于CLH同步队列的列头</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//获取同步状态总数（信号量）</span>                <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//当前信号量减去获取的acquires个信号。</span>                <span class="token keyword">int</span> remaining <span class="token operator">=</span> available <span class="token operator">-</span> acquires<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//CAS方式设置信号量。unsafe类提供实现，返回信号量</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>                    <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>available<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> remaining<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p><code>Sync</code>是继承AQS队列同步器，是自定义同步组件的具体的实现。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1192457210091910933L<span class="token punctuation">;</span>        <span class="token function">Sync</span><span class="token punctuation">(</span><span class="token keyword">int</span> permits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setState</span><span class="token punctuation">(</span>permits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getPermits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//非公平获取信号量</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">nonfairTryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//自旋 </span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取同步状态总数（信号量）</span>                <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//当前信号量减去获取的acquires个信号。</span>                <span class="token keyword">int</span> remaining <span class="token operator">=</span> available <span class="token operator">-</span> acquires<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//CAS方式设置信号量。unsafe类提供实现，返回信号量</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>remaining <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>                    <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>available<span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> remaining<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">reducePermits</span><span class="token punctuation">(</span><span class="token keyword">int</span> reductions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> next <span class="token operator">=</span> current <span class="token operator">-</span> reductions<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">></span> current<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// underflow</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Permit count underflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">drainPermits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> current<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>从源码中得出，Semaphore获取信号量许可时，公平和非公平的区别是，公平模式首先判断当前线程是否位于CLH同步队列的队列头中。</li><li>而非公平模式是的竞争是抢占式，谁竞争到就谁获取。</li><li>先是获取当前信号总数减去<code>acquires</code>个许可信号，然后以CAS方式设置CAS方式设置信号，并返回新的信号总数。CAS内部是依赖于AQS队列同步器中的<code>unsafel</code>类提供实现。</li></ul><blockquote><p>release归还许可</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>释放信号量 <code>release</code> 首先会调用AQS<code>releaseShared</code>.</li><li><code>tryReleaseShared</code> 会调用<code>Sync</code>的<code>tryReleaseShared</code>方法</li><li>释放操作时以自旋方式执行，首先获取总的信号建去要释放的信号量，然后判断这个信号量是否小于大于总的信号量，如果大于则抛出异常，否则以CAS的方式设置信号量</li></ul><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//释放同步状态，也就是归还信号量</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自旋操作</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> next <span class="token operator">=</span> current <span class="token operator">+</span> releases<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">&lt;</span> current<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum permit count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>从源码中可以看出Semaphore的实现方式主要是依靠AQS实现的，以<code>state</code>同步状态成变量作为信号量的总数，获取和释放都是以CAS+自旋操作的方式设置<code>state</code>成员变量。</li><li>JDK并发包中的工具了哦都是AQS为基石实现的。大多都是使用CAS+自旋的方式去改变state来达到锁的获和释放</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Semaphore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解CyclicBarrier同步屏障源码</title>
      <link href="/2019/03/23/java/shen-ru-li-jie-cyclicbarrier-tong-bu-ping-zhang-yuan-ma/"/>
      <url>/2019/03/23/java/shen-ru-li-jie-cyclicbarrier-tong-bu-ping-zhang-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>CyclicBarrie允许让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。</li><li>CyclicBarrier只能唤起一个任务，CountDownLatch可以同时唤起多个任务</li><li>CyclicBarrier可重用，CountDownLatch不可重用，计数值为0该CountDownLatch就不可再用了</li></ul><h2 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h2><ul><li><code>CyclicBarrie</code>有两个构造方法，<code>CyclicBarrier(int parties)</code> 创建一个新的 <code>CyclicBarrier</code>，它将在给定数量的参与者（线程）处于等待状态时启动，但它不会在启动 barrier 时执行预定义的操作。</li><li><code>CyclicBarrier(int parties, Runnable barrierAction)</code> 多了一个传入的屏障被唤醒时指定优先执行的方法，该操作由最后一个进入 barrier 的线程执行。</li><li><code>await()</code>   在所有参与者都已经在此 barrier 上调用 await 方法之前，将一直等待。</li><li><code>await(long timeout, TimeUnit unit)</code>  在所有参与者都已经在此屏障上调用 await 方法之前将一直等待,或者超出了指定的等待时间。</li><li><code>int getNumberWaiting()</code> 返回当前在屏障处等待的参与者数目。</li><li><code>int getParties()</code>  返回要求启动此 barrier 的参与者数目。</li><li><code>boolean isBroken()</code>  查询此屏障是否处于损坏状态。</li><li><code>void reset()</code>将屏障重置为其初始状态。<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CyclicBarrier c<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//批量处里表格数据任务</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">task</span>  <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：开始处理表格数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//处理完计数器就减1</span>                c<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span>  e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//初始化屏障总数，并指定优先执行的方法，该操作由最后一个进入 barrier 的线程执行。</span>              c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"屏障已到达，开始汇总任务执行。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出</p><pre class=" language-java"><code class="language-java">Thread<span class="token operator">-</span><span class="token number">0</span>：开始处理表格数据Thread<span class="token operator">-</span><span class="token number">1</span>：开始处理表格数据Thread<span class="token operator">-</span><span class="token number">2</span>：开始处理表格数据屏障已到达，开始汇总任务执行。。。。</code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/** 重入 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Condition trip <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> parties<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Runnable barrierCommand<span class="token punctuation">;</span>    <span class="token keyword">private</span> Generation generation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CyclicBarrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">,</span> Runnable barrierAction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parties <span class="token operator">=</span> parties<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> parties<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>barrierCommand <span class="token operator">=</span> barrierAction<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CyclicBarrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>parties<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>可以看出屏障计数器不能为0 。内部是依赖重入锁ReentrantLock和Condition实现的，这点和CountDownLatch不一样。</p></blockquote><h3 id="await-方法"><a href="#await-方法" class="headerlink" title="await()方法"></a>await()方法</h3><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> BrokenBarrierException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">dowait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> toe<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>toe<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cannot happen</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>await()<code>方法主要依靠</code>dowait`方法时u，会让线程会到达屏障点时一直处于等待中</p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dowait</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> timed<span class="token punctuation">,</span> <span class="token keyword">long</span> nanos<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> BrokenBarrierException<span class="token punctuation">,</span>  TimeoutException <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加锁</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//屏障的每次使用都表示为生成实例,每当屏障被触发或重置时，生成都会改变</span>            <span class="token keyword">final</span> Generation g <span class="token operator">=</span> generation<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//broken破碎的意思，检测Generation是否破碎，就抛出异常。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span>broken<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BrokenBarrierException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//检测到线程执行了中断操作,抛异常，终止CyclicBarrie操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将当前屏障生成设置为已断开（broken置为true），并唤醒所有人。仅在持锁时调用。</span>                <span class="token function">breakBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">//每当有线程执await时，屏障总数就递减1一个</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">--</span>count<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//屏障数为0时，说明线程都已到达屏障点，开门执行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// tripped</span>                <span class="token keyword">boolean</span> ranAction <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> Runnable command <span class="token operator">=</span> barrierCommand<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//触发线构造函数时，传入的优先执行的线程任务，如果有</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        command<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ranAction <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//唤醒所有等待线程，并重新初始化Generation ，broken置为false</span>                    <span class="token function">nextGeneration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//  如果唤醒失败，</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ranAction<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//则中断CyclicBarrier，并唤醒所有等待线程</span>                        <span class="token function">breakBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 屏障未到达时的逻辑，一个死循坏， 自选操作</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//如果未指定超时等待时间，则调用Condition.await()方法使线程处于等待</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timed<span class="token punctuation">)</span>                        trip<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//如果指定了超时等待时间大于0，则使用Condition的超时等待方法</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">></span> 0L<span class="token punctuation">)</span>                        nanos <span class="token operator">=</span> trip<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//发生异常处理操作</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> generation <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> g<span class="token punctuation">.</span>broken<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">breakBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> ie<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//中断当前线程</span>                        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// generation 破碎时（中断操作），则抛异常，</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span>broken<span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BrokenBarrierException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> generation<span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//超时等待了 唤醒所又线程，并抛出异常</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> nanos <span class="token operator">&lt;=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">breakBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//释放锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>当线程调用<code>await</code>方法，首先会拿到<code>ReentrantLock</code> 重入锁执行加锁操作，然后判断是否有线程执行了中断操作，如果有则抛出异常，没有就继续向下执行，把屏障计数器做递减操作，然后判断这个屏障计数器是否为0 ，如果递减后的计数器等于0，则表明所有线程都已到达屏障点。</li><li>然后判断是否有传入指定的优先执行任务，如果有则先启动这个任务，然后唤醒所有等待的线程，重置屏障计数器<code>count</code>和<code>Generation</code></li><li>如果屏障值不为0，则执行一个死循环，也就是自选操作。自选操作中，会先判断是否制定了超时等待时间，如果没有指定就执行<code>Condition</code>的<code>await</code>方法，让线程一直处于等待中，除非被唤醒或有其它线程执行了中断CyclicBarrier操作。</li><li>如果制定了超时等待时间，则执行<code>Condition</code>的超时等待方法，让线程一直处于等待中，除非被唤醒或到达超时等待时间</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>CyclicBarrier</code>的某个线程运行到某个点上之后，该线程即停止运行，直到所有的线程都到达了这个点，所有线程才重新运行；<code>CountDownLatch</code>则不是，某线程运行到某个点上之后，只是给某个数值-1而已，该线程继续运行</li><li><code>CyclicBarrier</code>只能唤起一个任务，<code>CountDownLatch</code>可以唤起多个任务</li><li><code>CyclicBarrier</code>可重用，<code>CountDownLatch</code>不可重用，计数值为<code>0</code>该<code>CountDownLatch</code>就不可再用了</li><li><code>CountDownLatch</code>内部是基于<code>AQS</code>队列同步器实现，<code>CyclicBarrier</code>基于ReentrantLock和Condition实现等待机制和唤醒的</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CyclicBarrier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解CountDownLatch源码</title>
      <link href="/2019/03/22/java/shen-ru-li-jie-countdownlatch-yuan-ma/"/>
      <url>/2019/03/22/java/shen-ru-li-jie-countdownlatch-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>允许一个线程的或多个线程等待其他线程完成操作。和join方法类似，初始化对象时通过传入一个固定的计数器总数，线程方法执行时调用countDown给计数器减1，当计数器0时，就会恢复等待的线程继续执行。</li><li>CountDownLatch的计数器不能重用。只能使用一次<br>*常用的使用场景是提升程序的并行效率，同时处理多个任务后，最后需要提示任务完成。类似的表格的批量解析读取。</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="一个线程等待"><a href="#一个线程等待" class="headerlink" title="一个线程等待"></a>一个线程等待</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> CountDownLatch c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化任务数："</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务1执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务执行完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-java"><code class="language-java">初始化任务数：<span class="token number">2</span>任务<span class="token number">1</span>执行任务<span class="token number">2</span>执行任务执行完毕！</code></pre><h3 id="多个线程等待"><a href="#多个线程等待" class="headerlink" title="多个线程等待"></a>多个线程等待</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> CountDownLatch countDownLatch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//汇总任务</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">T1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有表格已经读取完了，进行汇总处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//批量处里表格数据任务</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">task</span>  <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：开始处理表格数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//处理完计数器就减1</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//多线程读取表格</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-java"><code class="language-java">Thread<span class="token operator">-</span><span class="token number">1</span>：开始处理表格数据Thread<span class="token operator">-</span><span class="token number">2</span>：开始处理表格数据Thread<span class="token operator">-</span><span class="token number">3</span>：开始处理表格数据所有表格已经读取完了，进行汇总处理</code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="获取一个countDownLatch时"><a href="#获取一个countDownLatch时" class="headerlink" title="获取一个countDownLatch时"></a>获取一个countDownLatch时</h3><p><img src="https://img-blog.csdnimg.cn/2019032122130289.png" alt></p><ul><li>源码中可以看出是如果初始传入的j计数器为0时是直接抛出异常的；</li><li>内部是通过new Sync一个内部返回一个对象的。Sync是一个内部同步器类，继承AQS。</li></ul><h3 id="Sync内部类"><a href="#Sync内部类" class="headerlink" title="Sync内部类"></a>Sync内部类</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 4982264981922014374L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化同步状态，count就是传入的计数器</span>        <span class="token function">Sync</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setState</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取同步状态总数，就好像类似锁重入的总次数</span>        <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**        /共享式获取同步，类似读写锁的读写，，但是这里只是获取,没有做其它操作        state是一个volatile修饰的成员变量        */</span>        <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//共享式的释放同步状态，</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自旋</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//为0 说明计数器已经减完了 直接返回false</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//不为0的操作。 获取当前同步状态总数减一</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//CA方式设置state，成功返回true</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="await方法"><a href="#await方法" class="headerlink" title="await方法"></a>await方法</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>await方法是通过sync内部类调用AQS中的<code>acquireSharedInterruptibly()</code>方法</li><li>执行<code>await</code>方法的线程会在计数器没有成为0时一直处于等待，除非线程被中断，支持可中断的。</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>            <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断是中断了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这里是执行内部类的tryAcquireShared方法提供了具体实现，</span>            <span class="token comment" spellcheck="true">//就是获取同步状态的值，如果获取失败就会返回-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//获取同步状态失败 执行如下方法，这个方法以自旋的方式一直获取同步状态</span>            <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">final</span> Node node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                        failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="countDown执行计数器减法操作"><a href="#countDown执行计数器减法操作" class="headerlink" title="countDown执行计数器减法操作"></a>countDown执行计数器减法操作</h3><blockquote><p>countDownf方法每执行一次，计数器就减1，如果计数到达零，则释放所有等待的线程</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过内部类sync执行AQS中的共享式释放同步状态</span>        sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//AQS中的方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//tryReleaseShared方法是syncs实现了重写，如果返回true则说明释放同步状态失败</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//失败AQS  doReleaseShared方法， </span>            <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>doReleaseShared方法会依自旋的方式不断尝试释放同步状态</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ws <span class="token operator">=</span> h<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                              <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Node<span class="token punctuation">.</span>PROPAGATE<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> head<span class="token punctuation">)</span>                                   <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>CountDownLatch是基于AQS实现的一个并发工具类，允许一个线程或多个线程等待其它线程操作，初始化是传入总的计数器，内部都通过<code>new Sync</code>一个返回一个对象。当调用countDown()方法 就会吧计数器做递减，当计数器为0时，就会恢复等待的线程继续执行，计数到达零之前，await 方法会一直受阻塞。</li></ul><p><strong>java知识归纳总结</strong><br>github:    <a href="https://a870439570.github.io/interview-docs" target="_blank" rel="noopener">https://a870439570.github.io/interview-docs</a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CountDownLatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解ReentrantReadWriteLock读写锁</title>
      <link href="/2019/03/21/java/bing-fa-bian-cheng-shen-ru-li-jie-reentrantreadwritelock/"/>
      <url>/2019/03/21/java/bing-fa-bian-cheng-shen-ru-li-jie-reentrantreadwritelock/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><code>ReentrantReadWriteLock</code>内部维护了一对锁，读锁和写锁。支持重入和公以及平非公平模式。读锁是共享式的，多个线程可以并发的读取。写锁是独占式的，在写线程访问时，所有的读线程和其他写线程均被阻塞。通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大提升</li><li>锁降级：遵循获取写锁，获取读锁在释放写锁的次序，写锁可以降级为读锁</li><li>读取锁和写入锁都支持锁获取期间的中断</li><li><code>ReentrantLock</code> 中的同步状态state表示一个锁被获取的次数，而读写锁也是基于<code>AQS</code>队列同步器实现的，内部也有一个帮助类Sync继承<code>AQS</code>，读写锁的自定义同步器需要在同步状态上state维护多个读线程和一个写线程的状态，将变量切分成了两个部分，高16位表示读，低16位表示写 。 </li></ul><h2 id="程序中使用"><a href="#程序中使用" class="headerlink" title="程序中使用"></a>程序中使用</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantReadWriteLockTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> ReentrantReadWriteLock rwl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> Lock r <span class="token operator">=</span> rwl<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> Lock w <span class="token operator">=</span> rwl<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取一个key对应的value</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置key对应的value，并返回旧的value</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object <span class="token function">put</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在读操作<code>get(String key)</code>方法中，需要获取读锁，这使得并发访问该方法时不会被阻塞。写操作<code>put(String key,Object value)</code>方法，在更新<code>HashMap</code>时必须提前获取写锁，当获取写锁后，其他线程对于读锁和写锁的获取均被阻塞，而只有写锁被释放之后，其他读写操作才能继续 .</li></ul><h2 id="读锁源码分析"><a href="#读锁源码分析" class="headerlink" title="读锁源码分析"></a>读锁源码分析</h2><p>当<code>new  ReentrantReadWriteLock</code>时 执行的如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//默认非同步的</span><span class="token keyword">public</span> <span class="token function">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        readerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriteLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>默认非同步的获取一个读锁的对象</p></blockquote><p><strong>执行 <code>r.lock()</code>获或读锁</strong></p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//调用AQS中的acquireShared方法</span>            sync<span class="token punctuation">.</span><span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//AQS类的</span>   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//tryAcquireShared需要自定义同步组件具体提供实现，</span>       <span class="token comment" spellcheck="true">//所以这里调用的就是读写锁内的tryAcquireShared方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li><code>lock</code>方法会调用AQS中的acquireShared方法。acquireShared方法需要调用tryAcquireShare。</li><li>tryAcquireShared需要自定义同步组件具体提供实现，所以这里调用的就是读写锁内的tryAcquireShared方法</li></ul><blockquote><p>tryAcquireShared的源码</p></blockquote><pre class=" language-java"><code class="language-java"> <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//临时变量 记录当前访问的线程</span>            Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//获同步状态 AQS中的getState</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/**                 exclusiveCount:计算写锁                 getExclusiveOwnerThread：获取当前锁的持有线程             */</span>              <span class="token comment" spellcheck="true">//如果存在写锁，且锁的持有者不是当前线程，直接返回-1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//返回读锁被获取的总数</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * readerShouldBlock():读锁是否需要等待（公平锁原则）         * r &lt; MAX_COUNT：持有线程小于最大数（65535）         * compareAndSetState(c, c + SHARED_UNIT)：设置读取锁状态         */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> MAX_COUNT                 <span class="token operator">&amp;&amp;</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// r=0说明当前读锁处于空闲，还没有线程持有</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//firstReader是第一个获得读锁定的线程。</span>                    firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>                    firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//重入锁，累加持有总数</span>                    firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//这里处理读锁的共享式获取，记录每个线程获取锁的线程ID以及次数</span>                    HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                        cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                        readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>                    rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><ul><li>在读锁获取锁和释放锁的过程中，我们一直都可以看到一个变量rh （HoldCounter ），该变量在读锁中扮演着非常重要的作用。</li><li>我们了解读锁的内在机制其实就是一个共享锁，为了更好理解HoldCounter ，我们暂且认为它不是一个锁的概率，而相当于一个计数器。一次共享锁的操作就相当于在该计数器的操作。获取共享锁，则该计数器 + 1，释放共享锁，该计数器 – 1。只有当线程获取共享锁后才能对共享锁进行释放、重入操作。所以HoldCounter的作用就是当前线程持有共享锁的数量，这个数量必须要与线程绑定在一起，否则操作其他线程锁就会抛出异常。我们先看HoldCounter的定义：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HoldCounter</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> tid <span class="token operator">=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ul><li>HoldCounter 定义非常简单，就是一个计数器count 和线程 id tid 两个变量。</li><li>判断读锁是否需要阻塞，读锁持有线程数小于最大值（65535），且设置锁状态成功，并返回1。如果不满足改条件，执行fullTryAcquireShared()。</li><li>fullTryAcquireShared(Thread current)会根据“是否需要阻塞等待”，“读取锁的共享计数是否超过限制”等等进行处理。如果不需要阻塞等待，并且锁的共享计数没有超过限制，则通过CAS尝试获取锁，并返回1</li></ul><h2 id="读锁的获取与释放"><a href="#读锁的获取与释放" class="headerlink" title="读锁的获取与释放"></a>读锁的获取与释放</h2><ul><li>读锁是一个支持重进入的共享锁，它能够被多个线程同时获取，在没有其他写线程访问（或者写状态为0）时，读锁总会被成功地获取，而所做的也只是（线程安全的）增加读状态。如果当前线程已经获取了读锁，则增加读状态。如果当前线程在获取读锁时，写锁已被其他线程获取，则进入等待状态。获取读锁的实现从Java 5到Java 6变得复杂许多，主要原因是新增了一些功能，例如getReadHoldCount()方法，作用是返回当前线程获取读锁的次数。读状态是所有线程获取读锁次数的总和，而每个线程各自获取读锁的次数只能选择保存在ThreadLocal中，由线程自身维护，这使获取读锁的实现变得复杂 </li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReentrantLock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解ReentrantLock</title>
      <link href="/2019/03/20/java/bing-fa-bian-cheng-shen-ru-li-jie-reentrantlock/"/>
      <url>/2019/03/20/java/bing-fa-bian-cheng-shen-ru-li-jie-reentrantlock/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是ReentrantLock"><a href="#什么是ReentrantLock" class="headerlink" title="什么是ReentrantLock"></a>什么是ReentrantLock</h3><ul><li><p>ReentrantLock是一个可重入的互斥锁锁， 实现Lock接口。具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义。ReentrantLock是显示的获取或释放锁，并且有锁超时，锁中断等功能。</p></li><li><p>内部维户了一个Sync的内部类，继承AQS队列同步器。</p></li><li><p>ReentrantLock 将由最近成功获得锁，并且还没有释放该锁的线程所拥有。当锁没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁并返回。如果当前线程已经拥有该锁，此方法将立即返回。可以使用 isHeldByCurrentThread() 和 getHoldCount() 方法来检查此情况是否发生。</p></li><li><p>默认是非公平锁的实现方式</p></li></ul><h3 id="非公平锁获取和释放流程"><a href="#非公平锁获取和释放流程" class="headerlink" title="非公平锁获取和释放流程"></a>非公平锁获取和释放流程</h3><p> <strong>加锁</strong> </p><ul><li>执行<code>lock</code>方法加锁时调用内部<code>NonfairSync</code>的<code>lock</code>方法，第一次会快速尝试获取锁，执行<code>AQS</code>类的<code>compareAndSetState</code>方法（CAS）更改同步状态成员变量<code>state</code>，如果获取成功 则设置当前线程为锁的持有者。失败则执行<code>AQS</code>类的<code>acquire</code>方法，<code>acquire</code>会调用的<code>AQS</code>中的<code>tryAcquire</code>方法。这个<code>tryAcquire</code>方法需要自定义同步组件提供实现。</li><li><p><code>tryAcquire</code>的具体流程是执行<code>Sync</code>类的<code>nonfairTryAcquire</code>方法：首先记录当前加锁线程，然后调用<code>getState</code>获取同步状态，如果为0时 说明锁处于空闲状态，可以获取，会以<code>CAS</code>方式修改<code>state</code>变量。成功则设置当前线程 返回<code>true</code>。否则执行重入判断，判断当前访问线程和已经持有锁的线程是否是同一个。如果相同，将同步状态值进行增加，并返回true。否则返回加锁失败<code>false</code></p><p><strong>解锁</strong> </p><ul><li>解锁<code>unlock</code>方法会调用内部类<code>Sync</code>的<code>tryRelease</code>方法。<code>tryRelease</code>首先调用<code>getState</code>方法获取同步状态，并进行了减法操作。在判断释放操作是不是当前线程，不是则抛出异常，然后判断同步状态是否等于0，如果是0，说明没有线程持有，锁是空闲的，则将当前锁的持有者设置为<code>null</code>， 方便其它线程获取，并返回<code>true</code>。否则返回false</li></ul></li></ul><h3 id="ReentrantLock常用方法介绍"><a href="#ReentrantLock常用方法介绍" class="headerlink" title="ReentrantLock常用方法介绍"></a>ReentrantLock常用方法介绍</h3><ul><li><code>getHoldCount()</code> 查询当前线程保持此锁的次数。</li><li><code>getOwner()</code>  返回目前拥有此锁的线程</li><li><code>getQueueLength()</code>  返回正等待获取此锁的线程估计数</li><li><code>getWaitingThreads(Condition condition)</code>  返回一个 collection，它包含可能正在等待与此锁相关给定条件的那些线程。</li><li><code>boolean hasQueuedThread(Thread thread)</code>  查询给定线程是否正在等待获取此锁。</li><li><code>boolean hasQueuedThreads()</code>  查询是否有些线程正在等待获取此锁。</li><li><code>boolean hasWaiters(Condition condition)</code>   查询是否有些线程正在等待与此锁有关的给定条件</li><li><code>boolean isHeldByCurrentThread()</code> 查询当前线程是否保持此锁。</li><li><code>void lock()</code>   获取锁。</li><li><code>void lockInterruptibly()</code> 如果当前线程未被中断，则获取锁。</li><li><code>Condition newCondition()</code> 返回用来与此 Lock 实例一起使用的 Condition 实例。</li><li><code>boolean  tryLock()</code>    仅在调用时锁未被另一个线程保持的情况下，才获取该锁。</li><li><code>void unlock()</code> 释放锁</li></ul><blockquote><p>程序中使用 </p></blockquote><pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span>  ReentrantLock lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="ReentrantLock源码分析"><a href="#ReentrantLock源码分析" class="headerlink" title="ReentrantLock源码分析"></a>ReentrantLock源码分析</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7373984872572414699L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**内部维护的一个帮助类，继承成AQS  锁的获取和释放主要靠它**/</span>    <span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>5179523762034025860L<span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 执行非公平的t加锁         */</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//记录当前加锁线程</span>            <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取同步状态 AQS中的volatile修饰的int类型成员变量 state  </span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//为0时 说明锁处于空闲状态，可以获取</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// CAS方式修改state。成功则设置当前线程 返回true</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//线程重入判断，判断当前访问线程和已经持有锁的线程是否是同一个</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将同步状态值进行增加</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置同步状态，重入锁的话就累加，并返回true</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//释放锁，就是把AQS中的同步状态变量就行类减直到0 就是出于空闲状态了</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果释放操作不是当前线程 则抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//同步状态等于0，说明没有线程持有，锁是空闲的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//当前锁的持有者 设置为null 方便其它线程获取</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//如果该锁被获取了n次，那么前(n-1)次tryRelease(int releases)方法必须返回false</span>            <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> free<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ConditionObject <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回目前拥有此锁的线程，如果此锁不被任何线程拥有，则返回 null。</span>        <span class="token keyword">final</span> Thread <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//查询当前线程保持此锁的次数。</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询锁是否被持有</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream s<span class="token punctuation">)</span>            <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// reset to unlocked state</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//非公平的  Sync的子类</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7316153563782823691L<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第一次快速获取锁，使用CAS 方式 成功设置当前线程为锁的持有者</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token comment" spellcheck="true">//锁获取失败时，调用AQS的acquire去获取锁，</span>               <span class="token comment" spellcheck="true">//acquire会调用tryAcquire方法，tryAcquire需要自定义同步组件提供实现,</span>                <span class="token comment" spellcheck="true">//所以这里的调用逻辑是acquire-》tryAcquire（NonfairSync类的）-》Sync的nonfairTryAcquire方法</span>                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用父类nonfairTryAcquire 实现加锁</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//公平的 Sync的子类</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3000897897090466540L<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加锁 调用AQS中的acquire方法，acquire会调用下面的tryAcquire方法</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//加锁的过程，和父类的调用父类nonfairTryAcquire方法大致一样</span>        <span class="token comment" spellcheck="true">//唯一不同的位置为判断条件多了hasQueuedPredecessors()方法</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//公平锁实现的关键点hasQueuedPredecessors</span>                <span class="token comment" spellcheck="true">/**                 即加入了同步队列中当前节点是否有前驱节点的判断                 如果该方法返回true，则表示有线程比当前线程更早地请求获取锁                 因此需要等待前驱线程获取并释放锁之后才能继续获取锁                */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//AQS中的方法 判断当前线程是否位于CLH同步队列中的第一个。如果是则返回true，否则返回false。</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Read fields in reverse initialization order</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node s<span class="token punctuation">;</span>        <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//默认的构造函数  非公平锁</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//为true 公平锁</span>    <span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReentrantLock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入理解AQS(队列同步器)</title>
      <link href="/2019/03/19/java/bing-fa-bian-cheng-shi-me-shi-aqs/"/>
      <url>/2019/03/19/java/bing-fa-bian-cheng-shi-me-shi-aqs/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h2><ul><li>AbstractQueuedSynchronizer是一个队列同步器，是用来构建锁和其它同步组件的基础框架，它使用一个volatile修饰的int成员变量表示同步状态，通过内置的FIFO队列来完成资源获取线程排队的工作</li><li>通过改变int成员变量state来表示锁是否获取成功，当state&gt;0表示锁获取成功，当state=0时说明锁释放成功。提供了三个方法（<code>getState()</code>、<code>setState(int newState)</code>、<code>compareAndSetState(int expect,int update)</code>）来对同步状态state进行操作，AQS确保对state操作时线程安全的。</li><li>主要使用方式是继承，子类通过继承同步器并实现它的抽像方法来管理同步状态。</li><li>提供独占式和共享式两种方式来操作同步状态的获取与释放</li><li>ReentrantLock、ReentrantReadWriteLock、Semaphore等就并发工具就是基于护一个内部帮助器类集成AQS来实现的的</li></ul><h2 id="AQS提供的方法-列出主要几个"><a href="#AQS提供的方法-列出主要几个" class="headerlink" title="AQS提供的方法(列出主要几个)"></a>AQS提供的方法(列出主要几个)</h2><ul><li><code>acquire(int arg)</code>   以独占模式获取对象，忽略中断。</li><li><code>acquireInterruptibly(int arg)</code> 以独占模式获取对象，如果被中断则中止。</li><li><code>acquire(int arg)</code>   以独占模式获取对象，忽略中断。</li><li><code>acquireShared(int arg)</code> 以共享模式获取对象，忽略中断。</li><li><code>acquireSharedInterruptibly(int arg)</code> 以共享模式获取对象，如果被中断则中止。</li><li><code>compareAndSetState(int expect, int update)</code> 如果当前状态值等于预期值，则以原子方式将同步状态设置为给定的更新值。</li><li><code>getState()</code> 返回同步状态的当前值。</li><li><code>release(int arg)</code>   以独占模式释放对象。</li><li><code>releaseShared(int arg)</code>    以共享模式释放对象。</li><li><code>setState(int newState)</code>  设置同步状态的值。</li><li><code>tryAcquire(int arg)</code> 试图在独占模式下获取对象状态。</li><li><code>tryAcquireNanos(int arg, long nanosTimeout)</code>   试图以独占模式获取对象，如果被中断则中止，如果到了给定超时时间，则会失败。</li><li><code>tryAcquireShared(int arg)</code>  试图在共享模式下获取对象状态。</li><li><code>tryAcquireSharedNanos(int arg, long nanosTimeout)</code> 试图以共享模式获取对象，如果被中断则中止，如果到了给定超时时间，则会失败。</li><li><code>tryReleaseShared(int arg)</code>  试图设置状态来反映共享模式下的一个释放。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g30xqlk9j30tk0dogs7.jpg" alt="同步器可重写的方法"></p><h2 id="队列同步器的实现分析"><a href="#队列同步器的实现分析" class="headerlink" title="队列同步器的实现分析"></a>队列同步器的实现分析</h2><ul><li>同步器依赖内部的同步队列（一个FIFO双向队列）来完成同步状态的管理，当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点（Node）并将其加入同步队列，同时会阻塞当前线程，当同步状态释放时，会把首节点中的线程唤醒，使其再次尝试获取同步状态。</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** 表示节点正在共享模式中等待 */</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Node SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** 表示节点正在独占模式下等待 */</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** 表示取消状态，同步队列中等待的线程等待超时或中断，需要从同步队列中取消等待，节点进入该值不会发生变化 */</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** 后续节点的线程处于等待状态，而当前节点的线程如果释放了同步状态或者取消，将会通知后续节点运行*/</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** 节点在等待中，节点线程等待在Conditions上。当其他线程对Condition调用了signal()后，该节点将会从等待队列中转移到同步队列中，加入到同步状态的获取中 */</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 表示下一次共享式同步状态获取将会无条件传播下去         */</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/**前驱节点**/</span>        <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**后继节点**/</span>        <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>        Node nextWaiter<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> Node <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NullPointerException <span class="token punctuation">{</span>            Node p <span class="token operator">=</span> prev<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Used to establish initial head or SHARED marker</span>        <span class="token punctuation">}</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// Used by addWaiter</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> mode<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Used by Condition</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> waitStatus<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>节点是构成同步队列的基础，同步器拥有首节点（head）和尾节点（tail），没有成功获取同步状态的线程将会成为节点加入该队列的尾部，同步队列的</p><h2 id="同步器的acquire方法（获取）"><a href="#同步器的acquire方法（获取）" class="headerlink" title="同步器的acquire方法（获取）"></a>同步器的acquire方法（获取）</h2><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>调用自定义同步器实现的tryAcquire(int arg)方法，该方法保证线程安全的获取同步状态，如果同步状态获取失败，则构造同步节点并通过addWaiter(Node node)方法将该节点加入到同步队列的尾部，最后调用acquireQueued(Node node,int arg)方法，使得该<br>节点以”死循环”(自旋)的方式获取同步状态。</li></ul><h2 id="独占式的获取与释放总结"><a href="#独占式的获取与释放总结" class="headerlink" title="独占式的获取与释放总结"></a>独占式的获取与释放总结</h2><ul><li>在获取同步状态时，同步器维护一个同步队列，获取状态失败的线程都会被加入到队列中并在队列中进行自旋；移出队列（或停止自旋）的条件是前驱节点为头节点且成功获取了同步状态。在释放同步状态时，同步器调用tryRelease(int arg)方法释放同步状态，然后唤醒头节点的后继节点</li></ul><h2 id="同步器的release方法（释放）"><a href="#同步器的release方法（释放）" class="headerlink" title="同步器的release方法（释放）"></a>同步器的release方法（释放）</h2><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>该方法执行时，会唤醒头节点的后继节点线程，unparkSuccessor(Node node)方法使用LockSupport来唤醒处于等待状态的线程。</li></ul><h2 id="基于AQS实现一个简单的可重入的独占式锁的获取与释放"><a href="#基于AQS实现一个简单的可重入的独占式锁的获取与释放" class="headerlink" title="基于AQS实现一个简单的可重入的独占式锁的获取与释放"></a>基于AQS实现一个简单的可重入的独占式锁的获取与释放</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>juc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>AbstractQueuedSynchronizer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  基于AQS实现一个简单的锁 * * @author qinxuewu * @create 19/3/18下午11:44 * @since 1.0.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAQSLock</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">final</span>  MySync sync<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MySync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构建一个内部帮助器 集成AQS     */</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">MySync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//状态为0时获取锁，</span>        <span class="token comment" spellcheck="true">/***         * 一个线程进来时，如果状态为0，就更改state变量，返回true表示拿到锁         *         * 当state大于0说明当前锁已经被持有，直接返回false,如果重复进来，就累加state,返回true         * @param arg         * @return         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取同步状态状态的成员变量的值</span>            <span class="token keyword">int</span> state<span class="token operator">=</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread cru<span class="token operator">=</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//CAS方式更新state，保证原子性，期望值，更新的值</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//设置成功</span>                    <span class="token comment" spellcheck="true">//设置当前线程</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span>  <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果还是当前线程进来，累加state,返回true  可重入</span>                    <span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span>  <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 释放同步状态         * @param arg         * @return         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断释放操作是否是当前线程，</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//获取同步状态成员变量，如果大于0 才释放</span>                    <span class="token keyword">int</span> state<span class="token operator">=</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//当前线程置为null</span>                        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">setState</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不是当线程抛出异常</span>                <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> flag<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 加锁     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放锁     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAQSLockTest</span> <span class="token punctuation">{</span>    MyAQSLock lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyAQSLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        MyAQSLockTest test<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyAQSLockTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//         Thread thread = new Thread(new Runnable() {</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">//            public void run() {</span><span class="token comment" spellcheck="true">//                while (true) {</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//                    System.out.println(Thread.currentThread().getName() + "-" + test.next());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        });</span><span class="token comment" spellcheck="true">//        thread.start();</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        Thread thread2 = new Thread(new Runnable() {</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">//            public void run() {</span><span class="token comment" spellcheck="true">//                while (true) {</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//                    System.out.println(Thread.currentThread().getName() + "-" + test.next());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//                }</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        });</span><span class="token comment" spellcheck="true">//        thread2.start();</span>        <span class="token comment" spellcheck="true">//可重复锁演示</span>        Thread thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PMP备考】关进术语和计算公式</title>
      <link href="/2019/03/15/sui-bi/pmp-guan-jian-zhu-yu-he-ji-suan-gong-shi/"/>
      <url>/2019/03/15/sui-bi/pmp-guan-jian-zhu-yu-he-ji-suan-gong-shi/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="关键术语"><a href="#关键术语" class="headerlink" title="关键术语"></a>关键术语</h2><ul><li>EVM： 挣值管理</li><li>ES：挣得进度。ES 是 EVM 理论和实践的延伸。如果挣得进度大于 0,则 表示项目进度提前了</li><li>AT：实际时间</li><li>SPI：进度绩效指数</li><li>EAC：项目完工预算</li><li>CA：控制账户</li><li>EVA：挣值分析</li><li>PV： 计划价值.在即定时间点前计划完成活动或WBS组件工作的预算成本</li><li>PMB：绩效测量基准。PV 的总和有时被称为绩效测量基准(PMB)</li><li>AC：实际成本</li><li>CV：成本偏差</li><li>EV：挣值。在即定时间段内实际完工工作的预算成本</li><li>SV：进度偏差。SV小于0说明进度落后</li><li>VAC：完工偏差</li><li>CPM：关键路劲法</li><li>BAC：完工预算</li><li>CPI：成本绩效指数</li><li>CPIF 成本加激励费用</li><li>CPM 关键路径法</li><li>ETC：完工尚需估算</li><li>TCPI：完工尚需绩效指数</li><li>SWOT ：优势、劣势、机会与威胁</li><li>WBS ：工作分解结构</li><li>SS ：开始到开始，SF ：开始到完成，FF 完成到完成</li><li>QFD 质量功能展开</li><li>RACI 执行、负责、咨询和知情。 RAM 责任分配矩阵。RBS 风险分解结构</li><li>RFI 信息邀请书。RFP 建议邀请书。RFQ 报价邀请书</li><li>FFP 固定总价。FPEPA 总价加经济价格调整。FPIF 总价加激励费用</li><li>EF 最早完成日期。ES 最早开始日期。LF 最晚完成日期</li></ul></li></ul><h2 id="挣值分析-偏差分析-趋势分析"><a href="#挣值分析-偏差分析-趋势分析" class="headerlink" title="挣值分析,偏差分析,趋势分析"></a>挣值分析,偏差分析,趋势分析</h2><ul><li>PV,EV,AC 属于挣值分析</li><li>SPI,CPI,SV,CV  属于偏差分析</li><li>ETC,EAC属于趋势分析。</li></ul><h2 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h2><h4 id="计算标准差"><a href="#计算标准差" class="headerlink" title="计算标准差"></a>计算标准差</h4><p>  (最好-最不好)/6</p><h3 id="计算进度偏差"><a href="#计算进度偏差" class="headerlink" title="计算进度偏差"></a>计算进度偏差</h3><p>  ES(挣得进度) - AT(实际时间)</p><h3 id="计算预期成本"><a href="#计算预期成本" class="headerlink" title="计算预期成本"></a>计算预期成本</h3><ul><li>三角分布: （最乐观成本+最可能成本+最悲观成本)/3</li><li><p>贝塔分布: （最乐观成本+4倍的最可能成本+最悲观成本)/6</p><h3 id="成本偏差"><a href="#成本偏差" class="headerlink" title="成本偏差"></a>成本偏差</h3><p>CV = EV(挣值) – AC(实际成本)</p><h3 id="进度偏差"><a href="#进度偏差" class="headerlink" title="进度偏差"></a>进度偏差</h3><p>SV = EV(挣值) – PV(计划价值)</p><h3 id="完工偏差"><a href="#完工偏差" class="headerlink" title="完工偏差"></a>完工偏差</h3><p>VAC = BAC (完工预算)– EAC(项目完工预算)</p><h3 id="成本绩效指数"><a href="#成本绩效指数" class="headerlink" title="成本绩效指数"></a>成本绩效指数</h3><p>CPI = EV(挣值) / AC(实际成本)</p><h3 id="项目完工预算"><a href="#项目完工预算" class="headerlink" title="项目完工预算"></a>项目完工预算</h3><p><strong>如果预期项目剩余部分的CPI不变则使用此方式</strong></p></li><li><p>EAC = BAC/CPI</p><p><strong>如果未来工作将按计划进度完成，则使用</strong></p></li><li><p>EAC=AC+(BAC-EV)</p><p><strong>如果最初计划不再有效</strong></p></li><li><p>EAC = AC + 自下而上的 ETC</p><p><strong>如果CPI和SPI都会影响剩余工作则使用</strong></p></li><li>EAC=AC+[(BAC-EV)/(CPI * SPI)]</li></ul><h3 id="完工尚需绩效指数"><a href="#完工尚需绩效指数" class="headerlink" title="完工尚需绩效指数"></a>完工尚需绩效指数</h3><p>  <strong>为完成计划必须保持的效率</strong></p><ul><li>TCPI =(BAC – EV)/(BAC – AC)</li><li>大于1.0=难以完成</li><li>等于1.0=正好完成</li><li><p>小于1.0=轻易完成</p><p><strong>为完成当前完工预算必须保持的效率</strong></p></li><li>TCPI =(BAC – EV)/(EAC – AC)</li><li>大于1.0=难以完成</li><li>等于1.0=正好完成</li><li><p>小于1.0=轻易完成</p><h3 id="完工尚需估算"><a href="#完工尚需估算" class="headerlink" title="完工尚需估算"></a>完工尚需估算</h3><p>ETC=EAC-AC</p><h3 id="项目进度"><a href="#项目进度" class="headerlink" title="项目进度"></a>项目进度</h3><p>EV/BAC</p><h3 id="进度绩效指数SPI"><a href="#进度绩效指数SPI" class="headerlink" title="进度绩效指数SPI"></a>进度绩效指数SPI</h3><p>EV/PV</p><h3 id="沟通渠道的数量"><a href="#沟通渠道的数量" class="headerlink" title="沟通渠道的数量"></a>沟通渠道的数量</h3><p>沟通渠道数量=n(n-1）/2</p></li></ul><ul><li>n代表干系人数量</li></ul><h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><ul><li>X理论，人性本懒，需要制度约束</li><li>Y理论，人性本勤，自主工作</li><li>沟通出现问题，先记录，再更新沟通管理计划</li><li>第一次犯错用非正式沟通，屡教不改，用正式书面沟通</li><li>需要长期保存记录的关键决策，应该选择正式书面沟通</li><li>德尔菲法要求大家达成一致</li><li>项目风险的四个要素：事件，概率，影响，原因</li><li>未知风险发生时对风险进行处理即权变措施</li><li>龙卷风图是敏感性风险，定量分析的工具 </li><li>整体风险是指项目目的的不确定性对项目造成的影响，整体风险决定项目成败</li><li>单个风险一旦发生会对目标产生影响。单个风险在定性过程分析</li><li>风险规避是指项目团队采取行动来消除威胁，或保护项目免受威胁的影响</li><li>采购工作说明书</li><li>对于问题的处理应该按流程：发现问题，定义问题，解决问题，评价解决方案。</li><li>关键相关方是做出决策的个，组织和机构</li><li>相关分类的有效方法：权利，作用，影响，利益</li><li>当需要从多个维度进行相关方分类时，选择相关方立方体可以通过三维的方式对相关方进行分类。</li><li>实施定性风险分析是通过评估单个项目风险发生的概率和影响以及其他特征，对风险进行优先排序，从而为后续分析或行动提供基础的过程</li><li>实施定量风险分析是就已识别的单个项目风险和不确定性的其他来源对整体项目目标的影响进行定量分析的过程</li></ul><h2 id="PMP考试中26个固定套路"><a href="#PMP考试中26个固定套路" class="headerlink" title="PMP考试中26个固定套路"></a>PMP考试中26个固定套路</h2><ul><li>变更批准之后：变更批准要做三件事：1、在变更日志中记录；2、通知相关关系人；3、更新项目管理计划；</li><li>风险情景题：先判断风险识别了，还是风险发生了。若是风险识别，按风险管理程序走；若是风险发生，则应采取应急措施或权变措施，注意提交变更请求。</li><li>进度情景题：先判断时间不够，还是资源不够。时间不够，有三个选型可以选，但一般都是进度压缩；资源不够，有两个选型可以选，关键链法和资源平衡。</li><li>沟通问题：沟通问题是PMP考试中很常见的情景题，有3个正确答案可以选，1.沟通管理计划；2.沟通规则；3、沟通需求分析。（题目中只会出现一个正确答案，不存在先后问题）</li><li>干系人问题：干系人问题也是PMP中很常见的情景题，有4个正确答案可以选，1.关系人管理计划；2.管理干系人参与；3.让干系人今早参与；4.识别干系人。</li><li>与供应商有争议1.谈判2.ARD3.诉讼（有顺序，按1,2,3选）</li><li>前一个项目（阶段），下一个项目（阶段）。这类题目重点是前一个项目（阶段），不要考虑后一个项目（阶段）。</li><li>计算EAC、ETC，这类题的套路是：1、先写出三个变量2、再写出两个或一个公式。</li><li>冲突管理策略问题：1.先判断题干中描述的情况是正面还是负面的意思，或者题目提问是希望正面还是负面解决。2.如果是正面，答案选：合作/解决问题。题目没有暗示任何正面负面的含义，只问如何解决，按正面选。</li><li>题目中可行性问题即遇到巨大障碍（技术、风险、资源等方面），答案中找“替代方案”或“解决方案”。</li><li>题目中出现具体问题，不改变程序性计划1.如风险、进度、质量、成本、采购等具体问题，不改变程序性计划。因此，选项中出现：更新范围管理计划、更新进度管理计划、更新成本管理计划、更新质量管理计划、更新风险管理计划、更新采购管理计划，不要选。2.另外强调，程序型计划中不包括具体问题的应对策略，主要出现在风险问题上，若某具体风险发生，不能从风险管理计划中该风险的应对策略，具体应对策略在风险登记册中。</li><li>题目中文“下一步做什么，应参考什么文件？”1.例如，实施风险应对措施后，项目经理进行下一步工作，应该参考什么文件？–风险管理计划。2.变更请求提出后，项目经理要推进工作，应参考什么计划？–变更管理计划。3.项目经理决定外包，要进行下一步工作，应参考什么计划？–采购管理计划。以此类推。</li><li>需求、范围变更问题。1、需求、范围变更问题，如发现遗漏、发现错误、不符合客户要求、不符合计划要求、客户提出新要求等，都是范围变更问题，答案中找符合变更的4个答案之一。2.指导范围变更的计划有排序：首先是项目管理计划，其次是范围管理计划，再其次是变更管理计划。题目中出现范围、需求变更，如果问应该参考什么计划，按上述顺序选择。</li><li>质量情景题。1.首先区分是质量的哪一个过程，然后再判断答。2.看到质量标准，选质量规划，考质量规则在PMP考试中出现的很少。3.看到可交付成果，选质量控制。4.看到过程、方针、程序等，选质量保证（管理质量）。PMP考试中，考质量保证更多出现关键词是“确保”。</li><li>选输入还是选工具？1.题目问题中说“使用什么来”一般问的是工具，在选择中找工具。2.题目问题中说“要考虑什么”，一般问的是输入，在选项中找输入。</li><li>尽量选最熟悉的选项1.我们最熟悉的选项，大多是PMBOK里出现的专业术语，正确的可能性最高。2.不专业、随意的说法，大多是打酱油的选项。3.题目会变来变去，但考点就那么多，正确的选项，大都是我们在做模拟题时经常选的。4.熟悉本套路的前提是做够1000道题目，熟悉PMBOK术语注意，上述规律是一般情况，考试中需要结合题目具体描述灵活使用。</li><li>选大的，还是选小的？看题目中问题，问的是大的，就选大的；问的是小的，就选小的。如：1、项目进度延误，项目经理应该怎么办？项目中有进度压缩和赶工，选进度压缩。2、如果题目说，项目进度延误，项目经理增加资源恢复进度，属于？答案中有进度压缩和赶工，要选赶工。</li><li>具体问题，不要麻烦发起人。1、项目出现问题，答案中出现“汇报发起人”2、具体问题（尤其是质量、风险、进度、冲突、资源问题），不要麻烦发起人。3、没有解决方案时，不要汇报发起人。</li><li>冲突问题1、冲突发生，题目问如何预防，选1、规则2、团队建设。2、冲突发生，题目问如何应对，选冲突解决策略。</li><li>按题目问题选择答案1、注意问题问是工具、过程、还是文件；2、问过程的，注意问的是哪一个过程，是启动还是规划、执行、监控，是质量保证还是质量控制，是识别干系人还是规划干系人管理。3、所选题目的答案，不能与问的矛盾。</li><li>PMP考试中与项目章程相关的题目：当题干中出现或强调“一个新项目”、“新任项目经理”或“高层级需求”、“项目经理权利、责任”或“高层级风险”等。</li><li>PMP考试中与治理保证相关的关键词：“确保”、“是否符合程序”、“过程问题”、“审计或检查过程”、“（非）增值活动”、“大量缺陷”、“干系人担心”等。</li><li>强调统计方法的4个工具1、问卷调查2、参数估算3、实验设计4、敏感性分析。</li><li>质量题目中永远不选“专家判断”。</li><li>排序相关的正确答案：1、风险定性分析2、帕累托3、名义组技术4、优先矩阵</li><li>干系人意见不一致或冲突时，正确答案1、引导式研讨会2、让相关干系人开会，统一意见。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> PMP备考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP备考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(七)查找算法</title>
      <link href="/2019/02/21/shu-ju-jie-gou-yu-suan-fa/cha-zhao-suan-fa/"/>
      <url>/2019/02/21/shu-ju-jie-gou-yu-suan-fa/cha-zhao-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="顺序表查找"><a href="#顺序表查找" class="headerlink" title="顺序表查找"></a>顺序表查找</h2><ul><li>顺序查找又叫线性查找，是最基本的查找技术。</li><li>它的查找过程是:从表中第一个(或最后一个)记录开始，逐个进行记亲的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录;如果直到最后一个(或第一个)记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功 。</li></ul><h2 id="有序表查找"><a href="#有序表查找" class="headerlink" title="有序表查找"></a>有序表查找</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><ul><li>在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功;</li><li>若给定值小于中间记录的关键字，则在中间记录的左边部分继续查找；</li><li>若给定值大于中间记录的关键字，则在中间记录的右边部分继续查找。不断重复以上过程。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> number <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"递归查找出的下标："</span><span class="token operator">+</span><span class="token function">binSearch</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>number<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查找出的下标："</span><span class="token operator">+</span><span class="token function">halfSort</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">halfSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">=</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 二分查找递归实现   </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> start<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>srcArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> mid<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> srcArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token function">binSearch</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> srcArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token function">binSearch</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> </code></pre><h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><ul><li>插值查找是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法。</li><li>计算公式：<code>int mid=left+(right-left)*(key-data[left])/(data[right]-data[left]);</code></li><li>从时间复杂度来 看，它也是O(logn),，但对表长比较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好得多</li><li>反之，数组中如果分布类似币，1，2，2000，2001…..999998, 999999}这种极端不均匀的数据，用插值查找未必是很合适的选择</li></ul><p>上述二分法查找计算中间值部分更换为计算公式即可实现插值查找</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">halfSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> right<span class="token operator">=</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>key<span class="token operator">-</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">-</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插值</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            right <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>           left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="线性索引查找"><a href="#线性索引查找" class="headerlink" title="线性索引查找"></a>线性索引查找</h2><ul><li>索引就是把一个关键字与宫对应的记录相关联的过程 , 一个索引由若干个索引项构成,每个索引项至少应包含关键字和其对应的记录在存储器中的位置等信息</li><li>所谓线性索引就是将索引项集合组织为线性结构,也称为索引表。</li></ul><h3 id="稠密索引"><a href="#稠密索引" class="headerlink" title="稠密索引"></a>稠密索引</h3><ul><li>稠密索引是指在线性索引中,将数据集中的每个记录对应一个索引项</li><li>对于稠密索引这个索引表来说,索引项一定是按照关键码有序的排列。索引项有序也就意味着,我们要查找关键字时,可以用到折半、插值、斐被那契 等有序查找算法,大大提高了效率 ,</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g25zpjljj30ds09dmzw.jpg" alt></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分块存储数量</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student other <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>no <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里比较的是什么 sort方法实现的就是按照此比较的东西从小到大排列</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>no <span class="token operator">></span> other<span class="token punctuation">.</span>no<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"2222"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"3333"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"44444"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"5555"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"7777"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"7777"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"8888"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> key<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">denseIndex</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建稠密索引表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Student <span class="token function">denseIndex</span><span class="token punctuation">(</span>Student<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//排序 对于稠密索引这个索引表来说,索引项一定是按照关键码有序的排列</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>            Index<span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index</span><span class="token punctuation">[</span>array<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//建立索引</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Index index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token punctuation">.</span>key <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>no<span class="token punctuation">;</span>                index<span class="token punctuation">.</span>value <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//根据索引关键码搜索</span>            <span class="token keyword">int</span> code <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> list<span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>Index<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>            low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            high <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//折半</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>                    high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>                    low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="分块索引"><a href="#分块索引" class="headerlink" title="分块索引"></a>分块索引</h3><ul><li><p>稠密索引因为索引项与数据集的记录个数相同,所以空间代价很大。为了减少索引项的个数,我们可以对数据集进行分块,使其分块有序,然后再对每一块建立一个索引项,从而减少索引项的个数。</p><p><strong>分块有序,是把数据集的记录分成了若干块,并且这些块需要满足两个条件:</strong> </p></li><li>块内无序,即每一块内的记录不要求有序。</li><li>块间有序,例如,要求第二块所有记录的关键字均要大于第一块中所有记录的关键字,第三块的所有记录的关键字均要大于第二块的所有 记录关键字……因为只有块间有序,才有可能在查找时带来放率。</li></ul><p>对于分块有序的数据集,将每块对应一个索引项,这种索引方法叫做分块索引。我们定义的分块索引的索引项结构分三个数据项 </p><ul><li>最大关键码,它存储每一块中的最大关键字,这样的好处就是可以使得在它之后的下一块中的最小关键字也能比这一块最大的关键字要大 i</li><li>存储了块中的记录个数,以便于循环时使用;</li><li>用于指向块首数据元素的指针,便于开始对这一块中记景进行遍历。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g27306wvj30fo0fnjux.jpg" alt="分块索引"></p><p>在分块索引表中查找,就是分两步进行:</p><ul><li>在分块索引表中查找要查关键字所在的块。由于分块索引表是块间有序的, 因此很容易利用折半、插值等算法得到结果。例如,在图 8-5-4的数据集中 查找62,我们可以很快可以从左上角的索引表中由 57&lt;62&lt;96 得到 62 在第三 个块中。</li><li>根据块首指针找到相应的块,并在块中顺序查找关键码。因为块中可以是无序的,因此只能顺序查找。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockIndex</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> index<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//索引表</span>    <span class="token keyword">public</span> ArrayList<span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//块内元素 可以无序</span>    <span class="token comment" spellcheck="true">//初始化分块索引表</span>    <span class="token keyword">public</span> <span class="token function">BlockIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">=</span>index<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span>index<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 分配元素到各自的块内</span>                list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分配块内元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">&lt;</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印每块元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ArrayList l <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ArrayList"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二分查找     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">binarysearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> index<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">binarysearch</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先二分查找确定在哪个块</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 然后顺序查找在该块内哪个位置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"查找元素为  %d 第: %d块  第%d个 元素"</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分为三个块 </span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        BlockIndex blocksearch<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BlockIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            blocksearch<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        blocksearch<span class="token punctuation">.</span><span class="token function">printAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blocksearch<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><ul><li>现在有两篇极短的英文”文章”一一其实只能算是句子,我们暂认为是文章,编号分别是 1 和 2。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g27mzeayj30is02bmy6.jpg" alt></p><ul><li>假设我们忽略掉如 <code>books</code>,<code>friends</code> 中的复数 <code>s</code> 以及如 <code>A</code> 这样的大小写差异。我们可以整理出这样一张单词表,如表 8-5-1 所示,并将单词做了排序 , 也就是表格显示了每个不同的单词分别出现在哪篇文章中,比如 <code>good</code> 它在两篇文章中都有出现,而<code>is</code>只是在文章 2 中才有,</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g281xltsj30bv07ggn0.jpg" alt></p><ul><li><p>有了这样一张单词衰,我们要搜索文章,就非常方便了.如果在搜索框中搜索<code>book</code>关键字。系统就先在这张单词表中有序查找 “book”,找到后将它对应的文章编号 1 和 2的文章地址(通常在搜索引擎中就是网页的标题和链接)返回,并告诉你,查找到两条记录,用时 0.0001 秒。由于单词表是有序的,查找效率很高,返回的又只是文章的编号,所以整体速度都非常快 。</p><p><strong>在这里这张单词表就是索引表, 索引项的通用结构是:</strong> </p></li><li>次关键码.例如上面的”英文单词”。</li><li>记录号衰,例如上面的”文章编号” 。</li></ul><p>其中记录号表存储具有相同次关键字的所有记录的记录号。这样的索引方法就是倒排索引</p><p> <strong>优点：</strong> </p><ul><li><p>倒排索引的优点显然就是查找记录非常快,基本等于生成索引表后,查找时都不 用去读取记录,就可以得到结果。</p><p><strong>缺点：</strong> </p></li><li>它的缺点是这个记录号不定长。维护比较困难，插入和删除操作都要做相应的处理。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>chazhao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 倒排索引  * 倒排索引的优点显然就是查找记录非常快,基本等于生成索引表后,查找时都不 用去读取记录,就可以得到结果  *   * 它的缺点是这个记录号不定长。维护比较困难，插入和删除操作都要做相应的处理  *   * 1.txt：i live in hangzhou where are you    2.txt：i love you i love you    3.txt：i love you today is a good day  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntertedIndex</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 存储单词对应 多个文件列表</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">>></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//文路径列表</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//词频统计</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> nums<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">CreateIndex</span><span class="token punctuation">(</span>String filepath<span class="token punctuation">)</span><span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader reader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s<span class="token operator">=</span>null<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取单词</span>                words<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//集合汇总不不存在当前单词</span>                    list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//单词对应的 文件列表</span>                    nums<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//单词出现的次数 首次默认1</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    list<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//如果没有包含过此文件名，则把文件名放入</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//文件总词频数目</span>                    <span class="token keyword">int</span> count<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IntertedIndex index<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IntertedIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String path<span class="token operator">=</span><span class="token string">"C:\\Users\\admin\\Desktop\\"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">".txt"</span><span class="token punctuation">;</span>            index<span class="token punctuation">.</span><span class="token function">CreateIndex</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> num <span class="token operator">:</span> index<span class="token punctuation">.</span>nums<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单词:"</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"           "</span>                    <span class="token operator">+</span> <span class="token string">"出现次数："</span><span class="token operator">+</span>num<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>index<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><p> <strong>二叉排序树 又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树。</strong> </p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值</li><li>若它的右子树不空 ，则右子树上所有结点的值均大于宫的根结点的值</li><li>它的左、右子树也分别为二叉排序树</li><li>它的结点间满足一定的次序关系，左子树结点一定比其双亲结点小，右子树结点一定比其双亲结点大。</li><li>构造一棵二叉排序树的目的，其实并不是为了排序，而是为了提高查找和插入删除关键字的速度</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g28s8dezj30cw07ywf2.jpg" alt></p><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><p>（1）首先将20与根节点进行比较，发现比根节点小，所以继续与根节点的左子树30比较。</p><p>（2）发现20比30也要小，所以继续与30的左子树10进行比较。</p><p>（3）发现20比10要大，所以就将20插入到10的右子树中。</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g29924b3j309e080q3n.jpg" alt></p><h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><p>比如我们要查找节点10，那么思路如下：</p><p>（1）还是一样，首先将10与根节点50进行比较，发现比根节点要小，所以继续与根节点的左子树30进行比较。</p><p>（2）发现10比左子树30要小，所以继续与30的左子树10进行比较。</p><p>（3）发现两值相等，即查找成功，返回10的位置。</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p> <strong>删除节点的情况相对复杂，主要分为以下三种情形：</strong> </p><p>删除的是叶节点(即没有孩子节点的)。比如20，删除它不会破坏原来树的结构，最简单。如图所示</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g29qrk8hj309e06x74w.jpg" alt></p><p>删除的是单孩子节点。比如90，删除它后需要将它的孩子节点与自己的父节点相连。情形比第一种复杂一些。</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2a6dlk0j30es07aab3.jpg" alt></p><p>删除的是有左右孩子的节点。比如根节点50</p><p>这里有一个问题就是删除它后，谁将作为根节点？利用二叉树的中序遍历，就是右节点的左子树的最左孩子。</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2ao32xnj30dp06y0tp.jpg" alt></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结点值</span>    <span class="token keyword">protected</span> Node leftChild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左孩子结点</span>    <span class="token keyword">protected</span> Node rightChild<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 右孩子结点</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortTree</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 递归实现二叉排序树的插入</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertBST</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>leftChild <span class="token operator">=</span> null<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>rightChild <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//大于根节点则 分配在右子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果右子树为空则直接赋值给右子树</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                root<span class="token punctuation">.</span>rightChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//右子树不为空，则递归判断，以右子树为父节点的</span>                <span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//左子树分配原理同上</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                root<span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归实现二叉排序树查找</span>    <span class="token keyword">public</span> Node <span class="token function">searchBSTByRecursion</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 步骤1</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 步骤2</span>            <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 步骤3</span>            <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果没找到，就返回null</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 非递归实现二叉排序树查找</span>    <span class="token keyword">public</span> Node <span class="token function">searchBST</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node temp <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 二叉排序树的删除</span>    <span class="token keyword">public</span> Node <span class="token function">deleteBST</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node cur <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前结点</span>        Node parent <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 待删结点的父结点</span>        Node delNode <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在后面用来引用待删结点</span>        Node temp <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作为一个局域内的根结点</span>        <span class="token comment" spellcheck="true">// 查找待删结点p和待删结点的父结点f</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> cur<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> cur<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当前结点为null，即没有找到待删结点。 此时cur指向待删结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 待删结点只有右子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>leftChild <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 待删结点的父结点为null，即待删结点为根结点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 根结点为待删结点的右子树</span>                root <span class="token operator">=</span> cur<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>leftChild <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 待删结点为父结点的左子树</span>                <span class="token comment" spellcheck="true">// 把待删结点的右子树作为待删结点父结点的左子树</span>                parent<span class="token punctuation">.</span>leftChild <span class="token operator">=</span> cur<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 待删结点为父结点的右子树</span>                parent<span class="token punctuation">.</span>rightChild <span class="token operator">=</span> cur<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 待删结点有左子树，要找左子树的最右下角的结点</span>            temp <span class="token operator">=</span> cur<span class="token punctuation">;</span>            delNode <span class="token operator">=</span> cur<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时s指向待删结点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>delNode<span class="token punctuation">.</span>rightChild <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 查找待删结点的最右下角结点</span>                temp <span class="token operator">=</span> delNode<span class="token punctuation">;</span>                delNode <span class="token operator">=</span> delNode<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 即，待删结点没有右子树，把左子树向上移动</span>                temp<span class="token punctuation">.</span>leftChild <span class="token operator">=</span> delNode<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 即，待删结点有右子树</span>                temp<span class="token punctuation">.</span>rightChild <span class="token operator">=</span> delNode<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>delNode<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//先序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 先序遍历     * 非递归     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder1</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span><span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 中序遍历     * 非递归     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder1</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightChild<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后序遍历     * 非递归     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">posOrder1</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span><span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>Node<span class="token operator">></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SortTree t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SortTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根节点</span>        t<span class="token punctuation">.</span><span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左子树        </span>        t<span class="token punctuation">.</span><span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//右子树</span>        t<span class="token punctuation">.</span><span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">insertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">posOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        t.deleteBST(root, 44);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        t.preOrder(t.deleteBST(root, 44));</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="平衡二叉树-AVL树"><a href="#平衡二叉树-AVL树" class="headerlink" title="平衡二叉树(AVL树)"></a>平衡二叉树(AVL树)</h2><ul><li>是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1</li><li>它是一种高度平衡的二叉排序树。要么它是一棵空树，要么它的左子树和右子树都是平衡二叉树， 旦左子树和右子树的深度之差的绝对值不超过 1</li><li>我们将二叉树上结点的左子树深度减去右子树深度的值称为平衡因子BF。平衡二叉树上所有结点的平衡因乎只可能是-1 ， 0 和 1.</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2b9io6wj30jn0bhtb0.jpg" alt="平衡二叉树"></p><ul><li>图二 59 比 58 大却是 58 的左子树，这是不符合二叉排序树的定义的</li><li>图 3 不是平衡二叉树的原因就在于，结点 58 的左子树高度为 2 ，而右子树为空，二者差大于了绝对值 1 </li></ul><p>距离插入结点最近的，且平衡困子的绝对值大于 1 的结点为根的子树，我们称为最小不平衡子树</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2bq4vk6j30ad074wff.jpg" alt="最小不平衡子树"></p><ul><li>上图当新插入结点37时，距离它最近的平衡因子绝对值超过1的结点是58 (即它的左子树高度2减去右子树高度的，所以从58 开始以下的子树为最小不平衡子树 。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVLNode</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> left<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左结点</span>    <span class="token keyword">public</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> right<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右结点</span>    <span class="token keyword">public</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前结点的高度</span>    <span class="token keyword">public</span> <span class="token function">AVLNode</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AVLNode</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> left<span class="token punctuation">,</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> right<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AVLNode</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> left<span class="token punctuation">,</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> right<span class="token punctuation">,</span> T data<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">=</span>left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> subtree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subtree <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param p     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> p <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> p<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sb <span class="token operator">=</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 去掉尾部","号</span>            sb <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 先根遍历     *      * @param subtree     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">preOrder</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> subtree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subtree <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 先访问根结点</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 访问左子树</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">preOrder</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 访问右子树</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">preOrder</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sb <span class="token operator">=</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 去掉尾部","号</span>            sb <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 中根遍历     *      * @param subtree     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">inOrder</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> subtree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subtree <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 访问左子树</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">inOrder</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 访问根结点</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 访问右子树</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">inOrder</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sb <span class="token operator">=</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 去掉尾部","号</span>            sb <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后根遍历     *      * @param subtree     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">postOrder</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> subtree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subtree <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 访问左子树</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">postOrder</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 访问右子树</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">postOrder</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 访问根结点</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * @see BinarySearchTree#levelOrder()         * @return         */</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入方法     *      * @param data     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"data can\'t not be null "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">insert</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 说明已没有孩子结点,可以创建新结点插入了.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AVLNode</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 向左子树寻找插入位置</span>            p<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 插入后计算子树的高度,等于2则需要重新恢复平衡,由于是左边插入,左子树的高度肯定大于等于右子树的高度</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断data是插入点的左孩子还是右孩子</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 进行LL旋转</span>                    p <span class="token operator">=</span> <span class="token function">singleRotateLeft</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 进行左右旋转</span>                    p <span class="token operator">=</span> <span class="token function">doubleRotateWithLeft</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 向右子树寻找插入位置</span>            p<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 进行右左旋转</span>                    p <span class="token operator">=</span> <span class="token function">doubleRotateWithRight</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    p <span class="token operator">=</span> <span class="token function">singleRotateRight</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// if exist do nothing</span>                <span class="token comment" spellcheck="true">// 重新计算各个结点的高度</span>        p<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回根结点</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除方法     *      * @param data     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"data can\'t not be null "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除操作     *      * @param data     * @param p     * @return     */</span>    <span class="token keyword">private</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">remove</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从左子树查找需要删除的元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 检测是否平衡</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> currentNode <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断需要那种旋转</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">height</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// RL</span>                    p <span class="token operator">=</span> <span class="token function">doubleRotateWithRight</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// RR</span>                    p <span class="token operator">=</span> <span class="token function">singleRotateRight</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从右子树查找需要删除的元素</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 检测是否平衡</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> currentNode <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断需要那种旋转</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">height</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// LR</span>                    p <span class="token operator">=</span> <span class="token function">doubleRotateWithLeft</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// LL</span>                    p <span class="token operator">=</span> <span class="token function">singleRotateLeft</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 已找到需要删除的元素,并且要删除的结点拥有两个子节点</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 寻找替换结点</span>            p<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">findMin</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 移除用于替换的结点</span>            p<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>data<span class="token punctuation">,</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 只有一个孩子结点或者只是叶子结点的情况</span>            p <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>left <span class="token operator">:</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 更新高度值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span>            p<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找最小值结点     *      * @param p     * @return     */</span>    <span class="token keyword">private</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findMin</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 结束条件</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果没有左结点,那么t就是最小的</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findMin</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查找最大值结点     *      * @param p     * @return     */</span>    <span class="token keyword">private</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findMax</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果没有右结点,那么t就是最大的</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findMax</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">contain</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contain</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> subtree<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>subtree <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">contain</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> subtree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">contain</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> subtree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 左左单旋转(LL旋转) w变为x的根结点, x变为w的右子树     *      * @param x     * @return     */</span>    <span class="token keyword">private</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">singleRotateLeft</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把w结点旋转为根结点</span>        AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> w <span class="token operator">=</span> x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 同时w的右子树变为x的左子树</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> w<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x变为w的右子树</span>        w<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重新计算x/w的高度</span>        x<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        w<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> w<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回新的根结点</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 右右单旋转(RR旋转) x变为w的根结点, w变为x的左子树     *      * @return     */</span>    <span class="token keyword">private</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">singleRotateRight</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> x <span class="token operator">=</span> w<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        w<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重新计算x/w的高度</span>        x<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        w<span class="token punctuation">.</span>height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回新的根结点</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 左右旋转(LR旋转) x(根) w y 结点 把y变成根结点     *      * @return     */</span>    <span class="token keyword">private</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">doubleRotateWithLeft</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// w先进行RR旋转</span>        x<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">singleRotateRight</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再进行x的LL旋转</span>        <span class="token keyword">return</span> <span class="token function">singleRotateLeft</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 右左旋转(RL旋转)     *      * @param w     * @return     */</span>    <span class="token keyword">private</span> AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">doubleRotateWithRight</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先进行LL旋转</span>        w<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">singleRotateLeft</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再进行RR旋转</span>        <span class="token keyword">return</span> <span class="token function">singleRotateRight</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printTree</span><span class="token punctuation">(</span>AVLNode<span class="token operator">&lt;</span>T<span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printTree</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printTree</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试     *      * @param arg     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AVLTree<span class="token operator">&lt;</span>Integer<span class="token operator">></span> avlTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AVLTree</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            avlTree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        avlTree<span class="token punctuation">.</span><span class="token function">printTree</span><span class="token punctuation">(</span>avlTree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除11,8以触发旋转平衡操作</span>        avlTree<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        avlTree<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        avlTree<span class="token punctuation">.</span><span class="token function">printTree</span><span class="token punctuation">(</span>avlTree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"findMin:"</span> <span class="token operator">+</span> avlTree<span class="token punctuation">.</span><span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"findMax:"</span> <span class="token operator">+</span> avlTree<span class="token punctuation">.</span><span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"15 exist or not : "</span> <span class="token operator">+</span> avlTree<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先根遍历:"</span> <span class="token operator">+</span> avlTree<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中根遍历:"</span> <span class="token operator">+</span> avlTree<span class="token punctuation">.</span><span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后根遍历:"</span> <span class="token operator">+</span> avlTree<span class="token punctuation">.</span><span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="散列表查找"><a href="#散列表查找" class="headerlink" title="散列表查找"></a>散列表查找</h2><ul><li>散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f，使得每个关键字 key 对应一个存储位置 f (key) 这里我们把这种对应关系 f 称为散列函数 ， 又称为哈希 (Hash) 函数。</li><li>采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表。那么关键字对应的记录存储位置我们称为散列地址。</li><li><p>散列技术最适合的求解问题是查找与给定值相等的记录。必须是一对一的关系。不适合范围区间查找</p><p><strong>整个散列过程其实就是两步</strong> </p></li><li>存储肘，通过散列函数计算记录 的散列地址，并按此散列地址存储该记录</li><li>查找记录时，我们通过同样的散列函数计算记录的散列地址，按此散到地址访问该记录 。</li></ul><h3 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h3><ul><li>散列函数的计算时间不应该超过其他查找技术与关键字比较的时间。</li><li><p>尽量让散列地址均匀地分布在存储空间中</p><p><strong>直接定址法</strong> </p></li><li>这样的散列函数优点就是简单 ，均匀，也不会产生冲突</li><li>问题是这需要事先知道关键字的分布情况，适合查找表较小且连续的情况</li><li>此方法虽然简单，但却并不常用</li></ul><p>比如我们要对 0 到100岁的人口数字统计表那么我们对年龄这个关键字就可以直接用年龄的数字作为地址。此时 f (key) =key</p><p><code>f ( key ) =a*key+b</code>(a,b为常数)</p><p> <strong>数字分析法</strong> </p><ul><li>比如我们的 11 位 手机号前三位是接入号应不同运营商公司的子品牌，中间四位HLR识别号，表示用户号的归属地;后四位才是真正的用户号。选择后面的四位成为散列地址就是不错的选择，并且还可以对抽取出来的数字再进行反转，左环位移等 </li><li><p>数字分析法通常适合处理关键字位数比较大的情况，如果事先知道关键字的分布且关键字的若干位分布较均匀，就可以考虑用这个方法。</p><p><strong>平方取中法</strong> </p></li><li>假设关键字是1234，那么它的平方就是1522756，再抽取中间的3位就是227，用做散列地址</li><li><p>平方取中法比较适合子不知道关键字的分布，而位数又不是很大的情况</p><p><strong>折叠法</strong> </p></li><li>折叠法是将关键字从左到右分割成位数相等的几部分(注意最后一部分位数不够时可以短些) ，然后将这几部分叠加求和，并按散列表表长，取后几位作为散列地址。</li><li>比如我们的关键字是 9876543210 ，散列表表长为三位，我们将它分为四组，9871654132110 ， 然后将它们叠加求和 <code>987+654+321+0=1962</code> ，再求后 3 位得到散列地址为 962 。</li><li><p>折叠法事先不需要知道关键字的分布，适合关键字位数较多的情况</p><p><strong>除留余敢法</strong> </p></li><li>此方法为最常用的构造散列函数方法。 对于散列裴长为 m 的散列函数公式为<code>f( key) = key %p (p &lt;= m)</code></li><li><p>若散列表表长为 m，通常 p 为小于或等于表长(最好接近m) 的最小质数或不包含小于20 质因子的合数。</p><p><strong>随机数法</strong> </p></li><li>选择一个随机数，取关键字的随机函数值为它的散列地址。也就是 <code>f (key)=random (key )</code> 。这里 random 是随机函数。当关键字的长度不等时，采用这个方法构造散列函数是比较合适的。</li></ul><h3 id="处理散列冲突的方法"><a href="#处理散列冲突的方法" class="headerlink" title="处理散列冲突的方法"></a>处理散列冲突的方法</h3><p> <strong>开放定址法</strong> </p><ul><li>所谓的开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</li></ul><p>公式：<code>f(key)=(f(key)+d)% m</code> d等于（1，2，3….m-1 )</p><ul><li>比如说，我仍的关键字集合为{1 2，67，56，16，25，37，22，29，15，47.4B，34}表长为12我们用散列函<code>f(key)=ke%12</code></li><li>计算前 5 个数{1 2，67，56，16，25}时，都是没有冲突的散列地址，直接存入</li><li>计算 key=37 时，发现 f (37) =1 ，此时就与 25 所在的位置冲突。 于是使用开放定址法 <code>f(37)=(f(37)+1)%12=2</code>。加入还是重负d就是不断进行累加</li><li><p>我们把这种解决冲突的开放定址法称为线性探测法</p><p><strong>再散列函数法</strong> </p></li><li><p>此方法对于我们的散列表来说，我们事先准备多个散列函数。每当发生散到地址冲突肘，就换一个散列函数计算，相信总会有一<br>个可以把冲突解决掉</p><p><strong>链地址法</strong> </p></li><li>将所有关键字为同义词的记录存储在一个单链表中，我们称这种表为同义词子表，在散列表中只存储所有同义词子表的头指针。</li><li>对于关键字集合{12，67，S6，16，25.37，22,29,lS,47,48,34} ，我们用前面同样的 12 为除数，进行除留余数法，可得到如图<br>8-11-1 结构，此时， 已经不存在什么冲突换址的问题，无论有多少个冲突，都只是在当前位置给单链裴增加结点的问题 。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2c7stkej30co0cndha.jpg" alt></p><p>链地址法对于可能会造成很多冲突的散列函数来说，提供了绝不会出现找不到地址的保障。当然，这也就带来了查找时需要遍历单链装的性能损耗。</p><p> <strong>公共溢出区法</strong> </p><ul><li>凡是冲突的都跟我走，我给你们这些冲突找个地儿待着。这就如同孤儿院收留所有无家可归的孩子一样，我们为<br>所有冲突的关键字建立了一个公共的溢出区来存放.</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2cnantjj30bc0e6ta8.jpg" alt></p><ul><li>在查找时，对给定值通过散列函数计算出散列地址后，先与基本表的相应位置进行比对，如果相等，则查找成功 i 如果不相等，则到溢出表去进行j帧序查找。</li><li>如果相对于基本表而言，有冲突的数据很少的情况下，公共溢出区的结构对查找性能来说还是非常高的。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是算法的时间复杂度</title>
      <link href="/2019/02/11/shu-ju-jie-gou-yu-suan-fa/shi-jian-fu-za-du/"/>
      <url>/2019/02/11/shu-ju-jie-gou-yu-suan-fa/shi-jian-fu-za-du/</url>
      
        <content type="html"><![CDATA[<h2 id="时间复杂度定义"><a href="#时间复杂度定义" class="headerlink" title="时间复杂度定义"></a>时间复杂度定义</h2><ul><li>在进行算法分析时 ,语旬总的执行次次<code>T(n)</code>是关子问题规模<code>n</code>的函数,进而分析<code>T(n)n</code>的变化情况并确定T（n）的数量级。</li><li>一般情况下,随着n的增大,T(n)增长最慢的算法为最优算法</li><li>算法的时间复杂度也就算法的度量，记作：<code>T（n）=O(f(n))</code>.它表示随问题规模n的增大，算法执行时间增长率和<code>f(n)</code>的增长率相同，乘坐算法的渐进时间复杂度。其中<code>f(n)</code>是问题规模n的某个函数</li><li>这样用大写 O()来体现算法时间复杂度的记法,我们称之为大 0 记法 。</li><li>常见的有常数阶O(1），线性阶O（n），对数阶O（logn），平方阶O（n2）</li></ul><h2 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大O阶方法</h2><ul><li>用常熟1取代运行时间中所有的加法常熟</li><li>在修改后的次数中只保留最高阶项</li><li>如果最高阶项存在且不是1,则去除与这个项相乘的常数。得到的结果就是大O阶。</li></ul><h2 id="常数阶"><a href="#常数阶" class="headerlink" title="常数阶"></a>常数阶</h2><p>高斯求和：求1+2+3+4+5+6…+n 结果集</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span>  sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行一次</span>    sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行一次</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行一次</span><span class="token punctuation">}</span></code></pre><p>这个算法的运行次数函数是<code>f(n) =3</code>.根据我们推导大 0 阶的方法,第一步就是<br>把常数项3改为1在保留最高阶项时发现,它根本没有最高阶项,所以这个算法的O(1).</p><h2 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h2><ul><li>线性阶的循环结构会复杂很多。要确定某个算法的阶次,我们常常需要确定某个 特定语句或某个语句集运行的次数。因此,我们要分析算法的复杂度,关键就是要分 析循环结构的运行情况。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 时间复杂度为O(1)的程序步骤序列 */</span><span class="token punctuation">}</span></code></pre><p>它的循环的时间复杂度为 O(n), 因为循环体中的代码须要执行 n 次。</p><h2 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> count <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 时间复杂度为O(1)的程序步骤序列 */</span><span class="token punctuation">}</span></code></pre><ul><li>由于每次count 乘以2之后,就距离n更近了一分 。 也就是说,有多少n个2相乘后大于 ,则会退出循。由 $2^x$=n得到x=log2n。 所以这个循环的时间复杂度为<code>O(logn)</code>。</li><li>二分查找算法的时间复杂度就是O(logn)。O(logn)的意思是以log为底数（你如果采用二分法,那么就会以2为底数,三分法就会以3为底数）比如当数据增大256倍时，耗时只增加8倍：</li></ul><pre><code>O(logn)=O(log256)2x2=4                  //第1次2x2x2=8                //第2次2x2x2x2=16             //第3次2x2x2x2x2=32           //第4次2x2x2x2x2x2=64         //第5次2x2x2x2x2x2x2=128      //第6次2x2x2x2x2x2x2=256(n)   //第7次 7个2相乘后=n2x2x2x2x2x2x2x2&gt;n      //第8次 个2相乘后大于n</code></pre><p> <strong><code>O(nlogn)</code>同理，就是n乘以logn，当数据增大256倍时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。归并排序就是O(nlogn)的时间复杂度。</strong> </p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1a9wj2kefj30lu0dtgsd.jpg" alt="输入图片说明"></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(六)什么是二叉树</title>
      <link href="/2019/02/11/shu-ju-jie-gou-yu-suan-fa/er-cha-shu/"/>
      <url>/2019/02/11/shu-ju-jie-gou-yu-suan-fa/er-cha-shu/</url>
      
        <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1aa0nyf80j30mg0ab772.jpg" alt></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p> <strong>二叉树是树的特殊一种，具有如下特点：</strong> </p><ul><li>每个结点最多有两颗子树，结点的度最大为2。</li><li>左子树和右子树是有顺序的，次序不能颠倒。</li><li>即使某结点只有一个子树，也要区分左右子树。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1tt5v6kj30bm06maae.jpg" alt></p><h2 id="二叉树五种基本形态"><a href="#二叉树五种基本形态" class="headerlink" title="二叉树五种基本形态"></a>二叉树五种基本形态</h2><ol><li>空二叉树。</li><li>只有一个根结点。</li><li>根结点只有左子树。</li><li>根结点只有右子树。</li><li>根结点既有左子树又有右子树。</li></ol><h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><h3 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h3><ul><li>斜树一定要是斜的,但是往哪斜还是有讲究。所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树 。</li><li>斜树有很明显的特点,就是每 一层都只有一个结点,结点的个数与二叉树的深度相同 。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1ugyn5rj30di06mjrp.jpg" alt="左斜树和右斜树"></p><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><ul><li>在一棵二叉树中,如果所有分支结点都存在左子树和右子树,并且所有叶子都在同一层上,这样的二叉树称为满二叉树</li><li>单是每个结点都存在左右子树,不能算是满二叉树,还必须要所有的叶子都在同一层上,这就做到了整棵树的平衡</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1v7nub3j30cb04rgmf.jpg" alt="满二叉树"></p><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><ul><li>对一棵具有n个结点的二叉树按层序编号,如果编号为<code>i</code>的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同,则这棵二叉树称为完全二叉树</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1w13f0uj30f506igmw.jpg" alt="完全二叉树"></p><p>满二叉树一定是一棵完全二叉树,但完全二叉树不一定是满的 。<br>完全二叉树的所有结点与同样深度的满二叉树,它们按层序编号相同的结点是一 一对应的</p><ul><li>像图 6-5-7 中的树 1,因为5结点 没有左子树,却有右子树,那就使得按层序编号的第 10 个编号空档了。</li><li>同样道理,图 6-5-7 中的树2,由于3结点没有子树,所以使得 6、7 编号的位置空挡了。</li><li>图 6-5-7 中的树3又是因为5编号下没有子树造成第 10 和第 11 位置空档。</li><li>只有图 6-5-6 中的 树,尽管它不是满二叉树,但是编号是连续的,所以它是完全二叉树。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1wj6se1j30kb0cun0d.jpg" alt></p><p> <strong>完全二叉树的特点:</strong> </p><ul><li>叶子结点只能出现在最下两层。</li><li>最下层的叶子一定集中在左部连续位置。</li><li>倒数二层,若有叶子结点,一定都在右部连续位置。</li><li>如果结点度为 1,则该结点只有左孩子,即不存在只有右子树的情况。 同样结点数的二叉树,完全二叉树的深度最小。</li></ul><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li>在二叉树的第i层上至多有2的i-1次方个结点.</li><li><p>深度为k的二叉树至多有2的k次方减1个结点($2^k-1​$)。</p></li><li><p>对任何一棵二叉树 T,如果其终端结点数为$n_0​$,度为2的结点数为$n_2​$,则$n_0​$=$n_2​$+1</p></li><li>比如图 6-6-1 的例子,结点总数为 10,宫是由 A、 B、 c、 D 等度为 2 结点, F、 G、H、 l、J等度为0的叶子结点和E这个度为1的结点组成。 总和为4+1+5=10。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1x2lk9rj30da06zq41.jpg" alt></p><ul><li><p>具有 n 个结点的完全二叉树的深度为[logn2n]+1</p><p><strong>如果对一棵有 n 个结点的完全二叉树(其深度为 [logn2n]+1) 的结点按层 序编号(从第 1 层到第[logn2n]+1层,每层从左到右),对任一结点 i (1&lt;=i&lt;=n) 有:</strong> </p></li></ul><ol><li>如果<code>i=1</code> ,则结点 i 是二叉树的棍,无双亲;如果i&gt; 1,则其双亲是结点 $\frac{i}{2}$。</li><li>如果<code>2*i&gt;n</code>,则结点 i 左孩子(结点i为叶子结点) ;否则其左孩子是结点2*i。</li><li>如果<code>2*i+1&gt;0</code>,则结点i无右孩子;否则其右孩子是结点<code>2*i+1</code>.</li></ol><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1ye80o2j30bo06o0tp.jpg" alt></p><ul><li>i=l 时就是根结点。 i&gt;1 时,比如结点7的双亲就是7/2=3, 结点9它的双亲就是9/2=4</li><li>第二条, 比如结点 6,因为 2X6=12 超过了结点总数 10,所以结点 6 元左孩子 , 它是叶子结点。 同样,而结点5, 因为2XS=10正好是结点,总数10,所以它的左孩子 是结点 10。 </li><li>第三条,比如结点 5,因为 2X5+1=l1,大于结点总数 10,所以它无右孩子。 而 结点 3,因为 2X3吐=7小于 10,所以宫的右孩子是结点 7</li></ul><h2 id="二叉树的顺序存储结构"><a href="#二叉树的顺序存储结构" class="headerlink" title="二叉树的顺序存储结构"></a>二叉树的顺序存储结构</h2><ul><li>二叉树的顺序存储结构就是用一维数组存储二叉树中的结点,井且结点的存储位<br>置,也就是数组的下标要能体现结点之间的逻辑关系,比如双亲与孩子的关系,左右 兄弟的关系等。</li><li>顺序存储 结构一般只用于完全二叉树。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>tree<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  二叉树的顺序存储结构: * *  二叉树的顺序存储结构就是用一维数组存储二叉树中的结点,井且结点的存储位 置, *  也就是数组的下标要能体现结点之间的逻辑关系,比如双亲与孩子的关系,左右 兄弟的关系等 * *  顺序存储结构一般只用于完全二叉树 * * @author qinxuewu * @create 19/2/9下午6:12 * @since 1.0.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeTest01</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//二叉树的默认深度</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_DEEP<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//二叉树的深度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用来存储数组的长</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据区域</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化二叉树</span>    <span class="token keyword">public</span> <span class="token function">TreeTest01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        k<span class="token operator">=</span>DEFAULT_DEEP<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//深度为k的二叉树至多有2的k次方减1个结点</span>        length<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TreeTest01</span><span class="token punctuation">(</span><span class="token keyword">int</span> deep<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k<span class="token operator">=</span>deep<span class="token punctuation">;</span>        length<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化二叉树 指定根结点</span>    <span class="token keyword">public</span> <span class="token function">TreeTest01</span><span class="token punctuation">(</span>T element<span class="token punctuation">,</span><span class="token keyword">int</span> deep<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k<span class="token operator">=</span>deep<span class="token punctuation">;</span>        length<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据元素查找在二叉树出现的第一个位置</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>T element<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根节点</span>    <span class="token keyword">public</span> T <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">/**     * 查找指定结点的父节点     *     * 根据二叉树的性质：     * 如果i=1 ,则结点i是二叉树的根,无双亲;如果i> 1,则其双亲是结点(i/2)     * 所以得出求父节点公式：(index-1)/2  因为数据下标从0开始所以index-1。     */</span>    <span class="token keyword">public</span> T <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"该节点不存在父节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> data<span class="token punctuation">[</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断二叉树是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取指定结点</span>    <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">></span>length<span class="token operator">||</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"超出底层数组范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 为指定结点添加子节点     * @param index     * @param element     * @param left 是否是左结点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span>T element<span class="token punctuation">,</span><span class="token keyword">boolean</span> left<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"该节点为空，不能添加子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>length<span class="token operator">||</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">></span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"超出底层数组范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 根据二叉树的性质：             * 如果对一棵有 n 个结点的完全二叉树的结点按层序编号(每层从左到右))对任一结点i             * 如果 2*i>n(i=结点编号即下标 n=结点总数),则结点i无左孩子             * 所以得出data[index*2+1]下标处如果为空就不存在左子节点可以进行插入             */</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"该节点已经存在左子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                data<span class="token punctuation">[</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>element<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 根据二叉树的性质：             * 如果对一棵有 n 个结点的完全二叉树的结点按层序编号(每层从左到右))对任一结点i             * 如果 2*i+1>n(i=结点编号即下标 n=结点总数),则结点i无右孩子             * 所以得出data[index*2+1++]下标处如果为空就不存在右子节点可以进行插入             */</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"该节点已经存在右子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                data<span class="token punctuation">[</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>element<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取指定结点的右节点</span>    <span class="token keyword">public</span> T <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>length<span class="token operator">||</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">></span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"超出底层数组范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> data<span class="token punctuation">[</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取指定结点的左结点</span>    <span class="token keyword">public</span> T <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>length<span class="token operator">||</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">></span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"超出底层数组范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> data<span class="token punctuation">[</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//完全二叉树</span>        TreeTest01<span class="token operator">&lt;</span>String<span class="token operator">></span> tree<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeTest01</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左结点</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右结点</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"G"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"H"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"J"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取下标2的结点：C</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取下标2的双亲结结点：A</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取下标2的右子结点：G</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取下标2的左子结点：F</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二叉树的链式存储结构"><a href="#二叉树的链式存储结构" class="headerlink" title="二叉树的链式存储结构"></a>二叉树的链式存储结构</h2><ul><li>二叉树每个结点最多有 两个孩子,所以为它设计一个数据域和两个指针域是 比较自然的想法, 我们称这样的 链表叫做二叉链衰</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1z3dur8j30ah01vmxa.jpg" alt="二叉链表"></p><p>data是数据区域。lchild和 民rchild都是指针域分别存放指向左孩子和右孩子的指针</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g1zotb8tj30js09940p.jpg" alt></p><h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><ul><li>二叉树的遍历是指从根结点出发,按照某种次序依次访问二叉树中所有结点.使得每个结点被访问-次 旦仅被访问一次 。</li><li>二叉树的遍历次序不同于线性结构,最多也就是从头至尾、循环、双向等简单的 遍历方式。树的结点之间不存在唯一的前驱和后继关系,在访问 一个结点后,下一个 被访问的结点面临着不同的选择 。</li></ul><h2 id="二叉树遍历方法"><a href="#二叉树遍历方法" class="headerlink" title="二叉树遍历方法"></a>二叉树遍历方法</h2><p>如果我们限制了从左到右的习惯方式,那么主要就分为四种 </p><ol><li><strong>前序遍历</strong> </li></ol><ul><li>若二叉树为空,则空操作返回,否则先访问根结点,然后前序遍历左子 树 , 再前序遍历右子树 </li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g205mz3tj30df093jt0.jpg" alt="前序遍历"></p><ol start="2"><li><strong>中序遍历</strong> </li></ol><ul><li>若树为空,则空操作返回,否则从根结点开始(注意并不是先访问根结点),中序遍历根结点的左子树,然后是访问根结点,最后中序遍历右子树 。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g20qkfvoj30bw08hta7.jpg" alt="中序遍历"></p><ol start="3"><li><strong>后序遍历</strong> </li></ol><ul><li>若树为空,则空操作返回,否则从左到右先叶子后结点的方式遍历访问左右子树,最后是访问根结点 </li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g216s9uvj30eh09rwg5.jpg" alt="后序遍历"></p><ol start="4"><li><strong>层序遍历</strong> </li></ol><ul><li>若树为空,则空操作返回,否则从树的第一层,也就是根结点开始访问, 从上而下逐层遍历,在同一层中, 按从左到右的颇用才结点逐个访问</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g21th4vrj30d508s0uc.jpg" alt="层序遍历"></p><p> <strong>JAVA实现二叉树的链式存储以及遍历</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> E data<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//数据域</span>    <span class="token keyword">private</span> TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> lchild<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//左孩子</span>    <span class="token keyword">private</span> TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> rchild<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//右孩子</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span>E data<span class="token punctuation">,</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> lchild<span class="token punctuation">,</span> TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> rchild<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lchild <span class="token operator">=</span> lchild<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rchild <span class="token operator">=</span> rchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>E data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLchild</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> lchild<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lchild <span class="token operator">=</span> lchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">getLchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRchild</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> rchild<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rchild <span class="token operator">=</span> rchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">getRchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rchild<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> root<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根节点</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeList <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//二叉树节点的链式结构</span>    <span class="token keyword">public</span> <span class="token function">BinaryTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BinaryTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//把一个数组转化为一颗完全二叉树</span>    <span class="token keyword">public</span> TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">buildTree</span><span class="token punctuation">(</span>E<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>        nodeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组中的元素依次转换为TreeNode节点，存放于链表中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nodeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对前（array.length / 2 - 1）个父节点，按照父节点与孩子节点的数字关系建立完全二叉树</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 根据二叉树的性质：             * 如果对一棵有 n 个结点的完全二叉树的结点按层序编号(每层从左到右))对任一结点i             * 如果 2*i>n(i=结点编号即下标 n=结点总数),则结点i无左孩子             * 如果 2*i+1>n(i=结点编号即下标 n=结点总数),则结点i无右孩子             */</span>            <span class="token comment" spellcheck="true">//左孩子 (2*i+1）</span>            nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLchild</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//右孩子 2*i+2）</span>            nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRchild</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//最后一个父节点：因为最后一个父节点可能没有右孩子，所以单独处理</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左孩子</span>        nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLchild</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右孩子：如果数组的长度为奇数才有右孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRchild</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        root<span class="token operator">=</span>nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置根节点</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//得到树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//递归计算节点的总个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//根节点+左子节点+右子节点</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token function">size</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">size</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归实现先序遍历     * 先访问根结点,然后前序遍历左子 树 , 再前序遍历右子树     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归实现中序遍历     * 从根结点开始(注意并不是先访问根结点),中序遍历根结点的左子树,     * 然后是访问根结点,最后中序遍历右子树     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">inOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递归实现后序遍历     * 从左到右先叶子后结点的方式遍历访问左右子树,最后是访问根结点     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">postOrder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 层序遍历     *     * 从树的第一层,也就是根结点开始访问, 从上而下逐层遍历,     * 在同一层中, 按从左到右的颇用才结点逐个访问     * @param root     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">>></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">&lt;</span>E<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> null<span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将根节点入队</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//队列不空循环</span>            node <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nodeQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//队头元素出队</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//左子树不空，则左子树入队列</span>                nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//右子树不空，则右子树入队列</span>                nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRchild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将一个数组转化为一颗完全二叉树</span>        <span class="token comment" spellcheck="true">//将一个数组转化为一颗完全二叉树</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        BinaryTree bt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> bt<span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"height: "</span><span class="token operator">+</span>bt<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size: "</span><span class="token operator">+</span>bt<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先序遍历："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bt<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序遍历："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bt<span class="token punctuation">.</span><span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序遍历："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bt<span class="token punctuation">.</span><span class="token function">levelOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"层次遍历："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bt<span class="token punctuation">.</span><span class="token function">levelOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>《大话数据结构》</li><li>参考：<a href="https://www.cnblogs.com/CherishFX/p/4617105.html" target="_blank" rel="noopener">https://www.cnblogs.com/CherishFX/p/4617105.html</a></li><li><a href="https://blog.csdn.net/u012428012/article/details/79089915" target="_blank" rel="noopener">面试常见二叉树算法题</a></li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(五)什么是队列</title>
      <link href="/2019/02/08/shu-ju-jie-gou-yu-suan-fa/dui-lie/"/>
      <url>/2019/02/08/shu-ju-jie-gou-yu-suan-fa/dui-lie/</url>
      
        <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2fqkzt1j30nb09ggoq.jpg" alt="队列"></p><h2 id="队列的概述"><a href="#队列的概述" class="headerlink" title="队列的概述"></a>队列的概述</h2><p>队列是一种先进先出 (First 10 First Out) 的线性表,简称 FIFO。允许插入的一 端称为队尾,允许删除的一端称为队头</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2g4unwrj30jb03mgmw.jpg" alt="队列"></p><h2 id="队列的顺序存储"><a href="#队列的顺序存储" class="headerlink" title="队列的顺序存储"></a>队列的顺序存储</h2><ul><li><p>顺序存储的队列需建立一个大于n的数组,并把队列的所有元素存储在数组的前n个单元,数组下标0的一端即是队头.所谓的入队列操作,其实就是在队尾追加一个元素,不需要移动任何元素,因此时间复杂度O(1)</p></li><li><p>与栈不同的是,队列元素的出列是在队头,即下标为队列中的所有元素都得向前移动,以保证队列的队头,也就是下标为0的位置不为空,此时时间复杂度为O(n)</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueTest1</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//默认队列容量为10</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头指针 总是指向出队的索引</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尾指针 总是下一个插入元素的索引</span>    <span class="token keyword">private</span> <span class="token keyword">int</span>  rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化队列</span>    <span class="token keyword">public</span>  <span class="token function">QueueTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> DEFAULT_CAPACITY<span class="token punctuation">;</span>        elementData <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token function">QueueTest1</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> initialCapacity<span class="token punctuation">;</span>        elementData <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//队列长度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">-</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 入队：     * 队尾插入元素     * @param e     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断当前尾指针索引是否大于队列的容量 下标从0开始 所以减1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rear<span class="token operator">></span>capacity<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入元素："</span><span class="token operator">+</span>e<span class="token operator">+</span><span class="token string">" 时队列已满 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        elementData<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出队：     *  总是队头删除元素     * @return     */</span>    <span class="token keyword">public</span> E <span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取头指针的元素</span>        E  e<span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 改变头指针的索引自增加+1         * 并把之前头指针指向的元素赋值null 以便垃圾回收         * front++ 先执行赋值null  下次再进入之前fornt就是1         */</span>        elementData<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueueTest1 q<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueueTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token operator">+</span>q<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deQueue->size:"</span><span class="token operator">+</span>q<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//此时会发生下标越界。报异常 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当我们采用顺序队列的时候，如果采用“元素不前移”的机制，<br>当尾指针到达上边界时，就会认为队列已满，但此时低端空间由于出队可能还有空闲空间。</p><h2 id="循坏队列"><a href="#循坏队列" class="headerlink" title="循坏队列"></a>循坏队列</h2><ul><li>所以解决假溢出的办法就是后面满了 ,就再从头开始,也就是头尾相接的循环。我们把队列的这种头尾相接的顺序存储结构称为循环队列 </li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 循坏队列 * * 所以解决假溢出的办法就是后面满了 , * 就再从头开始,也就是头尾相接的循环。我们把队列的这种头尾相接的顺序存储结构称为循环队列 * @author qinxuewu * @create 19/2/8上午11:14 * @since 1.0.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueTest2</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objs<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 头指针</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 尾指针</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 空间大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化队列</span>    <span class="token keyword">public</span>  <span class="token function">QueueTest2</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        objs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> size <span class="token operator">==</span> front<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 入队：     * 队尾插入元素     * @param e     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>        objs<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        length<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出队：     *  总是队头删除元素     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Object n <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>            n <span class="token operator">=</span> objs<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            objs<span class="token punctuation">[</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueueTest2 q<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueueTest2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size:"</span><span class="token operator">+</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1:deQueue->size:"</span><span class="token operator">+</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2:deQueue->size:"</span><span class="token operator">+</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h2><ul><li>队列的链式存储结构,其实就是线性表的单链表,只不过它只能队尾进，队头出而已, 我们把它简称为链队列。为了操作上的方便,我们将队头指针指向链队列的头结点。而队尾指针指向终端结点。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2glbx9ej30ef04bdgl.jpg" alt="队列的链式存储结构"></p><ul><li>人队操作时,其实就是在链表尾部插入结点</li><li>出队操作时,就是头结点的(next指向)后继结点出队,将头结点的next改为当前出队结点的nextzhi指向的结点, 若链表除头结点外只剩一个元素时, 则需将rear指向头结点</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueTest3</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//头指针</span>    <span class="token keyword">private</span> Node head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尾指针</span>    <span class="token keyword">private</span> Node rear<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 队列的长度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        Object element<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据域</span>        Node next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指针域</span>        <span class="token comment" spellcheck="true">// 无参构造器</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Object element<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token operator">=</span>element<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化队列，空头指针</span>    <span class="token keyword">public</span> <span class="token function">QueueTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rear<span class="token operator">=</span>head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化时数据为空</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化队列，有数据头指针</span>    <span class="token keyword">public</span> <span class="token function">QueueTest3</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        rear <span class="token operator">=</span> head<span class="token punctuation">;</span>        length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 入队：     * 在链表尾部插入结点     * @param obj     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 队列使用尾插法</span>        rear<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修改尾指针的next指向新添加的结点</span>        rear <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新队首指针新结点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  出队：     *     *  出队操作时,就是头结点的后继结点出队,     *  将头结点的后继改为它后面的结点,     *  若链表除头结点外只剩一个元素时, 则需将 rear 指向头结点     * @return     */</span>    <span class="token keyword">public</span> Node <span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Node temp<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//无法删除</span>            temp<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//头结点的后继结点出队</span>                temp<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//置空下一个节点就可以了</span>                head<span class="token punctuation">.</span>next<span class="token operator">=</span>null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//若链表除头结点外 只剩一个元素时, 则需将 rear 指向头结点</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>rear<span class="token operator">=</span>head<span class="token punctuation">;</span>                length<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//头结点的后继结点出队</span>                temp<span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将头结点的next, 改为出队结点它后面的结点</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                length<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueueTest3 q<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QueueTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init: "</span><span class="token operator">+</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deQueue: "</span><span class="token operator">+</span>q<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deQueue: "</span><span class="token operator">+</span>q<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deQueue: "</span><span class="token operator">+</span>q<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deQueue->size: "</span><span class="token operator">+</span>q<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2h17lgtj30dk0930u6.jpg" alt></p><h2 id="循环队列与链队列的比较"><a href="#循环队列与链队列的比较" class="headerlink" title="循环队列与链队列的比较"></a>循环队列与链队列的比较</h2><ul><li>从时间上,其实它们的基本操作都是常数时间,即都为0(1)的,不过循环队列是先申请好空间,使用期间不释放,而对于链队列,每次申请和释放结点也会存在一些时间开销。</li><li>对于空间上来说,循环队列必须有一个固定的长度,所以就有了存储元素个数和空间浪费的问题。而链队列不存在这个问题,尽管它需要一个指针域, 会产生 一些空间上的开销,但也可以接受 。所以在空间上,链队列更加灵活。</li><li>总的来说,在可以确定队列长度最大值的情况下 ,建议用循环队列,如果你无法预估队列的长度时,则用链队列。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(四)什么是栈</title>
      <link href="/2019/02/07/shu-ju-jie-gou-yu-suan-fa/zhan/"/>
      <url>/2019/02/07/shu-ju-jie-gou-yu-suan-fa/zhan/</url>
      
        <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2dbc6n4j30op0cltcp.jpg" alt="输入图片说明"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天是大年初三，在广州过的第四个还是第五个年了，已经忘了，中午吃完饭看书大话数据结构的这本书的栈与队列的关于栈的这篇文章。就去电影看黄渤演的疯狂的外星的人这部喜剧片。笑点还是挺多的。整部电影以外星文明想和人类建交而为起点。外星人在太空中意外坠楼到黄渤的训猴的马戏团。导致黄渤相依为命的猴子受伤无法继续表演。而外星人坠落时晕过去了。黄渤拿走了外星人超能力的能量环。黄渤误以为他稀有的猴子品种，把他当猴子训练发生的一系列啼笑皆非的故事。</p><h2 id="栈与队列的概述"><a href="#栈与队列的概述" class="headerlink" title="栈与队列的概述"></a>栈与队列的概述</h2><ul><li>栈是限定仅在表尾进行插入和删除操作的线性表 。 </li><li>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表</li></ul><h2 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h2><ul><li>我们把允许插入和删除的一端称为栈顶(top) ,另一端称为核底 (bottom),不含任何数据元素的称为空钱。栈又称为后进先出 (LastIn FilrstOut) 的线性表,简 称 LlFO 结构 。</li><li>首先它是一个统性表 ,也就是说,栈元素具有线性关系,即前驱后继关系。只不过它是一种特殊的线性表而已。定义中说是在线性表的表尾进行插入和删除操作,这里表尾是指栈顶 ,而不是栈底 。</li></ul><h2 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h2><ul><li>栈的顺序存储其实也是线性表顺序存储 的简化,我 们简称为顺序栈。下标为 0 的一端作为栈底比较好,因为首元素都存在栈底,变化最小,所以让它作栈底 。</li></ul><h2 id="顺序栈代码实现"><a href="#顺序栈代码实现" class="headerlink" title="顺序栈代码实现"></a>顺序栈代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回栈的长度</span>     <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//出栈</span>     E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//进栈</span>     <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//访问栈顶元素</span>     E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断栈是否为空</span>     <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//清空栈</span>     <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 栈的顺序存储结构 * 栈是先进后出的线性表 * @author qinxuewu * @create 19/2/7下午1:23 * @since 1.0.0 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SequenceStack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span>  <span class="token class-name">Stack</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义栈长度  给个默认值</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存顺序栈中元素的个数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个数组用于保存顺序栈中的元素</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SequenceStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//以指定的大小来创建栈</span>    <span class="token keyword">public</span> <span class="token function">SequenceStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> initSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token operator">=</span>initSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出栈思路：     * 1.判断当前炸是否为空     * 2. 栈不为空。先进后出原则。直接去栈顶的元素出栈szie-1的元素     * 3. 返回出栈的元素，     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"栈已空不能出栈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        E oldValue <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span>elementData<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让垃圾回收器及时回收，避免内存泄露</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 进栈:     * 1. 判断当前默认的栈长度是否已用完     * 2. 如果栈空间已用完每次增加16位的长度     * 3. 在新的栈空间的末尾元素增加新元素     *     * @param element     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>E element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//炸已满  每次增加16的长度</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span>capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>            capacity<span class="token operator">=</span>capacity<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">;</span>            elementData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 访问访问栈顶元素：     * 先进后出。访问栈顶元素     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        E value <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span>elementData<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>size <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>size <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SequenceStack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SequenceStack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">50</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h2><ul><li>栈的链式存储结构简称为链栈。通常栈顶是放在单链表的头部，对于链栈来说，是不需要头结点的。</li><li>对于链栈来说,基本不存在栈满的情况,除非内存已经没有可以使用的空间</li><li>对于空栈来说,链表原定义是头指针指向空 , 那么链栈的空其实就是<code>top=null</code>的时候。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2e4bavvj30mo09k3zo.jpg" alt="链栈"></p><p> <strong>进栈思路</strong> </p><ul><li><p>让栈顶top指向新创建的元素，并且新元素的next指针指向原来的栈顶元素</p><p><strong>出栈思路</strong> </p></li><li>出栈就是把当前栈顶替换为栈顶的next指向的结点。然后释放原栈顶的next引用</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2ennnrxj30d007r3zl.jpg" alt></p><h2 id="链栈代码实现"><a href="#链栈代码实现" class="headerlink" title="链栈代码实现"></a>链栈代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkStack</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> T data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指向下个节点的指针</span>        <span class="token keyword">private</span> Node next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无参构造器</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>T data<span class="token punctuation">,</span> Node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//链栈的栈顶元素</span>    <span class="token keyword">private</span> Node top<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结点数量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token function">LinkStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//空链栈，top的值为null</span>        top <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 以指定数据元素来创建链栈，该链栈只有一个元素</span>    <span class="token keyword">public</span> <span class="token function">LinkStack</span><span class="token punctuation">(</span>T element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 进栈思路：     * 让栈顶top指向新创建的元素，并且新元素的next指针指向原来的栈顶元素     * @param element     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>T element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 出栈思路：     * 出栈就是把当前栈顶替换为栈顶的next指向的结点。然后释放原栈顶的next引用     * @return     */</span>    <span class="token keyword">public</span> T <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node oldTop <span class="token operator">=</span> top<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 让top引用指向原栈顶元素的下一个元素</span>        top <span class="token operator">=</span> top<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 释放原栈顶元素的next引用</span>        oldTop<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> oldTop<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 访问栈顶元素，但不删除栈顶元素</span>    <span class="token keyword">public</span> T <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> top<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 请空链栈</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        top <span class="token operator">=</span> null<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkStack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkStack</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="栈的应用-递归"><a href="#栈的应用-递归" class="headerlink" title="栈的应用(递归)"></a>栈的应用(递归)</h2><p> <strong>斐波那契数列实现</strong> </p><p>说如果兔子在出生两个月后,就有繁殖能力, 一对兔子每个月能生出一对小兔子 来。假设所有兔都不死,那么一年以后可以繁殖多少对兔子呢?</p><p>我们拿新出生的一对小兔子分析一下;第一个月小兔子没有繁殖能力,所以还是 一对 i 两个月后,生下一对小兔子数共有两对; 三个月以后,老兔子又生下一对,因 为小兔子还没有繁殖能力 , 所以一共是三对……依次类推可以列出下表(表 4-8-1)。<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2f9wj02j30gg02vab7.jpg" alt></p><p>前面相邻两项之和,构成了后一项</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiGuiTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     * @param n 月份     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 两个月后新出生的兔子才有繁殖能力。             * 所以前两个月都没有兔子出生 都是开始的第一对兔子             */</span>            <span class="token keyword">return</span>  <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//前面相邻两项之和,构成了后一项</span>        <span class="token keyword">return</span>  <span class="token function">test</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(三)双向链表</title>
      <link href="/2019/02/06/shu-ju-jie-gou-yu-suan-fa/shuang-xiang-lian-biao/"/>
      <url>/2019/02/06/shu-ju-jie-gou-yu-suan-fa/shuang-xiang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今儿是大年初二,没事继续复习数据结构与算法。复习完双向链表下面就开始栈与队列的复习了。搞完这篇先去北京路溜达溜达。晚上在继续PMP和数据结构预算的学习</p><h2 id="什么是双向循环链表"><a href="#什么是双向循环链表" class="headerlink" title="什么是双向循环链表"></a>什么是双向循环链表</h2><ul><li>在单链袤的每个结点中,再设置一个指向其前驱结点的指针 域 。所以在双向链表中的结点都有两个指针域, 一个指向直接后继,另一个指向直接 前驱。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g23wcz21j30nz04pjrj.jpg" alt="双向链表"></p><h2 id="双向循环链表的生活情境"><a href="#双向循环链表的生活情境" class="headerlink" title="双向循环链表的生活情境"></a>双向循环链表的生活情境</h2><ul><li>比出 ,你是一业务员, 家在上海。儒要经常出差,行程就是上海到北京一路上的 城市,找客户谈生意或分公司办理业务。你从上海出发,乘火车路经多个城市停留 后,再乘飞机返回上海,以后,每隔一段时间,你基本还要按照这样的行程开展业务</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g24er51fj30kl031q4n.jpg" alt="输入图片说明"></p><ul><li>你平时都是从上海一路停留到北京的,可是这一次,你得先到北京开会,谁叫北京是首都呢,会就是多。开完会后,你需要例行公事,走访各个城市,此时你怎么办?。有人又出主意了,你可以先飞回上海,一路再乘火车走遍这儿个城市,到了北京后，你在飞回上海。你会感慨,人生中为什么总会有这样出馒主意的人存在呢?真要气死人才行。哪来这么麻烦,我一路从北京坐火车或汽车回去不就完了吗。</li><li>对呀,其实生活中类似的小智慧比比皆是,并不会那么的死板教条。我们的单链表,总是从头到尾找结点,难道就不可以正反遍历都可以吗?当然可以,只不过需要加点东西而已。</li></ul><h2 id="循环链袭和双向链表的主要差异"><a href="#循环链袭和双向链表的主要差异" class="headerlink" title="循环链袭和双向链表的主要差异"></a>循环链袭和双向链表的主要差异</h2><ul><li><p>双向链表和单向的循环链表操作节本相同，只是在添加和删除操作时多 了一个改变前指针的操作</p></li><li><p>我们在单链表中,有了 next 指针,这就使得我们要查找下一结点的时同复杂度为0(1)。可是如果我们要查找的是上一结点的话,那最坏的时间复杂度就是 O(n)了,因为我们每次都要从头开始遍历查找。双向链表就可以解决此类问题</p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span> <span class="token punctuation">{</span>   Node head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 头指针</span>    Node current<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 当前结点对象</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结点个数</span>    <span class="token comment" spellcheck="true">// 初始化头结点，让头指针指向头结点。并且让当前结点对象等于头结点。</span>    <span class="token keyword">public</span> <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 单向链表，初始长度为零。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最后一个元素指针域指向头结点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prior<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用当前结点对象 定位到要操作结点的前一个结点。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 说明在头结点之后操作。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第一个数据元素结点的下标是0，那么头结点的下标自然就是-1</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//临时变量 用户循坏判断当前节点是否到达</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">!=</span>head <span class="token operator">&amp;&amp;</span> temp<span class="token operator">&lt;</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环找到插入节点的前一个节点</span>            current<span class="token operator">=</span>current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除思路：     *     * 1。定位到当前要删除的下标的对像的前一个节点     * 2. 通过改变当前删除对象前一个节点的指针域。》指向当前要删除对象的指针域指向的下一个节点。     * 3. 改变删除结点的下一个结点的前指针,指向删除结点的前一个结点     * @param index     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"链表为空，无法删除！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">index</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定位到要操作结点的前一个结点对象。</span>        <span class="token comment" spellcheck="true">//改变删除结点的前一个节点的next指向为要删除结点的下一个结点</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 执行 current.setNext(current.next.next)后删除结点的前结点的next就指向了，删除结点的下一个结点了         * 比如,a,b,c三个结点 删除b的话 此时a->next就指向了c 但是c的前指针还是指向b         * 所以这个时就改变c的前指针指向a就完成删除操作了         */</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">setPrior</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取思路：     *         从头节点开始遍历。用临时变量temp记录遍历的次数。一直遍历等于index就不会再行循坏，直接取出当前下标的节点     * @param index     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数非法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> current<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定位置插入节点     * @param index     * @param obj     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">index</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定位到要操作结点的前一个结点对象。</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">setPrior</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">setPrior</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 未指定下标末尾插入     * @param obj     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 1.判断当前节点指向一下节点的指针域是否为空         * 如果指针域为空 说明是此节点是末尾节点         * 直接在尾部修改默认节点的指针域执指向新增的节点，并把新增的节点的指针域指向null         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环判断当前节点指针域是否有下一个节点</span>            current<span class="token operator">=</span>current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到末尾节点后。在末尾插入新的结点</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前末尾节点的下一个节点 也就是新增加的结点的前指针指向当前找到的末尾结点</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">setPrior</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前末尾结点next-next也就是刚插入的结点的下一个结点前指针指向当前插入的结点</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">setPrior</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token punctuation">{</span>        MyLinkedList list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除之前："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除之后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结点模型</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    Object element<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据域</span>    Node next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//后继指针域</span>    Node prior<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前驱指针域</span>    <span class="token comment" spellcheck="true">//头结点的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//非头结点的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获得当前结点的后继结点</span>    <span class="token keyword">public</span> Node <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获得当前结点的前驱结点</span>    <span class="token keyword">public</span> Node <span class="token function">getPrior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prior<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获得当前的数据域的值</span>    <span class="token keyword">public</span> Object <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置当前结点的后继指针域</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置当前结点的前驱指针域</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrior</span><span class="token punctuation">(</span>Node priorval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prior <span class="token operator">=</span> priorval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置当前结点的数据域</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setElement</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(二)循环链表的实现</title>
      <link href="/2019/02/05/shu-ju-jie-gou-yu-suan-fa/xun-huan-lian-biao/"/>
      <url>/2019/02/05/shu-ju-jie-gou-yu-suan-fa/xun-huan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今儿是大年初一,白天看完流浪地球这部科幻电影,号称中国科幻电影的一个里程碑。剧情紧凑，特性也不错很有质感。特别末日的的地下城生活片段。一个字棒。 晚上闲来无事单算研究下大话数据结构这部分，填补下数据结构这方面的弱点。</p><h2 id="什么是循环链表"><a href="#什么是循环链表" class="headerlink" title="什么是循环链表"></a>什么是循环链表</h2><ul><li>将单链表中终端结点的指针端自空指针改为指向头结点,就使整个单链表形成一 个环,这种头尾:相接的单链表称为单循环链表,简称循环链表。</li></ul><h2 id="循环列表的生活情境"><a href="#循环列表的生活情境" class="headerlink" title="循环列表的生活情境"></a>循环列表的生活情境</h2><ul><li>比出 ,你是一业务员, 家在上海。儒要经常出差,行程就是上海到北京一路上的 城市,找客户谈生意或分公司办理业务。你从上海出发,乘火车路经多个城市停留 后,再乘飞机返回上海,以后,每隔一段时间,你基本还要按照这样的行程开展业务</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g24er51fj30kl031q4n.jpg" alt="输入图片说明"></p><ul><li>有一次你先到南京开会，接下来要对以上的城市走一遍。此时有人对你说,不行,你得从上海开始,因为上海是第一站。 你会对这人说什么?神经病。哪有这么傻 的,直接回上海根本没有必要,你可以从南京开始,下一站蚌埠,直到北京,之后再 考虑走完上海及苏南的几个城市。显然这表示你是从当中一结点开始遍历整个链裴 , 这都是原来的单链表结构解决不了的问题。</li></ul><h2 id="循环链袭和单链表的主要差异"><a href="#循环链袭和单链表的主要差异" class="headerlink" title="循环链袭和单链表的主要差异"></a>循环链袭和单链表的主要差异</h2><ul><li>循环链袭和单链表的主要差异就在于循环的判断条件土,原沫是判断 <code>p-&gt;next(指针域)</code><br>是否为空,现在则是 <code>p-&gt; next</code> 不等于头结点,则循环未结束。</li><li>在单链表中,我们有了头结点时,我们可以用 0(1)的时间访问第一个结点,但对于要访问到最后一个结点,却需要 O(n)时间,因为我们需要将单链表全部扫描一编。</li><li>循环链表的尾指针方式就用0(1)的时间访问到尾部元素</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CycleLinkList</span> <span class="token punctuation">{</span>    Node head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 头指针</span>    Node current<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前结点对象</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结点个数</span>    <span class="token keyword">public</span> <span class="token function">CycleLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化头结点，让头指针指向头结点。并且让当前结点对象等于头结点。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 单向链表，初始长度为零。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最后一个元素指针域指向头结点</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用当前结点对象 定位到要操作结点的前一个结点。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 说明在头结点之后操作。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第一个数据元素结点的下标是0，那么头结点的下标自然就是-1</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//临时变量 用户循坏判断当前节点是否到达</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">!=</span>head <span class="token operator">&amp;&amp;</span> temp<span class="token operator">&lt;</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环找到插入节点的前一个节点</span>            current<span class="token operator">=</span>current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除思路：     *     * 1。定位到当前要删除的下标的对像的前一个节点     * 2. 通过改变当前删除对象前一个节点的指针域。》指向当前要删除对象的指针域指向的下一个节点。     * @param index     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"链表为空，无法删除！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">index</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定位到要操作结点的前一个结点对象。</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取思路：     *         从头节点开始遍历。用临时变量temp记录遍历的次数。一直遍历等于index就不会再行循坏，直接取出当前下标的节点     * @param index     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数非法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> current<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定位置插入节点     * @param index     * @param obj     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">index</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定位到要操作结点的前一个结点对象。</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 未指定下标末尾插入     * @param obj     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 1.判断当前节点指向一下节点的指针域是否为空         * 如果指针域为空 说明是此节点是末尾节点         * 直接在尾部修改默认节点的指针域执指向新增的节点，并把新增的节点的指针域指向null         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环判断当前节点指针域是否有下一个节点</span>            current<span class="token operator">=</span>current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    Object element<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据域</span>    Node next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指针域</span>    <span class="token comment" spellcheck="true">// 头结点的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 非头结点的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获得当前结点的指针域</span>    <span class="token keyword">public</span> Node <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获得当前结点数据域的值</span>    <span class="token keyword">public</span> Object <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置当前结点的指针域</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置当前结点数据域的值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setElement</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h2><p>约瑟夫环（约瑟夫问题）是一个数学的应用问题：已知n个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列。通常解决这类问题时我们把编号从0~n-1，最后 [1]  结果+1即为原问题的解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Yuesefu</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 构建循环链表     * @param totalCol     * @return     */</span>    <span class="token keyword">public</span> node <span class="token function">createNodes</span><span class="token punctuation">(</span><span class="token keyword">int</span> totalCol<span class="token punctuation">)</span><span class="token punctuation">{</span>        node head <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个头结点</span>        node<span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">[</span>totalCol<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组结点存放41个人</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totalCol <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>node <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据域赋值  不能让从0开始赋值 +1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//为0时就是是头结点</span>                <span class="token comment" spellcheck="true">// 初始化头结点</span>                head <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当前下标结点的前一个节点对象的指针域指向当前i的结点</span>                nodes<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        nodes<span class="token punctuation">[</span>totalCol<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最后一个结点的指针域指向头结点</span>        <span class="token keyword">return</span> head <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">int</span> total<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sort <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除的序号</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> total <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//总人数</span>        node head <span class="token operator">=</span> <span class="token function">createNodes</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断循环链表是不是只剩下一个节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//1 ：每报数为3的人前一个节点 也就是2 并替代当前头结点</span>                head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//2：用一个临时节点代替为当前报数为3的结点</span>            node temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>sort<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个自杀的为："</span><span class="token operator">+</span>temp<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3：使头结点的指针域指向报数为3的结点的next指向的结点</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//替换头结点 等于当前报数为3的人结点  循环以上步骤直到最后一个结点自杀完毕</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>sort<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"个自杀的为："</span><span class="token operator">+</span>head<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Yuesefu y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Yuesefu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    node next <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指针域</span>    <span class="token keyword">int</span> node <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据域</span>    <span class="token keyword">public</span> node <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>node next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>算法流程如下：</p><ul><li>1.初始化循环链表,从下标1开始自增赋值。头结点单数据域默认为空。单独处理不存放值</li><li>2.赋值到最后totalCol-1的结点  也就是尾部结点。它的指针域指向头结点形成单向循环链表。</li><li>3.循序开始判断链表是不是只剩下一个节点。也就是结点的指针域是否指向头结点。如果是就直接退出while并自杀此结点</li><li>4.当结点的指针域不是指向头结点时。循环操作i&lt;k-1次循环找到当前报数为3的前一个节点。并使头结点替换</li><li>5 用一个临时节点代替为当前报数为3的结点（也就是步骤4找的结点的next指向）输出它已自杀</li><li>6.使头结点的指针域指向报数为3的结点的next指向的结点。最后替换头结点等于当前报数为3的人结点  循环以上步骤直到最后一个结点自杀完毕</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g259b9f4j30lh0d2dh6.jpg" alt="输入图片说明"></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法(一)顺序表和单链表的比较</title>
      <link href="/2019/02/03/shu-ju-jie-gou-yu-suan-fa/shun-xu-biao-he-dan-lian-biao-de-bi-jiao/"/>
      <url>/2019/02/03/shu-ju-jie-gou-yu-suan-fa/shun-xu-biao-he-dan-lian-biao-de-bi-jiao/</url>
      
        <content type="html"><![CDATA[<h2 id="线性查找法"><a href="#线性查找法" class="headerlink" title="线性查找法"></a>线性查找法</h2><ul><li>线性查找又称顺序查。基本思路是从第一个记录开始，</li><li>逐个比较记录的关键字，直到和给定的K值相等，则查找成功；</li><li>若比较结果与文件中n个记录的关键字都不等，则查找失败。</li><li>时间复杂度：O(N)</li></ul><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><ul><li>二分查找法又叫折半查找法。比如小时候玩的猜数字游戏</li></ul><ul><li><p>胖虎说：大熊你猜猜我现在心中想的数字是什么。给你一个范围1-100之间，不限次数猜，猜不中就打你一次，看你需要被我打多少次才可以猜出来（心中想的是25）。</p></li><li><p>大熊想：…. 心中犯嘀咕。这不是明摆着欺负我。不行我得拿出吃奶的力气快速想出来。减少挨打的份 大熊随口说两个50</p></li><li><p>胖虎说：不对。随即甩手就是一嘴巴。 并说太高了</p></li><li>大熊：…. 真TM难。思考一番。那我就在减半 随口说是数字：25  这次就猜对了</li></ul><p>类似这种折半猜数字的方法就是二分法查找。</p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><ul><li>首先设置一个左标记为0和一个右标标记为当前数组长度，</li><li>第二步 让当前待查元素与表中间元素进行匹配，如果一致则直接返回中间索引，</li><li>第三步 如果小于中间索引则让右标记等于当前中间索引，</li><li><p>第四步 如果大于中间索引，则让左标示等于当前中间索引</p><p><strong>二分法查找比线性查找才查询次数上会大大减少。所以效率也就高了。就是要待查询的表为有序表，并且只对查询效率有所优化，<br>当修改和插入数据的时候这种效率就很低了。</strong> </p></li></ul><h3 id="代码示范"><a href="#代码示范" class="headerlink" title="代码示范"></a>代码示范</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 二分法查找 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> number <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> result <span class="token operator">=</span><span class="token function">halfSort</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查找出的下标："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">halfSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> min<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>max<span class="token punctuation">;</span>         max<span class="token operator">=</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         min<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min<span class="token operator">&lt;=</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>        mid<span class="token operator">=</span><span class="token punctuation">(</span>min<span class="token operator">+</span>max<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//折半</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&lt;</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如查找值比中值小</span>           max<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最高下标调证到中值下标的小一位</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">></span>data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           min<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">return</span>  mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 二分查找递归实现   </span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> srcArray<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> start<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>srcArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> mid<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> srcArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token function">binSearch</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> srcArray<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> <span class="token function">binSearch</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> </code></pre><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>0个或多个数据元素的有限序列。 首先它是一个序列。也就是说，元素之间是有顺序的，若元素存在多个，则第一个元素无前驱，最后一个元素无后继，其他每个元素都有且只有一个前驱和后继 。 </p><h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。 </p><h4 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h4><p> <strong>插入算法思路:</strong> </p><ul><li>如果插入位置不合理，抛出异常;</li><li>如果线性表长度大于等于数组长度，则抛出异常或动态增加容量;</li><li>从最后一个元素开始向前遍历到第 i 个位置，分别将它们都向后移动一个位置;</li><li>将要插入元素填入位置 i 处，表长加 1 。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2i0z0kyj30ek08yju2.jpg" alt="输入图片说明"></p><p> <strong>删除算法的思路:</strong> </p><ul><li>如果删除位置不合理，抛出异常 i</li><li>取出删除元素;</li><li>从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动 一<br>个位置;</li><li>表长减 1 。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2if0x4gj30ht0ahmzv.jpg" alt="输入图片说明"></p><p> <strong>代码实现</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>E e<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token punctuation">;</span>     String <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">MyList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//数组作为线性表的存储空间</span>    <span class="token keyword">private</span>  Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//线性表的当前长度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化数据大小</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span>elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"存储空间已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">></span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"添加参数下标越界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> size<span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 插入位置及之后的元素后移(下标加1)  比如 123  插入元素4 到的2的位置</span>             elementData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移动："</span><span class="token operator">+</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入</span>         <span class="token operator">++</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//长度增加</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移动："</span><span class="token operator">+</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入算法的思路;    , 如果插入位置不合理，抛出异常;    • 如果线性表长度大于等于数组长度，则抛出异常或动态增加容量;    • 从最后一个元素开始向前遍历到第 i 个位置，分别将它们都向后移动一个位    置;    • 将要插入元素填入位置 i 处;    • 表长加 1 。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span>elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"存储空间已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *      删除算法的思路:        • 如果删除位置不合理，抛出异常 i        • 取出删除元素;        • 从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动 一        个位置;        • 表长减 1 。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"删除位置不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>              elementData<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> elementData<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 被删除元素之后的元素左移  </span>         <span class="token punctuation">}</span>          size<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表长度减1  </span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"toArray:["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            list.remove(0);</span><span class="token comment" spellcheck="true">//            System.out.println(list.size());</span><span class="token comment" spellcheck="true">//            System.out.println(list.toArray());</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h4><ul><li>链式存储结构的特点是用一组任意的存储单元存储线性表的数据元素，<br>这组存储单元可以是连续的，也可以是不连续的。</li><li>除了存储其本身的信息之外，还需存储一个指示其直接后继的信息指针</li><li>链式存储结构是基于指针实现的。我们把一个数据元素和一个指针称为结点。</li></ul><pre><code>数据域：存数数据元素信息的域。指针域：存储直接后继位置的域。</code></pre><ol><li>单链表</li></ol><ul><li>单链表是以指针作为连接，各个节点都由next指针指向下一个节点的地址，将各个节点相互连接起来形成一个单向链表</li><li>单链表分为有头结点和非头结点两种。一般都是有头结点的</li><li>头结点即在链表的首元结点之前附设的一个结点，该结点的数据域中不存储线性表的数据元素，其作用是为了对链表进行操作时，可以对空表、非空表的情况以及对首元结点进行统一处理，编程更方便。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2j67ht1j30ny0dfgm7.jpg" alt="单链表"></p><p> <strong>带头结点的单链表的插入操</strong> </p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2jsv7o7j30nb09zq3f.jpg" alt="输入图片说明"></p><ul><li>采用带头结点的单链表结构，插入时。不管是在中间插入还是头部插入元素。操作方式都是统一的，改变的是插入元素位置上一个节点的next指针区域的指向。以及插入元素next指针区域的指向</li><li>头结点即在链表的首元结点之前附设的一个结点，该结点的数据域中不存储线性表的数据元素，其作用是为了对链表进行操作时，可以对空表、非空表的情况以及对首元结点进行统一处理，编程更方便。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2k8s8zrj30l0070q4x.jpg" alt="输入图片说明"></p><p> <strong>代码实现</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    Object element<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据域</span>    Node next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指针域</span>    <span class="token comment" spellcheck="true">// 头结点的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 非头结点的构造方法</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获得当前结点的指针域</span>    <span class="token keyword">public</span> Node <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获得当前结点数据域的值</span>    <span class="token keyword">public</span> Object <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置当前结点的指针域</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Node nextval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> nextval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置当前结点数据域的值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setElement</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLinkList</span> <span class="token punctuation">{</span>    Node head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 头指针</span>    Node current<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前结点对象</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结点个数</span>    <span class="token keyword">public</span> <span class="token function">MyLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化头结点，让头指针指向头结点。并且让当前结点对象等于头结点。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 单向链表，初始长度为零。</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用当前结点对象 定位到要操作结点的前一个结点。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 说明在头结点之后操作。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第一个数据元素结点的下标是0，那么头结点的下标自然就是-1</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//临时变量 用户循坏判断当前节点是否到达</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> temp<span class="token operator">&lt;</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//循环找到插入节点的前一个节点</span>                current<span class="token operator">=</span>current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                temp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除思路：     *     * 1。定位到当前要删除的下标的对像的前一个节点     * 2. 通过改变当前删除对象前一个节点的指针域。》指向当前要删除对象的指针域指向的下一个节点。     * @param index     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"链表为空，无法删除！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">index</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定位到要操作结点的前一个结点对象。</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取思路：     *         从头节点开始遍历。用临时变量temp记录遍历的次数。一直遍历等于index就不会再行循坏，直接取出当前下标的节点     * @param index     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数非法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//临时变量 用户循坏判断当前节点是否到达</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> temp<span class="token operator">&lt;</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环找到插入节点的前一个节点</span>            current<span class="token operator">=</span>current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> current<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 指定位置插入节点     * @param index     * @param obj     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"参数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">index</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定位到要操作结点的前一个结点对象。</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>current<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 未指定下标末尾插入     * @param obj     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 1.判断当前节点指向一下节点的指针域是否为空         * 如果指针域为空 说明是此节点是末尾节点         * 直接在尾部修改默认节点的指针域执指向新增的节点，并把新增的节点的指针域指向null         */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//循环判断当前节点指针域是否有下一个节点</span>            current<span class="token operator">=</span>current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> current<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception <span class="token punctuation">{</span>        MyLinkList list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        list.save(1);</span>        list<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除之前："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除之后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="顺序表和单链表的比较"><a href="#顺序表和单链表的比较" class="headerlink" title="顺序表和单链表的比较"></a>顺序表和单链表的比较</h4><p> <strong>顺序表：</strong> </p><ul><li><p>优点：在存, 读数据时, 不管是哪个位置，时间复杂度都是 0(1) ;<br>*缺点：插入或删除时，时间复杂度都是 O(n)。需要运动大量元素当线性表长度变化较大时，难以确定存储空间的容量会产生存储空间“碎片” </p><p><strong>单链表：</strong> </p></li><li>优点：主要优点是不需要预先给出数据元素的最大个数。另外，单链表插入和删除操作时不需要移动数据元素；</li><li>缺点：主要缺点是每个结点中要有一个指针，因此单链表的空间利用率略低于顺序表的。另外，单链表不支持随机读取，单链表取数据元素操作的时间复杂度为O（n）；而顺序表支持随机读取，顺序表取数据元素操作的时间复杂度为O（1）。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud alibaba系列(三)Nacos Config配置中心</title>
      <link href="/2019/01/29/spring-xi-lie/springcloudalibaba-zhi-pei-zhi-zhong-xin/"/>
      <url>/2019/01/29/spring-xi-lie/springcloudalibaba-zhi-pei-zhi-zhong-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li>Nacos Config就是一个类似于SpringCloud Config的配置中心</li></ul><h2 id="接入"><a href="#接入" class="headerlink" title="接入"></a>接入</h2><ul><li><p>SpringCloud项目集成Nacos Config配置中心很简单。只需要部署Nacos 客户端并在里面添加配置即可。然后引入Nacos Config动态读取即可</p><p><strong>1. 创建一个SpringCloud工程cloud-config 修改 pom.xml 文件，引入 Nacos Config Starter</strong> </p></li></ul><p>前提得选引入spring-cloud-alibaba-dependencies</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>dependency<span class="token operator">></span>     <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>     <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>nacos<span class="token operator">-</span>config<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p> <strong>2. 修改application.properties配置</strong> </p><pre class=" language-java"><code class="language-java">server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">18085</span>management<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>web<span class="token punctuation">.</span>exposure<span class="token punctuation">.</span>include<span class="token operator">=</span><span class="token operator">*</span></code></pre><p> <strong>3. 新建bootstrap.properties文件</strong> </p><pre class=" language-java"><code class="language-java">spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>cloud<span class="token operator">-</span>configspring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server<span class="token operator">-</span>addr<span class="token operator">=</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">8848</span></code></pre><p> <strong>4. 启动Nacos客户端</strong> </p><ul><li>具体步骤可参考 <a href="https://blog.qinxuewu.club/2019/01/27/spring-xi-lie/springcloudalibaba-zhi-fu-wu-zhu-ce-fa-xian/" target="_blank" rel="noopener">上篇文章</a> </li></ul><p> <strong>5. 配置列表新增配置</strong> </p><ul><li><code>dataId</code> ：格式如下 <code>${prefix} - ${spring.profiles.active} . ${file-extension}</code></li><li>prefix 默认为 spring.application.name 的值</li><li><p>spring.profiles.active 当前环境对应的 profile</p></li><li><p>file-extension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension来配置。 目前只支持 properties 类型。</p></li><li>group 默认<code>DEFAULT_GROUP</code></li></ul><p><code>当activeprofile 为空时直接填写 spring.application.name值即可 默认properties</code></p><p><img src="https://img-blog.csdnimg.cn/20190321095416198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzOTEzNDI=,size_16,color_FFFFFF,t_70" alt></p><p> <strong>5. 添加Controller并在类上添加 @RefreshScope动态获取配置中心的值</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.name}"</span><span class="token punctuation">)</span>    String userName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"获取 Nacos Config配置如下："</span>  <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> <strong>6.启动测试</strong> </p><p>这样就可以获取到配置中心的值。并且配置中心修改值后。可以立即动态刷新获取最新的值</p><p><img src="https://img-blog.csdnimg.cn/20190321095451780.png" alt="在这里插入图片描述"></p><ul><li>案例源码: <a href="https://github.com/a870439570/alibaba-cloud" target="_blank" rel="noopener">https://github.com/a870439570/alibaba-cloud</a></li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PMP备考】引论项目的概述和目的</title>
      <link href="/2019/01/29/sui-bi/pmp-bei-kao-yin-lun-xiang-mu-de-gai-shu-he-mu-de/"/>
      <url>/2019/01/29/sui-bi/pmp-bei-kao-yin-lun-xiang-mu-de-gai-shu-he-mu-de/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>项目是为创造独特的产品、服务或成果而进行的临时性工作</li></ul><h2 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h2><ul><li>独特的产品、服务或成果</li><li><p>临时性工作</p></li><li><p>项目驱动变革</p></li><li>项目创造商业价值</li><li>项目启动背景</li><li>项目管理的重要性</li><li>项目、项目集、项目组合以及运营管理之间的关系</li><li>指南的组成部分</li></ul><h2 id="独特的产品、服务或成果"><a href="#独特的产品、服务或成果" class="headerlink" title="独特的产品、服务或成果"></a>独特的产品、服务或成果</h2><ul><li>一个独特的产品可能是其他产品的组成部分,某个产品的升级版或修正版</li><li>一种独特的服务或提供某种服务的能力</li><li>一个或多个产品、服务或成果的独特组合</li><li>一项独特的成果，例如某个结果或文件</li></ul><h2 id="临时性工作"><a href="#临时性工作" class="headerlink" title="临时性工作"></a>临时性工作</h2><ul><li><p>临时性是指明有启点和终点</p></li><li><p>项目是临时性工作，但其可交付成果可能会在项目的终止后依然存在。</p></li></ul><h2 id="什么情况下项目宣告结束"><a href="#什么情况下项目宣告结束" class="headerlink" title="什么情况下项目宣告结束"></a>什么情况下项目宣告结束</h2><ul><li>达成项目目标</li><li>不会或不能达到目标</li><li>资金耗尽或再无可分配给项目的资金</li><li>客户不再要求完成项目</li><li>无法获得所需人力或物力资源</li><li>出于法律或便利原因而终止项目</li></ul><h2 id="项目驱动变革"><a href="#项目驱动变革" class="headerlink" title="项目驱动变革"></a>项目驱动变革</h2><ul><li>推动组织从一个状态转换为另一个状态</li></ul><h2 id="项目创造商业价值"><a href="#项目创造商业价值" class="headerlink" title="项目创造商业价值"></a>项目创造商业价值</h2><ul><li>从商业运作中获得的可量化净效益,效益可以是有形的、无形的或两者兼有之</li></ul><h3 id="有形的"><a href="#有形的" class="headerlink" title="有形的"></a>有形的</h3><ul><li>货币资产；</li><li>股东权益；</li><li>公共事业；</li><li>固定设施；</li><li>工具；</li><li>市场份额</li></ul><h3 id="无形的"><a href="#无形的" class="headerlink" title="无形的"></a>无形的</h3><ul><li>商誉；</li><li>品牌认知度；</li><li>公共利益；</li><li>商标；</li><li>战略一致性；</li><li>声誉。</li></ul><h2 id="项目启动背景"><a href="#项目启动背景" class="headerlink" title="项目启动背景"></a>项目启动背景</h2><ul><li>符合法规、法律或社会要求；</li><li>满足相关方的要求或需求；</li><li>执行、变更业务或技术战略；</li><li>创造、改进或修复产品、过程或服务</li></ul><h2 id="项目管理的重要性"><a href="#项目管理的重要性" class="headerlink" title="项目管理的重要性"></a>项目管理的重要性</h2><p>项目管理就是将知识、技能、工具与技术应用于项目活动，以满足项目的要求。项目管理通过合理<br>运用与整合特定项目所需的项目管理过程得以实现。项目管理使组织能够有效且高效地开展项目</p><h3 id="有效的项目管理优点"><a href="#有效的项目管理优点" class="headerlink" title="有效的项目管理优点"></a>有效的项目管理优点</h3><ul><li>达成业务目标； 满足相关方的期望；</li><li>提高可预测性； 提高成功的概率；</li><li>在适当的时间交付正确的产品；</li><li>解决问题和争议； 及时应对风险；</li><li>优化组织资源的使用； 识别、挽救或终止失败项目；</li><li>管理制约因素（例如范围、质量、进度、成本、资源）；</li><li>平衡制约因素对项目的影响（例如范围扩大可能会增加成本或延长进度）；</li><li>以更好的方式管理变更</li></ul><h3 id="无效的项目管理带来的缺点"><a href="#无效的项目管理带来的缺点" class="headerlink" title="无效的项目管理带来的缺点"></a>无效的项目管理带来的缺点</h3><ul><li>超过时限； 成本超支； 质量低劣； 返工；</li><li>项目范围扩大失控； 组织声誉受损；</li><li>相关方不满意； 正在实施的项目无法达成目标。</li></ul><h2 id="项目-项目集-项目组合以及运营管理之间的关系"><a href="#项目-项目集-项目组合以及运营管理之间的关系" class="headerlink" title="项目,项目集,项目组合以及运营管理之间的关系"></a>项目,项目集,项目组合以及运营管理之间的关系</h2><h3 id="项目集"><a href="#项目集" class="headerlink" title="项目集"></a>项目集</h3><ul><li><p>为实现战略目标而组合在一起管理的项目,项目集、子项目组合和运营工作.</p></li><li><p>项目集管理注重项目与项目以及项目与项目集之间的依赖关系</p></li><li>以便获得分别管理无法获得的效益</li></ul><h3 id="项目组合"><a href="#项目组合" class="headerlink" title="项目组合"></a>项目组合</h3><p>为实现战略目标而组合在一起管理的项目，项目集、子项目组合和运营工作。</p><p>项目组合中的项目集或项目不一定依赖</p><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><ul><li>指导组织的投资决策。</li><li>选择项目集与项目的最佳组合方式，以达成战略目标。</li><li>提供决策透明度。</li><li>确定团队和实物资源分配的优先顺序。</li><li>提高实现预期投资回报的可能性。</li><li>实现对所有组成部分的综合风险的集中式管理。</li></ul><h3 id="运营管理"><a href="#运营管理" class="headerlink" title="运营管理"></a>运营管理</h3><p>关注产品的持续生产和服务的持续运作</p><ul><li>在新产品开发、产品升级或提高产量时；</li><li>在改进运营或产品开发流程时；</li><li>在产品生命周期结束阶段；</li><li>在每个收尾阶段</li></ul><h2 id="组织级项目管理-OPM-和战略"><a href="#组织级项目管理-OPM-和战略" class="headerlink" title="组织级项目管理 (OPM) 和战略"></a>组织级项目管理 (OPM) 和战略</h2><ul><li>项目组合、项目集和项目均需符合组织战略或由组织战略驱动</li><li>项目组合管理通过选择适当的项目集或项目，对工作进行优先排序，以及提供所需资源，使项目组合与组织战略保持一致</li><li>项目集管理对其组成部分进行协调，对它们之间的依赖关系进行控制，从而实现既定收益。</li><li>项目管理使组织的目的和目标得以实现。</li></ul><h2 id="项目的生命周期"><a href="#项目的生命周期" class="headerlink" title="项目的生命周期"></a>项目的生命周期</h2><ul><li>项目从启动到完成开始到结束所经历的一系列阶段</li><li>项目生命周期可以是预测型或适应型</li><li>开发生命周期可以是预测型、迭代型、增量型,适应型或混合型的模式</li></ul><h3 id="预测型"><a href="#预测型" class="headerlink" title="预测型"></a>预测型</h3><ul><li>在生命周期的早期阶段确定项目范围、时间和成本。</li><li>对任何范围的变更都要进行仔细管理。</li><li>预测型生命周期也称为瀑布型生命周期。</li></ul><h3 id="迭代型"><a href="#迭代型" class="headerlink" title="迭代型"></a>迭代型</h3><ul><li>迭代方法是通过一系列重复的循环活动来开发产品，时间及成本估算将随着项目团队对产品理解的不断深入而定期修改</li></ul><h3 id="增量型"><a href="#增量型" class="headerlink" title="增量型"></a>增量型</h3><ul><li>增量型生命周期是通过在预定的时间区间内渐进增加产品功能的一系列迭代来产出可交付成果。只有在最后一次迭代之后，可交付成果具有了必要和足够的能力，才能被视为完整的。</li></ul><h3 id="适应型"><a href="#适应型" class="headerlink" title="适应型"></a>适应型</h3><ul><li>适应型生命周期属于敏捷型、迭代型或增量型。</li><li>详细范围在迭代开始之前就得到了定义和批准。</li><li>适应型生命周期也称为敏捷或变更驱动型生命周期</li></ul><h3 id="混合型"><a href="#混合型" class="headerlink" title="混合型"></a>混合型</h3><ul><li>混合型生命周期是预测型生命周期和适应型生命周期的组合。</li><li>充分了解或有确定需求的项目要素遵循预测型开发生命周期</li><li>而仍在发展中的要素遵循适应型开发生命周期。</li></ul><h2 id="项目阶段"><a href="#项目阶段" class="headerlink" title="项目阶段"></a>项目阶段</h2><ul><li>项目阶段是一组具有逻辑关系的项目活动的集合，通常以一个或多个可交付成果的完成为结束</li><li>项目阶段可基于各种因素而建立，其中包括管理需求；项目性质；组织、行业或技术的独特性；项目的组成要素，包括但不限于技术、工程、业务、过程或法律；决策点（例如资金、继续/终止项目，里程碑审查）</li></ul><h2 id="阶段关口"><a href="#阶段关口" class="headerlink" title="阶段关口"></a>阶段关口</h2><ul><li>阶段关口设立在阶段结束点。</li><li>在该时点，把项目的绩效及进展与各种项目文件及业务文件进行比较。</li></ul><h3 id="包括以下文件"><a href="#包括以下文件" class="headerlink" title="包括以下文件"></a>包括以下文件</h3><ul><li>项目商业论证</li><li>项目章程</li><li>项目管理计划</li><li>效益管理计划</li></ul><h2 id="项目管理过程"><a href="#项目管理过程" class="headerlink" title="项目管理过程"></a>项目管理过程</h2><p>项目管理过程分为五大过程组</p><h3 id="1-启动过程组"><a href="#1-启动过程组" class="headerlink" title="1.启动过程组"></a>1.启动过程组</h3><p>定义一个新项目或现有项目的一个新阶段授权开始该项目或阶段的一组过程</p><h3 id="2-规划过程组"><a href="#2-规划过程组" class="headerlink" title="2.规划过程组"></a>2.规划过程组</h3><p>明确项目范围，优化目标，为实现目标制定行动方案的一组过程</p><h3 id="3-执行过程组"><a href="#3-执行过程组" class="headerlink" title="3.执行过程组"></a>3.执行过程组</h3><p>完成项目管理计划中确定的工作，以满足项目要求的一组过程</p><h3 id="4-监控过程组"><a href="#4-监控过程组" class="headerlink" title="4.监控过程组"></a>4.监控过程组</h3><p>跟踪、审查和调整项目进展与绩效，识别必要的计划变更并启动相应变更的一组过程。</p><h3 id="5-收尾过程组"><a href="#5-收尾过程组" class="headerlink" title="5.收尾过程组"></a>5.收尾过程组</h3><p>正式完成或结束项目、阶段或合同所执行的过程</p><h2 id="项目管理知识领域"><a href="#项目管理知识领域" class="headerlink" title="项目管理知识领域"></a>项目管理知识领域</h2><p>项目管理知识领域分为十大知识领域</p><h3 id="1-项目整合管理"><a href="#1-项目整合管理" class="headerlink" title="1.项目整合管理"></a>1.项目整合管理</h3><p>定义一个新项目或现有项目的一个新阶段授权开始该项目或阶段的一组过程</p><h3 id="2-项目范围管理"><a href="#2-项目范围管理" class="headerlink" title="2.项目范围管理"></a>2.项目范围管理</h3><p>确保项目做且只做所需的全部工作以成功完成项目的各个过</p><h3 id="3-项目进度管理"><a href="#3-项目进度管理" class="headerlink" title="3.项目进度管理"></a>3.项目进度管理</h3><p>管理项目按时完成所需的各个过程</p><h3 id="4-项目成本管理"><a href="#4-项目成本管理" class="headerlink" title="4.项目成本管理"></a>4.项目成本管理</h3><p>为使项目在批准的预算内完成而对成本进行规划、估算、预算、融资、筹资、管理和控制的各个过程</p><h3 id="5-项目质量管理"><a href="#5-项目质量管理" class="headerlink" title="5.项目质量管理"></a>5.项目质量管理</h3><p>把组织的质量政策应用于规划、管理、控制项目和产品质量要求，以满足相关方的期望的各个过程</p><h3 id="6-项目资源管理"><a href="#6-项目资源管理" class="headerlink" title="6.项目资源管理"></a>6.项目资源管理</h3><p>识别、获取和管理所需资源以成功完成项目的各个过程</p><h3 id="7-项目沟通管理"><a href="#7-项目沟通管理" class="headerlink" title="7.项目沟通管理"></a>7.项目沟通管理</h3><p>为确保项目信息及时且恰当地规划、收集、生成、发布、存储、检索、管理、控制、监督和最终处置所需的各个过程</p><h3 id="8-项目风险管理"><a href="#8-项目风险管理" class="headerlink" title="8.项目风险管理"></a>8.项目风险管理</h3><p>规划风险管理、识别风险、开展风险分析、规划风险应对、实施风险应对和<br>监督风险的各个过程</p><h3 id="9-项目采购管理"><a href="#9-项目采购管理" class="headerlink" title="9.项目采购管理"></a>9.项目采购管理</h3><p>从项目团队外部采购或获取所需产品、服务或成果的各个过程</p><h3 id="10-项目相关方管理"><a href="#10-项目相关方管理" class="headerlink" title="10.项目相关方管理"></a>10.项目相关方管理</h3><p>识别影响或受项目影响的人员、团队或组织，分析相关方对项目的期望和影响，制定合适的管理策略来有效调动相关方参与项目决策和执行。</p><h2 id="项目管理数据和信息"><a href="#项目管理数据和信息" class="headerlink" title="项目管理数据和信息"></a>项目管理数据和信息</h2><p>定期收集和分析项目数据</p><h3 id="工作绩效数据"><a href="#工作绩效数据" class="headerlink" title="工作绩效数据"></a>工作绩效数据</h3><p>在执行项目工作的过程中，从每个正在执行的活动中收集到的原始观察结果<br>和测量值</p><h3 id="工作绩效信息"><a href="#工作绩效信息" class="headerlink" title="工作绩效信息"></a>工作绩效信息</h3><p>从各控制过程收集，并结合相关背景和跨领域关系进行整合分析而得到的<br>绩效数据。</p><h3 id="工作绩效报告"><a href="#工作绩效报告" class="headerlink" title="工作绩效报告"></a>工作绩效报告</h3><p>为制定决策、提出问题、采取行动或引起关注，而汇编工作绩效信息所形成<br>的实物或电子项目文件</p><p><img src="https://images.gitee.com/uploads/images/2019/0129/152719_1faab5aa_1478371.jpeg" width></p><p>喜欢本文的朋友们，欢迎长按下图关注，收看更多精彩内容</p><p>公众号回复<code>pmp引论</code>即可获取思维导图</p>]]></content>
      
      
      <categories>
          
          <category> PMP备考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PMP备考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud alibaba系列(二)Sentinel应用的限流管理</title>
      <link href="/2019/01/28/spring-xi-lie/springcloudalibaba-zhi-sentinel-xian-liu/"/>
      <url>/2019/01/28/spring-xi-lie/springcloudalibaba-zhi-sentinel-xian-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="限流组件Sentinel"><a href="#限流组件Sentinel" class="headerlink" title="限流组件Sentinel"></a>限流组件Sentinel</h2><ul><li>Sentinel是把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li>默认支持 Servlet、Feign、RestTemplate、Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li>自带控台动态修改限流策略。但是每次服务重启后就丢失了。所以它也支持ReadableDataSource 目前支持file, nacos, zk, apollo 这4种类型<h2 id="接入Sentinel"><a href="#接入Sentinel" class="headerlink" title="接入Sentinel"></a>接入Sentinel</h2>创建项目cloud-sentinel</li></ul><ul><li>1 引入 Sentinel starter<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>sentinel<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre></li><li>2 application.properties配置如下<br><code>`</code> bash<br>server.port=18084<br>spring.application.name=service-sentinel</li></ul><p>#Sentinel 控制台地址<br>spring.cloud.sentinel.transport.dashboard=localhost:8080</p><p>#取消Sentinel控制台懒加载<br>spring.cloud.sentinel.eager=true</p><pre><code>## 接入限流埋点Sentinel 默认为所有的 HTTP 服务提供了限流埋点。引入依赖后自动完成所有埋点。只需要在控制配置限流规则即可* 注解埋点  如果需要对某个特定的方法进行限流或降级，可以通过 @SentinelResource 注解来完成限流的埋点``` java@SentinelResource(&quot;resource&quot;)@RequestMapping(&quot;/sentinel/hello&quot;)public Map&lt;String,Object&gt; hello(){        Map&lt;String,Object&gt; map=new HashMap&lt;&gt;(2);        map.put(&quot;appName&quot;,appName);        map.put(&quot;method&quot;,&quot;hello&quot;);        return map;}</code></pre><h2 id="部署Sentinel控制台"><a href="#部署Sentinel控制台" class="headerlink" title="部署Sentinel控制台"></a>部署Sentinel控制台</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="http://edas-public.oss-cn-hangzhou.aliyuncs.com/install_package/demo/sentinel-dashboard.jar" target="_blank" rel="noopener">Sentinel下载</a></p><h3 id="启动控制台"><a href="#启动控制台" class="headerlink" title="启动控制台"></a>启动控制台</h3><p>执行 Java 命令 <code>java -jar sentinel-dashboard.jar</code> 默认的监听端口为 <code>8080</code></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>打开<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 即可看到控制台界面<br><img src="https://images.gitee.com/uploads/images/2019/0128/142828_12667ffe_1478371.png" alt="输入图片说明"><br>说明cloud-sentinel已经成功和Sentinel完成率通讯</p><h2 id="配置限流规则"><a href="#配置限流规则" class="headerlink" title="配置限流规则"></a>配置限流规则</h2><p>如果控制台没有找到自己的应用，可以先调用一下进行了 Sentinel 埋点的 URL 或方法或着禁用Sentinel 的赖加载<code>spring.cloud.sentinel.eager=true</code></p><h3 id="配置-URL-限流规则"><a href="#配置-URL-限流规则" class="headerlink" title="配置 URL 限流规则"></a>配置 URL 限流规则</h3><p>控制器随便添加一个普通的http方法</p><pre class=" language-Java"><code class="language-Java">  /**     * 通过控制台配置URL 限流     * @return     */    @RequestMapping("/sentinel/test")    public Map<String,Object> test(){        Map<String,Object> map=new HashMap<>(2);        map.put("appName",appName);        map.put("method","test");        return map;    }</code></pre><p>点击新增流控规则。为了方便测试阀值设为 1<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3lr3c52j31260h2myk.jpg" alt><br>浏览器重复请求 <a href="http://localhost:18084/sentinel/test" target="_blank" rel="noopener">http://localhost:18084/sentinel/test</a> 如果超过阀值就会出现如下界面<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3m94p13j30bn033mx4.jpg" alt></p><p>整个URL限流就完成了。但是返回的提示不够友好。</p><h3 id="配置自定义限流规则-SentinelResource埋点"><a href="#配置自定义限流规则-SentinelResource埋点" class="headerlink" title="配置自定义限流规则(@SentinelResource埋点)"></a>配置自定义限流规则(@SentinelResource埋点)</h3><p>自定义限流规则就不是添加方法的访问路径。 配置的是@SentinelResource注解中value的值。比如<code>@SentinelResource(&quot;resource&quot;)</code>就是配置路径为resource<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3moc9tlj311q0f275h.jpg" alt></p><ul><li>访问：<a href="http://localhost:18084/sentinel/hello" target="_blank" rel="noopener">http://localhost:18084/sentinel/hello</a></li><li>通过<code>@SentinelResource</code>注解埋点配置的限流规则如果没有自定义处理限流逻辑，当请求到达限流的阀值时就返回404页面<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3n57o7yj30ho07qaan.jpg" alt></li></ul><h2 id="自定义限流处理逻辑"><a href="#自定义限流处理逻辑" class="headerlink" title="自定义限流处理逻辑"></a>自定义限流处理逻辑</h2><p>@SentinelResource 注解包含以下属性：</p><ul><li>value: 资源名称，必需项（不能为空）</li><li>entryType: 入口类型，可选项（默认为 EntryType.OUT）</li><li>blockHandler:blockHandlerClass中对应的异常处理方法名。参数类型和返回值必须和原方法一致</li><li><p>blockHandlerClass：自定义限流逻辑处理类<br><code>`</code> java</p><p>//通过注解限流并自定义限流逻辑<br>@SentinelResource(value = “resource2”, blockHandler = “handleException”, blockHandlerClass = {ExceptionUtil.class})<br>@RequestMapping(“/sentinel/test2”)<br>  public Map&lt;String,Object&gt; test2() {</p><pre><code>  Map&lt;String,Object&gt; map=new HashMap&lt;&gt;();  map.put(&quot;method&quot;,&quot;test2&quot;);  map.put(&quot;msg&quot;,&quot;自定义限流逻辑处理&quot;);  return  map;</code></pre><p>  }</p></li></ul><p>public class ExceptionUtil {</p><pre><code>public static Map&lt;String,Object&gt; handleException(BlockException ex) {    Map&lt;String,Object&gt; map=new HashMap&lt;&gt;();    System.out.println(&quot;Oops: &quot; + ex.getClass().getCanonicalName());    map.put(&quot;Oops&quot;,ex.getClass().getCanonicalName());    map.put(&quot;msg&quot;,&quot;通过@SentinelResource注解配置限流埋点并自定义处理限流后的逻辑&quot;);    return  map;}</code></pre><p>}</p><pre><code>控制台新增resource2的限流规则并设置阀值为1。访问http://localhost:18084/sentinel/test2 请求到达阀值时机会返回自定义的异常消息![](http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3nm45lqj30ho07qaan.jpg)基本的限流处理就完成了。 但是每次服务重启后 之前配置的限流规则就会被清空因为是内存态的规则对象.所以下面就要用到Sentinel一个特性ReadableDataSource 获取文件、数据库或者配置中心是限流规则## 读取文件的实现限流规则一条限流规则主要由下面几个因素组成：* resource：资源名，即限流规则的作用对象* count: 限流阈值* grade: 限流阈值类型（QPS 或并发线程数）* limitApp: 流控针对的调用来源，若为 default 则不区分调用来源* strategy: 调用关系限流策略* controlBehavior: 流量控制效果（直接拒绝、Warm Up、匀速排队）  SpringCloud alibaba集成Sentinel后只需要在配置文件中进行相关配置，即可在 Spring 容器中自动注册 DataSource，这点很方便。配置文件添加如下配置``` bash#通过文件读取限流规则spring.cloud.sentinel.datasource.ds1.file.file=classpath: flowrule.jsonspring.cloud.sentinel.datasource.ds1.file.data-type=jsonspring.cloud.sentinel.datasource.ds1.file.rule-type=flow</code></pre><p>在resources新建一个文件 比如flowrule.json 添加限流规则</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token string">"resource"</span><span class="token punctuation">:</span> <span class="token string">"resource"</span><span class="token punctuation">,</span>    <span class="token string">"controlBehavior"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"grade"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"limitApp"</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token string">"strategy"</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token string">"resource"</span><span class="token punctuation">:</span> <span class="token string">"resource3"</span><span class="token punctuation">,</span>    <span class="token string">"controlBehavior"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"grade"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"limitApp"</span><span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token string">"strategy"</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p> <strong>重新启动项目。出现如下日志说明文件读取成功</strong> </p><pre class=" language-Java"><code class="language-Java"> [Sentinel Starter] DataSource ds1-sentinel-file-datasource start to loadConfig [Sentinel Starter] DataSource ds1-sentinel-file-datasource load 2 FlowRule</code></pre><p> <strong>刷新Sentinel 控制台 限流规则就会自动添加进去</strong><br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3o3r1u3j318l063wey.jpg" alt></p><h2 id="Sentinel的基本配置"><a href="#Sentinel的基本配置" class="headerlink" title="Sentinel的基本配置"></a>Sentinel的基本配置</h2><pre class=" language-bash"><code class="language-bash">spring.cloud.sentinel.enabled              <span class="token comment" spellcheck="true">#Sentinel自动化配置是否生效</span>spring.cloud.sentinel.eager               <span class="token comment" spellcheck="true">#取消Sentinel控制台懒加载</span>spring.cloud.sentinel.transport.dashboard   <span class="token comment" spellcheck="true">#Sentinel 控制台地址</span>spring.cloud.sentinel.transport.heartbeatIntervalMs        <span class="token comment" spellcheck="true">#应用与Sentinel控制台的心跳间隔时间</span>spring.cloud.sentinel.log.dir            <span class="token comment" spellcheck="true">#Sentinel 日志文件所在的目录</span></code></pre><ul><li>案例源码：<a href="https://github.com/a870439570/alibaba-cloud" target="_blank" rel="noopener">https://github.com/a870439570/alibaba-cloud</a></li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring cloud alibaba系列(一) 服务注册</title>
      <link href="/2019/01/27/spring-xi-lie/springcloudalibaba-zhi-fu-wu-zhu-ce-fa-xian/"/>
      <url>/2019/01/27/spring-xi-lie/springcloudalibaba-zhi-fu-wu-zhu-ce-fa-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="alibaba-cloud"><a href="#alibaba-cloud" class="headerlink" title="alibaba-cloud"></a>alibaba-cloud</h2><p>本项目演示如何使用 spring cloud alibaba系列之服务的注册于发现</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><ul><li><p>版本 0.2.1.RELEASE 对应的是 Spring Cloud Finchley 版本，</p></li><li><p>版本 0.1.1.RELEASE 对应的是 Spring Cloud Edgware 版本。</p></li><li><p>官方文档目前推荐的SpringBoot 2.0.6.RELEASE版本。如果注册不了一般都是版本不对。可以去官方文档查看对应的版本<br>如果需要使用已发布的版本，在 <code>dependencyManagement</code> 中添加如下配置。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>      <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>          <span class="token operator">&lt;</span>dependency<span class="token operator">></span>              <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>              <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>alibaba<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>              <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>              <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>              <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span></code></pre></li></ul><p>然后在 <code>dependencies</code> 中添加自己所需使用的依赖即可使用。</p><p>如果您想体验最新的 BUILD-SNAPSHOT 的新功能，则可以将版本换成最新的版本，但是需要在 pom.xml 中配置 Spring BUILDSNAPSHOT 仓库，<strong>注意: SNAPSHOT 版本随时可能更新</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>repositories<span class="token operator">></span>    <span class="token operator">&lt;</span>repository<span class="token operator">></span>        <span class="token operator">&lt;</span>id<span class="token operator">></span>spring<span class="token operator">-</span>snapshot<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>Spring Snapshot Repository<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>url<span class="token operator">></span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>repo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>io<span class="token operator">/</span>snapshot<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>        <span class="token operator">&lt;</span>snapshots<span class="token operator">></span>            <span class="token operator">&lt;</span>enabled<span class="token operator">></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>enabled<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>snapshots<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>repository<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>repositories<span class="token operator">></span></code></pre><h2 id="服务的注册发现-Nacos-Discovery"><a href="#服务的注册发现-Nacos-Discovery" class="headerlink" title="服务的注册发现(Nacos Discovery)"></a>服务的注册发现(Nacos Discovery)</h2><p>Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<br>如何使用Nacos Discovery Starter 完成 Spring Cloud 应用的服务注册与发现</p><h3 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h3><p>新建一个项目 cloud-client</p><ol><li>引入Nacos Discovery Starter</li></ol><pre class=" language-java"><code class="language-java">      <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>alibaba<span class="token operator">-</span>nacos<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><ol start="2"><li><p>配置Nacos Server地址</p><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>18082<span class="token comment" spellcheck="true">#服务名称</span>spring.application.name<span class="token operator">=</span>cloud-client<span class="token comment" spellcheck="true">#Nacos Server 地址</span>spring.cloud.nacos.discovery.server-addr<span class="token operator">=</span>127.0.0.1:8848</code></pre></li><li><p>启动类上使用 @EnableDiscoveryClient 注解开启服务注册与发现功能</p></li></ol><p>4 下载 Nacos Server ：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><ol start="5"><li>启动 Server</li></ol><ul><li>Linux/Unix/Mac 操作系统，执行命令 sh startup.sh -m standalone</li><li>Windows 操作系统，执行命令 cmd startup.cmd</li><li><p>访问控制台：<a href="http://127.0.0.1:8848/nacos/index.html" target="_blank" rel="noopener">http://127.0.0.1:8848/nacos/index.html</a>  </p><p><strong>0.8版本默认登录账号的密码nacos/nacos.</strong> </p></li></ul><p><img src="https://images.gitee.com/uploads/images/2019/0124/125758_aa62dddb_1478371.png" alt><br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3p6s8m8j31gq0hzmyy.jpg" alt></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>出现如下信息说明注册到nacos成功<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3psi5jqj313602waao.jpg" alt><br>nacos控制条界面就会出现注册的服务<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3qa9lqzj319p0cgt9k.jpg" alt></p><p>以上步骤向您展示了如何将一个服务注册到 Nacos。</p><h3 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h3><p>新建一个项目 cloud-consumer.配置文件和消费者一样更换下端口即可。</p><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>18083spring.application.name<span class="token operator">=</span>service-consumer<span class="token comment" spellcheck="true">#Nacos Server 地址</span>spring.cloud.nacos.discovery.server-addr<span class="token operator">=</span>127.0.0.1:8848management.endpoints.web.exposure.include<span class="token operator">=</span>*</code></pre><p>启动类同样添加@EnableDiscoveryClient 注册到nacos</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloudConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>CloudConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实例化 RestTemplate 实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>新建一个 ConsumerController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancerClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.application.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String appName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过带有负载均衡的RestTemplate 和 FeignClient 也是可以访问的     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/echo/app-name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">echoAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用 LoadBalanceClient 和 RestTemolate 结合的方式来访问</span>        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"service-provider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"http://%s:%s/echo/%s"</span><span class="token punctuation">,</span>serviceInstance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>serviceInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>appName<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"request url:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分别启动cloud-client和cloud-consumer刷新nacos<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3qvbu7aj313d04cq30.jpg" alt><br>两个服务都注册成功</p><p>##测试<br>访问 <a href="http://127.0.0.1:18083/echo/app-name" target="_blank" rel="noopener">http://127.0.0.1:18083/echo/app-name</a> 消费者输出访问日志说明请求成功</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3rccxb6j30if02ywek.jpg" alt></p><p>浏览器出现 第一个Nacos 程序service-consumer 到此Over 基于Nacos实现的服务注册发现已经调用就到此为止。入门还是很简单的 阿里巴巴大法好！</p><h3 id="Nacos更多配置信息"><a href="#Nacos更多配置信息" class="headerlink" title="Nacos更多配置信息"></a>Nacos更多配置信息</h3><pre class=" language-bash"><code class="language-bash">spring.cloud.nacos.discovery.server-addr  <span class="token comment" spellcheck="true">#Nacos Server 启动监听的ip地址和端口</span>spring.cloud.nacos.discovery.service  <span class="token comment" spellcheck="true">#给当前的服务命名</span>spring.cloud.nacos.discovery.weight  <span class="token comment" spellcheck="true">#取值范围 1 到 100，数值越大，权重越大</span>spring.cloud.nacos.discovery.network-interface <span class="token comment" spellcheck="true">#当IP未配置时，注册的IP为此网卡所对应的IP地址，如果此项也未配置，则默认取第一块网卡的地址</span>spring.cloud.nacos.discovery.ip  <span class="token comment" spellcheck="true">#优先级最高</span>spring.cloud.nacos.discovery.port  <span class="token comment" spellcheck="true">#默认情况下不用配置，会自动探测</span>spring.cloud.nacos.discovery.namespace <span class="token comment" spellcheck="true">#常用场景之一是不同环境的注册的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</span>spring.cloud.nacos.discovery.access-key  <span class="token comment" spellcheck="true">#当要上阿里云时，阿里云上面的一个云账号名</span>spring.cloud.nacos.discovery.secret-key <span class="token comment" spellcheck="true">#当要上阿里云时，阿里云上面的一个云账号密码</span>spring.cloud.nacos.discovery.metadata    <span class="token comment" spellcheck="true">#使用Map格式配置，用户可以根据自己的需要自定义一些和服务相关的元数据信息</span>spring.cloud.nacos.discovery.log-name   日志文件名spring.cloud.nacos.discovery.enpoint   <span class="token comment" spellcheck="true">#地域的某个服务的入口域名，通过此域名可以动态地拿到服务端地址</span>ribbon.nacos.enabled  <span class="token comment" spellcheck="true">#是否集成Ribbon 一般都设置成true即可</span></code></pre><p> <strong>Demmo源码：<a href="https://github.com/a870439570/alibaba-cloud" target="_blank" rel="noopener">https://github.com/a870439570/alibaba-cloud</a></strong> </p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
            <tag> alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot版的JVM检控工具</title>
      <link href="/2019/01/26/spring-xi-lie/springboot-ban-de-jvm-jian-kong-gong-ju/"/>
      <url>/2019/01/26/spring-xi-lie/springboot-ban-de-jvm-jian-kong-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>基于SpringBoot2.0 实现的jvm远程监工图形化工具，可以同时监控多个web应用</li><li>该项目是借鉴另个一开源项目 （ JavaMonitor） <a href="https://gitee.com/zyzpp/JavaMonitor" target="_blank" rel="noopener">https://gitee.com/zyzpp/JavaMonitor</a> 演变而来，剔除了一些功能，增加了可远程监控模块，只需要在需要监控的项目集成监控的jar包 并设置可访问的IP（默认为空 则不拦截IP访问） 就可以实现远程监控,和用户管理模块,动态定时任务<br>支付windows服务器和Linux服务监控,Mac还未测试 应该也支持 </li></ul><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><ol><li>boot-actuator  需要监控的项目demo</li><li>actuator-service  监控端点jar包 需要引入到需要监控的项目中（已打包好上传）</li><li>boot-monitor    监监控图形化工程</li><li>Sql文件  /boot-monitor/src/main/resources/db/actuator.sql</li></ol><h2 id="部署文档"><a href="#部署文档" class="headerlink" title="部署文档"></a><a href="https://a870439570.github.io/work-doc/actuator/" target="_blank" rel="noopener">部署文档</a></h2><ul><li><a href="https://a870439570.github.io/work-doc/actuator/" target="_blank" rel="noopener">https://a870439570.github.io/work-doc/actuator/</a></li></ul><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/a870439570/boot-actuator" target="_blank" rel="noopener">https://github.com/a870439570/boot-actuator</a></p><h2 id="部分效果图如下"><a href="#部分效果图如下" class="headerlink" title="部分效果图如下"></a>部分效果图如下</h2><h3 id="监控列表主页-增加应用，删除应用"><a href="#监控列表主页-增加应用，删除应用" class="headerlink" title="监控列表主页  增加应用，删除应用"></a>监控列表主页  增加应用，删除应用</h3><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3j279phj31ef0omjy6.jpg" alt></p><h3 id="监控详情"><a href="#监控详情" class="headerlink" title="监控详情"></a>监控详情</h3><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3jt5wz1j31dh0ohafa.jpg" alt></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM+脑图</title>
      <link href="/2019/01/25/java/shen-ru-li-jie-jvm-nao-tu/"/>
      <url>/2019/01/25/java/shen-ru-li-jie-jvm-nao-tu/</url>
      
        <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g31rss95j30mj0afgnc.jpg" alt="深入理解JVM脑图"></p><h2 id="1-运行时数据区域"><a href="#1-运行时数据区域" class="headerlink" title="1. 运行时数据区域"></a>1. 运行时数据区域</h2><ul><li>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域有各自的用途,以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g327ko68j30g20anab3.jpg" alt></p><ul><li>线程私有的：虚拟机栈，本地方法栈，程序计数器</li><li>线程共享的 方法区，堆</li></ul><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul><li>程序计数器是一块较小的内存空间,它的作用可以看作是当前线程所执行的字节码行号指示器，在虚拟机的概念模型里，字节码解释器工作时 就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支,循环,跳转,异常处理,线程恢复等基础功能都需要这个计数器来完成。（如果正在执行的是本地方法则计数器为空）。</li></ul><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><ul><li>虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会创建一个栈帧用于存储局部变量表，操作栈，动态链接，方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。</p><h3 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h3><ul><li><code>Java</code> 堆是整个虚拟机所管理的最大内存区域，所有的对象创建都是在这个区域进行内存分配。</li><li>这块区域也是垃圾回收器重点管理的区域，由于大多数垃圾回收器都采用<code>分代回收算法</code>，所有堆内存也分为 <code>新生代</code>、<code>老年代</code>，可以方便垃圾的准确回收。</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li>方法区主要用于存放已经被虚拟机加载的类信息，如<code>常量，静态变量</code>，即时编译器编译后的代码等。和Java堆一样不需要连续的内存，并且可以动态扩展。</li><li>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</li></ul><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><ul><li>运行时常量池是方法区的一部分。class文件除了有类的版本，字段，方法，接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，会在类加载后放入这个区域。</li></ul><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><ul><li>直接内存并不是虚拟机运行时数据区域的一部分。</li><li>在 JDK 1.4 中新加入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过 Java堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在堆内存和堆外内存来回拷贝数据。</li></ul><h2 id="2-Minor-GC和Full-GC"><a href="#2-Minor-GC和Full-GC" class="headerlink" title="2. Minor GC和Full GC"></a>2. Minor GC和Full GC</h2><ul><li>Minor GC：指发生在新生代的垃圾收集动作，因为 Java 对象大多都具<br>备朝生夕灭的特性，所以<code>Minor GC</code> 非常频繁，一般回收速度也比较快。</li><li>Major GC或Full GC：指发生在老年代的 GC，出现了 Major GC，经常<br>会伴随至少一次的 Minor GC（但非绝对的，在 ParallelScavenge 收集器的收集策略里<br>就有直接进行 <code>Major GC</code> 的策略选择过程） 。<code>MajorGC</code> 的速度一般会比 Minor GC 慢 10<br>倍以上。</li></ul><h3 id="Minor-GC触发机制"><a href="#Minor-GC触发机制" class="headerlink" title="Minor GC触发机制"></a>Minor GC触发机制</h3><p>当年轻代满时就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC</p><h3 id="Full-GC触发机制："><a href="#Full-GC触发机制：" class="headerlink" title="Full GC触发机制："></a>Full GC触发机制：</h3><ul><li>当年老代满时会引发Full GC，Full GC将会同时回收年轻代、年老代，</li><li>当永久代满时也会引发Full GC，会导致Class、Method元信息的卸载</li></ul><h2 id="3-Java中的四种引用"><a href="#3-Java中的四种引用" class="headerlink" title="3. Java中的四种引用"></a>3. Java中的四种引用</h2><p>强引用,软引用,弱引用,虚引用</p><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>就是指在程序代码中普遍存在的，类似Object obj=new Object()这类的引用，只要强引用还存在，垃圾回收期永远不会回收掉被引用的对象</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>用来描述一些还有用，但并非必须的对象。对于软引用关联着的对象，在系统将要发生内存溢出前，将会把这些对象列进回收范围之内并进行第二次回收，如果这此次回收还是没有足够的内存，才会抛出内存溢出。</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>用来描述非必须的对象，但是它的强度比软引用更弱一下，被弱引用关联的对象，只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，只会回收被弱引用关联的对象</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>被称为幽灵引用或幻引用，是最弱的一种引用关系，一个对象是否有虚引用的存在，完全不会对其它生存时间构成影响，也无法通过虚引用来取得一个实列。为一个对象设置虚引用的目的就是在对象被回收时收到一个系统通知。</p><h2 id="4-垃圾收集算法"><a href="#4-垃圾收集算法" class="headerlink" title="4. 垃圾收集算法"></a>4. 垃圾收集算法</h2><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><ul><li>一个单线程的收集器，只会使用一个CPU或一条收集线程去完成垃圾收集工作。在进行垃圾收集时必须暂停其它所有的工作线程，直接到结束。(Stop The Word)这项工作是虚拟机在后台自动发起和完成的。</li><li>JDK1.3之前是新生代收集的唯一选择。</li><li>它依然是虚拟机运行在Client模式下的默认新手代收集器，简单而高效。</li></ul><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p>Serial收集器的多线程版本，使用多条线程收集。其余的和Serial一样，是许多运行在Server模式下的虚拟机首选新生代收集器。且目前除了Serial收集器，只有它可以与CMS收集器配合工作</p><h3 id="3-Parallel-Scavenge收集器"><a href="#3-Parallel-Scavenge收集器" class="headerlink" title="3.Parallel Scavenge收集器"></a>3.Parallel Scavenge收集器</h3><ul><li>它是一款新生代收集器。使用复制算法收集，又是并行的多线程收集器</li><li>特点是达到一个可控制的吞吐量，也被称为“吞吐量优先”收集器。</li></ul><h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><ul><li>它是Serial收集器的老年代版本，是一个单线程收集器，使用标记-整理算法收集。</li><li>主要意义是给Client模式下虚拟机使用。如果是Server模式，则有两种用途，一是在JDK1.5之前与Parallel Scavenge收集器搭配使用。二是作为CMS收集器的后背预案</li></ul><h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><p>它是Parallel Scavenge收集器的老年代版本，使用多线程和标记-整理算法。JDK1.6才开始提供。</p><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><ul><li>是一种以获取最短回收停顿时间的为目标的收集器。基于标记-清楚算法实现。</li><li>运作过程分为四个阶段。初始标记,并发标记,重新标记,并发清除。</li><li>初始标记和并发标记仍然需要”Stop The Word”.初始标记只是记录下GC Roots能直接关联到对象，速度快。并发标记就是进行GC Roots Tracing过程。重新标记修正并发标记期间因程序继续运作导致标记产生变动的一部分对象的标记记录。整个过程耗时最长是并发标记和并发清除过程。</li><li>优点是并发收集，低停顿。缺点是：对CPU资源非常敏感，无法处理浮动垃圾。收集结束时会产生大量空间碎片</li></ul><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><ul><li>当前收集器技术最前沿成果之一。将整个Java堆分为多个大小相等的独立区域。虽然保留新生代和老年代，但它们不再是物理隔离，都是一部分不需要连续的集合。</li><li>特点是并行与并发充分利用CPU缩短停顿时间。分代收集，空间整合不会产生内存空间碎片，可预测的停顿。有计划的避免回收整个Java堆。</li><li>运行大致分为:初始标记,并发标记,最终标记,筛选回收。</li></ul><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><ul><li><p>算法分为标记和清除两个阶段。首先先标记所有要被回收的对象，标记完成后再统一清除被标记的对象。</p><p><strong>主要缺点有两个，</strong> </p></li><li>一是效率问题，标记和清除的过程效率都不高。二是空间问题，标记清除后会产生大量不连续的内存碎片，空间碎片太多,可能会导致，当程序在以后的运行过程中需要分配较大的对象时无法找到足够的连续内存，而不得不提前出发另一次垃圾收集动作</li></ul><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><ul><li>为了解决效率问题，一种复制收集的算法出现了。它将可用内存按容量划分为大小相等的两块，每次只用其中的一块。当这一块内存用完，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对其中一块进行内存回收，内存分配时也就不用内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为原来的一半未免太高了一点。</li></ul><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><ul><li>复制手机算法在对象存活率较高的时要执行多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要额外的空间进行分配担保，以应对被使用的内存中对象都100%存货的极端情况，所以在老年代一般不能直接选用这种算法。根据老年代的特点，有人提出了另一种 标记-整理的算法，标记过程仍然与 标记-清楚算法一样。但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存</li></ul><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><ul><li>根据对象的存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外空间对它进行分配担保，就必须使用标记-清理或标记-整理算法来进行回收</li></ul><h2 id="5-内存分配与回收策略"><a href="#5-内存分配与回收策略" class="headerlink" title="5. 内存分配与回收策略"></a>5. 内存分配与回收策略</h2><ul><li>对象的内存分配，往大方向讲，就是在堆上分配，对象主要分配在新生代的Eden区上，如果启动本地线程分配缓冲，将按线程的优先级在TLAB上分配。少数情况也可能分配在老年代中，分配的规则并不是百分之白固定，其细节取决于当前使用的是哪一种垃圾回收期组合，还有虚拟机中于内存相关的参数设置。</li></ul><h3 id="对象优先在Eden区分配"><a href="#对象优先在Eden区分配" class="headerlink" title="对象优先在Eden区分配"></a>对象优先在Eden区分配</h3><p>对象通常在新生代的Eden区进行分配，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC，与Minor GC对应的是Major GC、Full GC。</p><ul><li>Minor GC:指发生在新生代的垃圾收集动作，非常频繁，速度较快。</li><li>Major GC:指发生在老年代的GC，出现Major GC，经常会伴随一次Minor GC，同时Minor GC也会引起Major GC，一般在GC日志中统称为GC，不频繁。</li><li>Full GC:指发生在老年代和新生代的GC，速度很慢，需要Stop The World。</li></ul><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><ul><li>需要大量连续内存空间的Java对象称为大对象，大对象的出现会导致提前触发垃圾收集以获取更大的连续的空间来进行大对象的分配。虚拟机提供了-XX:PretenureSizeThreadshold参数来设置大对象的阈值，超过阈值的对象直接分配到老年代。</li></ul><h3 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h3><ul><li>每个对象有一个对象年龄计数器，与前面的对象的存储布局中的GC分代年龄对应。对象出生在Eden区、经过一次Minor GC后仍然存活，并能够被Survivor容纳，设置年龄为1，对象在Survivor区每次经过一次Minor GC，年龄就加1，当年龄达到一定程度（默认15），就晋升到老年代，虚拟机提供了-XX:MaxTenuringThreshold来进行设置。</li></ul><h3 id="动态对象年龄判断"><a href="#动态对象年龄判断" class="headerlink" title="动态对象年龄判断"></a>动态对象年龄判断</h3><ul><li>对象的年龄到达了MaxTenuringThreshold可以进入老年代，同时，如果在survivor区中相同年龄所有对象大小的总和大于survivor区的一半，年龄大于等于该年龄的对象就可以直接进入老年代。无需等到MaxTenuringThreshold中要求的年龄。</li></ul><p>具体代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllocationTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     *     -Xms20M -Xmx20M -Xmn10M         -XX:SurvivorRatio=8         -XX:+PrintGCDetails        -XX:+UseSerialGC        -XX:MaxTenuringThreshold=15        -XX:+PrintTenuringDistribution     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testTenuringThreshold2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> null<span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">testPretenureSizeThreshold2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><ul><li>发生Minor GC时，虚拟机会检查老年代连续的空闲区域是否大于新生代所有对象的总和，若成立，则说明Minor GC是安全的，否则，虚拟机需要查看HandlePromotionFailure的值，看是否运行担保失败，若允许，则虚拟机继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，若大于，将尝试进行一次Minor GC；若小于或者HandlePromotionFailure设置不运行冒险，那么此时将改成一次Full GC，以上是JDK Update 24之前的策略，之后的策略改变了，只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行Full GC。</li><li>冒险是指经过一次Minor GC后有大量对象存活，而新生代的survivor区很小，放不下这些大量存活的对象，所以需要老年代进行分配担保，把survivor区无法容纳的对象直接进入老年代。</li></ul><h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><ul><li>很多人任务方法区是没有垃圾回收的，Java虚拟机规范中确实说过可以不要求虚拟机在方法区实现垃圾收集，而在方法去进行垃圾收集的性价比一般比较低，在堆中，由其是在新生代中，常规应用进行一次垃圾收集一般可以回收70%~96%的空间，而永久代的垃圾收集效率远低于此。</li><li>永久代的垃圾主要回收两部分内容：废弃常量和无用的类。</li><li>回收废弃常量于回收<code>Java堆</code>中的对象非常相似。以常量池中字面量的回收为列，假如一个字符串“<code>abc</code>“已经进入常量池中，但是当前系统没有任何一个String对象叫做”<code>abc</code>“的，换句话就是没有任何Sting对象引用常量池中的”abc”,也没有其它地方引用了这个字面变量，如果这时候发生内存回收，而且必要的话，这个“<code>abc</code>“常量就会被系统请出常量池，常量池中的其它类，接口，方法，字段的符号引用也与此类似。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g333ghndj30mx04x415.jpg" alt></p><h3 id="Java中对象访问是如何进行的"><a href="#Java中对象访问是如何进行的" class="headerlink" title="Java中对象访问是如何进行的"></a>Java中对象访问是如何进行的</h3><ul><li><p>对象访问在Java中无处不在，即时是最简单的访问也会涉及到Java栈，Java堆，方法区这三个最重要的内存区域之间的关系。</p><pre class=" language-java"><code class="language-java">Object obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>假设这段代码出现在方法体中， 那吗“<code>Object obj</code>”这部分的语义将会反应到<code>Java栈</code>的本地变量中，作为一个<code>reference</code>类型数据出现。而“<code>new Object()</code>”这部分的语义将会反应到<code>Java堆</code>中,形成一块存储了Object类型所有实例数据值的结构化内存，根据具体类型以及虚拟机实现的对象内存布局的不同，这块内存的长度是不固定的。</p></li><li>另外，在Java堆中还必须包含能查找到此对象类型数据（如对象类型，父亲，实现的接口，方法等）的地址消息，这些类型数据则存储在方法区中。</li></ul><h3 id="怎样判断对象是否存活"><a href="#怎样判断对象是否存活" class="headerlink" title="怎样判断对象是否存活"></a>怎样判断对象是否存活</h3><ul><li>是否使用引用计数法？很多判断对象存活的算法是这样的，给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，当引用失效时，计数器减1；</li><li>任何时刻计数器都为0的对象就是不可能再被使用的。客观的来说，引用计数法的实现简单，判定效率也很高，在大部分情况下是一个不错的算法，也有一些著名的案例，列如微软的COM技术，但是，在Java语言中没有选用引用技术发来管理内存，其中最主要的原因是因为它很难解决对象之间的互循环引用问题。</li></ul><blockquote><p>摘抄自&lt;&lt;深入理解Java虚拟机&gt;&gt;一书中的原话</p><ul><li>根搜索算法：Java是使用根搜索算法判断对象是否存活的。</li><li>这个算法的思路就是通过一系列的名为“GC roots”的对象作为起点，从这些节点开始向下搜索，搜索走过的路径称为引用链，当一个对象的GC roots没有任何引用链相连时，则证明此对象是不可用的。如下图所示，对象object5,object6,object7虽然相互关联，但是他们的GC roots是不可达到的，所以它们将会被判定是可回收的对象。</li></ul></blockquote><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g33qxpsmj30fu0c2tay.jpg" alt></p><h3 id="作为GC-roots的几种对象"><a href="#作为GC-roots的几种对象" class="headerlink" title="作为GC roots的几种对象"></a>作为GC roots的几种对象</h3><ul><li>虚拟机栈(栈中的本地变量表)中的引用对象。</li><li>方法区中的类静态属性引用对象。</li><li>方法区中的常量引用的对象。</li><li>本地方法中JNI（即一般说的native方法）的引用的对象。</li></ul><h2 id="6-虚拟机类加载机制"><a href="#6-虚拟机类加载机制" class="headerlink" title="6. 虚拟机类加载机制"></a>6. 虚拟机类加载机制</h2><h3 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h3><ul><li><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备(Preparation)、解析(Resolution)、初始化(Initialization)、使用(Using)和卸载(Unloading)7个阶段。其中准备、验证、解析3个部分统称为连接（Linking）<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g36ub9ibj30hf06774b.jpg" alt></p></li><li><p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（也称为动态绑定或晚期绑定）。</p></li></ul><h3 id="何时开始类加载的第一个阶段"><a href="#何时开始类加载的第一个阶段" class="headerlink" title="何时开始类加载的第一个阶段"></a>何时开始类加载的第一个阶段</h3><ul><li>java虚拟机规范中并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于初始阶段，虚拟机规范则是严格规定了有且只有5种情况必须立即对类进行初始化（而加载，验证，准备自然需要再次之前开始）</li></ul><ol><li>遇到<code>new,getstatic,pustatic</code>或<code>invokestatic</code>这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见Java代码场景是：使用new关键字实例化对象，读取或设置一个类的静态字段（被final修饰，已在编译器把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。</li><li>对类进行反射调用时，如果类没有进行过初始化，则需要先触发其初始化。</li><li>当初始化一个类时，如果发现父类还没有初始化，则需要先触发父类初始化。</li><li>当虚拟机启动时，用户指定一个执行的主类，虚拟机会先初始化这个主类。</li><li>当使用jdk1.7动态语言支持时,如果一个实例最后解析结果REF_getStatic,REF_putStatic,REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li></ol><h3 id="什么是被动引用"><a href="#什么是被动引用" class="headerlink" title="什么是被动引用"></a>什么是被动引用</h3><p>一个类进行主动引用时会执行初始化。所有引用类的方式多不会触发初始化称为被动引用。</p><ul><li>通过子类调用父类的静态字段，不会导致子类初始化，只会触发父类的初始化。</li><li>通过数组定义的引用类，不会触发此类的初始化。</li><li>常量在编译阶段会存入调用类的常量池中，因此不会触发定义常量的类初始化。</li></ul><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><h4 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h4><p>在加载阶段（可以参考java.lang.ClassLoader的loadClass()方法），虚拟机需要完成以下3件事情：</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流（并没有指明要从一个Class文件中获取，可以从其他渠道，譬如：网络、动态生成、数据库等）；</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构；</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口；</li></ul><p>加载阶段和连接阶段（Linking）的部分内容（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段之中进行的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。</p><h4 id="2-验证"><a href="#2-验证" class="headerlink" title="2.验证"></a>2.验证</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。 </p><p> <strong>验证阶段大致会完成4个阶段的检验动作：</strong> </p><ol><li>文件格式验证：验证字节流是否符合Class文件格式的规范；例如：是否以魔术0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li><li>元数据验证：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。</li><li>字节码验证：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的</li><li>符号引用验证：确保解析动作能正确执行。</li></ol><p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用-Xverifynone参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p><h4 id="3-准备"><a href="#3-准备" class="headerlink" title="3.准备"></a>3.准备</h4><ul><li>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。这时候进行内存分配的仅包括类变量（被static修饰的变量），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在堆中。其次，这里所说的初始值“通常情况”下是数据类型的零值，假设一个类变量的定义为：</li></ul><pre><code>public static int value=123;</code></pre><ul><li>那变量value在准备阶段过后的初始值为0而不是123.因为这时候尚未开始执行任何java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器()方法之中，所以把value赋值为123的动作将在初始化阶段才会执行。 </li><li>至于“特殊情况”是指：public static final int value=123，即当类字段的字段属性是ConstantValue时，会在准备阶段初始化为指定的值，所以标注为final之后，value的值在准备阶段初始化为123而非0.</li></ul><h4 id="4-解析"><a href="#4-解析" class="headerlink" title="4.解析"></a>4.解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。</p><h4 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a>5.初始化</h4><ul><li>如果一个类被主动引用，就会触发类的初始化。</li><li>在java中，直接引用的情况有，通过new关键字实例化对象、读取或设置类的静态变量、调用类的静态方法。通过反射方式执行以上三种行为。初始化子类的时候，会触发父类的初始化。作为程序入口直接运行时（也就是直接调用main方法）。除了以上四种情况，其他使用类的方式叫做被动引用，而被动引用不会触发类的初始化<h4 id="6-使用"><a href="#6-使用" class="headerlink" title="6.使用"></a>6.使用</h4></li><li>类的使用包括主动引用和被动引用</li><li>被动引用：引用父类的静态字段，只会引起父类的初始化，而不会引起子类的初始化。定义类数组，不会引起类的初始化。引用类的常量，不会引起类的初始化。<h4 id="7-卸载"><a href="#7-卸载" class="headerlink" title="7.卸载"></a>7.卸载</h4></li><li>满足下面的情况，类就会被卸载：该类所有的实例都已经被回收，也就是java堆中不存在该类的任何实例。加载该类的ClassLoader已经被回收。该类对应的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。</li><li>如果以上三个条件全部满足，jvm就会在方法区垃圾回收的时候对类进行卸载，类的卸载过程其实就是在方法区中清空类信息，java类的整个生命周期就结束了。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>对象基本上都是在jvm的堆区中创建，在创建对象之前，会触发类加载（加载、连接、初始化），当类初始化完成后，根据类信息在堆区中实例化类对象，初始化非静态变量、非静态代码以及默认构造方法，当对象使用完之后会在合适的时候被jvm垃圾收集器回收。</li><li>对象的生命周期只是类的生命周期中使用阶段的主动引用的一种情况（即实例化类对象）。而类的整个生命周期则要比对象的生命周期长的多。</li></ul><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><ul><li>jvm（java虚拟机）中的几个比较重要的内存区域，这几个区域在java类的生命周期中扮演着比较重要的角色：</li></ul><ol><li>方法区：在java的虚拟机中有一块专门用来存放已经加载的类信息、常量、静态变量以及方法代码的内存区域，叫做方法区。</li><li>常量池：常量池是方法区的一部分，主要用来存放常量和类中的符号引用等信息。</li><li>堆区：用于存放类的对象实例。</li><li>栈区：也叫java虚拟机栈，是由一个一个的栈帧组成的后进先出的栈式结构，栈桢中存放方法运行时产生的局部变量、方法出口等信息。当调用一个方法时，虚拟机栈中就会创建一个栈帧存放这些数据，当方法调用完成时，栈帧消失，如果方法中调用了其他方法，则继续在栈顶创建新的栈桢。</li></ol><ul><li><p>当我们编写一个java的源文件后，经过编译会生成一个后缀名为class的文件，这种文件叫做字节码文件，只有这种字节码文件才能够在java虚拟机中运行，java类的生命周期就是指一个class文件从加载到卸载的全过程</p></li><li><p>一个java类的完整的生命周期会经历加载、连接、初始化、使用、和卸载五个阶段，当然也有在加载或者连接之后没有被初始化就直接被使用的情况</p></li></ul><p>![](<a href="https://gitee.com/uploads/images/2018/0704/125820_a13e503b_1478371.png" target="_blank" rel="noopener">https://gitee.com/uploads/images/2018/0704/125820_a13e503b_1478371.png</a> “</p><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ul><li>通过一个类的全限定名来获取描述此类的二进制字节流,这个动作放到java虚拟机外部去实现。以便让应用程序自己决定如何去获取所需要的类。实现各动作的代码模块称为“类加载器”。</li><li>比较两个类是否相等，只有这两个类是由同一个类加载器加载的前提下才有意义，否则即使这两个；诶是来源同一个class文件，但类加载器不同，他们也不相等。<h4 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h4>这个类加载器负责放在&lt;JAVA_HOME&gt;\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的类库。用户无法直接使用。</li></ul><h4 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h4><p>这个类加载器由sun.misc.Launcher$AppClassLoader实现。它负责&lt;JAVA_HOME&gt;\lib\ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库。用户可以直接使用。</p><h4 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h4><p>这个类由sun.misc.Launcher$AppClassLoader实现。是ClassLoader中getSystemClassLoader()方法的返回值。它负责用户路径（ClassPath）所指定的类库。用户可以直接使用。如果用户没有自己定义类加载器，默认使用这个</p><h4 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h4><p>用户自己定义的类加载器。</p><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，只有当父加载器在自己的搜索范围内找不到指定的类时（即ClassNotFoundException），子加载器才会尝试自己去加载。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object，它存在在rt.jar中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的Bootstrap ClassLoader进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。</li><li>相反，如果没有双亲委派模型而是由各个类加载器自行加载的话，如果用户编写了一个java.lang.Object的同名类并放在ClassPath中，那系统中将会出现多个不同的Object类，程序将混乱。因此，如果开发者尝试编写一个与rt.jar类库中重名的Java类，可以正常编译，但是永远无法被加载运行。</li></ul><h2 id="7-happens-before原则"><a href="#7-happens-before原则" class="headerlink" title="7. happens-before原则"></a>7. happens-before原则</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>我们无法就所有场景来规定某个线程修改的变量何时对其他线程可见，但是我们可以指定某些规则，这规则就是happens-before，从JDK 5 开始，JMM就使用happens-before的概念来阐述多线程之间的内存可见性。</li><li>在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。<br>happens-before原则非常重要，它是判断数据是否存在竞争、线程是否安全的主要依据，依靠这个原则，我们解决在并发环境下两操作之间是否可能存在冲突的所有问题。下面我们就一个简单的例子稍微了解下happens-before ；</li></ul><pre><code>i = 1;       //线程A执行j = i ;      //线程B执行</code></pre><p>j 是否等于1呢？假定线程A的操作（i = 1）happens-before线程B的操作（j = i）,那么可以确定线程B执行后j = 1 一定成立，如果他们不存在happens-before原则，那么j = 1 不一定成立。这就是happens-before原则的威力。</p><h3 id="原则定义"><a href="#原则定义" class="headerlink" title="原则定义"></a>原则定义</h3><ul><li>如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。 </li><li>两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行。如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。</li></ul><h3 id="规则如下"><a href="#规则如下" class="headerlink" title="规则如下"></a>规则如下</h3><h4 id="程序次序规则"><a href="#程序次序规则" class="headerlink" title="程序次序规则"></a>程序次序规则</h4><p>一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；</p><h4 id="锁定规则"><a href="#锁定规则" class="headerlink" title="锁定规则"></a>锁定规则</h4><p>一个unLock操作先行发生于后面对同一个锁额lock操作；</p><h4 id="volatile变量规则"><a href="#volatile变量规则" class="headerlink" title="volatile变量规则"></a>volatile变量规则</h4><p>对一个变量的写操作先行发生于后面对这个变量的读操作；</p><h4 id="传递规则"><a href="#传递规则" class="headerlink" title="传递规则"></a>传递规则</h4><p>如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</p><h4 id="线程启动规则"><a href="#线程启动规则" class="headerlink" title="线程启动规则"></a>线程启动规则</h4><p>Thread对象的start()方法先行发生于此线程的每个一个动作；</p><h4 id="程中断规则"><a href="#程中断规则" class="headerlink" title="程中断规则"></a>程中断规则</h4><p>对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</p><h4 id="线程终结规则"><a href="#线程终结规则" class="headerlink" title="线程终结规则"></a>线程终结规则</h4><p>线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</p><h4 id="对象终结规则"><a href="#对象终结规则" class="headerlink" title="对象终结规则"></a>对象终结规则</h4><p>一个对象的初始化完成先行发生于他的finalize()方法的开始；</p><h2 id="8-对象"><a href="#8-对象" class="headerlink" title="8. 对象"></a>8. 对象</h2><h3 id="Java中创建对象的5种方式"><a href="#Java中创建对象的5种方式" class="headerlink" title="Java中创建对象的5种方式"></a>Java中创建对象的5种方式</h3><p>使用new关键字 → 调用了构造函数</p><pre><code>Employee emp1 = new Employee();</code></pre><p>使用Class类的newInstance方法→ 调用了构造函数</p><pre><code>&lt;!--使用Class类的newInstance方法创建对象。这个newInstance方法调用无参的构造函数创建对象。--&gt;Employee emp2 = (Employee) Class.forName(&quot;org.programming.mitra.exercises.Employee&quot;).newInstance();</code></pre><p>使用Constructor类的newInstance方法 → 调用了构造函数</p><pre><code>&lt;!--和Class类的newInstance方法很像， java.lang.reflect.Constructor类里也有一个newInstance方法可以创建对象--&gt;Constructor&lt;Employee&gt; constructor = Employee.class.getConstructor();Employee emp3 = constructor.newInstance();</code></pre><p>使用clone方法→ 没有调用构造函数</p><pre><code>&lt;!--无论何时我们调用一个对象的clone方法，jvm就会创建一个新的对象，将前面对象的内容全部拷贝进去。用clone方法创建对象并不会调用任何构造函数。--&gt;&lt;!--要使用clone方法，我们需要先实现Cloneable接口并实现其定义的clone方法--&gt;Employee emp4 = (Employee) emp3.clone();</code></pre><p>使用反序列化→ 没有调用构造函数</p><pre><code>ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;data.obj&quot;));Employee emp5 = (Employee) in.readObject();</code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g354jorrj30830el0sy.jpg" alt="对象的创建"></p><h3 id="Java-对象生命周期"><a href="#Java-对象生命周期" class="headerlink" title="Java 对象生命周期"></a>Java 对象生命周期</h3><p> 对象的整个生命周期大致可以分为7个阶段：</p><h4 id="创建阶段（Creation）"><a href="#创建阶段（Creation）" class="headerlink" title="创建阶段（Creation）"></a>创建阶段（Creation）</h4><pre><code>在创建阶段系统通过下面的几个步骤来完成对象的创建过程1，为对象分配存储空间2，开始构造对象3，从超类到子类对static成员进行初始化4，超类成员变量按顺序初始化，递归调用超类的构造方法5，子类成员变量按顺序初始化，子类构造方法调用一旦对象被创建，并被分派给某些变量赋值，这个对象的状态就切换到了应用阶段</code></pre><h4 id="应用阶段-In-Use"><a href="#应用阶段-In-Use" class="headerlink" title="应用阶段(In Use)"></a>应用阶段(In Use)</h4><pre><code>对象至少被一个强引用持有着</code></pre><h4 id="不可视阶段（Invisible）"><a href="#不可视阶段（Invisible）" class="headerlink" title="不可视阶段（Invisible）"></a>不可视阶段（Invisible）</h4><pre><code>当一个对象处于不可见阶段时，说明程序本身不再持有该对象的任何强引用，虽然该这些引用仍然是存在着的。简单说就是程序的执行已经超出了该对象的作用域了。</code></pre><h4 id="不可到达阶段（Unreachable）"><a href="#不可到达阶段（Unreachable）" class="headerlink" title="不可到达阶段（Unreachable）"></a>不可到达阶段（Unreachable）</h4><pre><code>对象处于不可达阶段是指该对象不再被任何强引用所持有与“不可见阶段”相比，“不可见阶段”是指程序不再持有该对象的任何强引用，这种情况下，该对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。</code></pre><h4 id="可收集阶段（Collected）"><a href="#可收集阶段（Collected）" class="headerlink" title="可收集阶段（Collected）"></a>可收集阶段（Collected）</h4><pre><code>当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。如果该对象已经重写了finalize()方法，则会去执行该方法的终端操作。</code></pre><h4 id="终结阶段（Finalized）"><a href="#终结阶段（Finalized）" class="headerlink" title="终结阶段（Finalized）"></a>终结阶段（Finalized）</h4><pre><code>当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段是等待垃圾回收器对该对象空间进行回收。</code></pre><h4 id="对象空间重新分配阶段"><a href="#对象空间重新分配阶段" class="headerlink" title="对象空间重新分配阶段"></a>对象空间重新分配阶段</h4><pre><code>垃圾回收器对该对象的所占用的内存空间进行回收或者再分配了，则该对象彻底消失了，称之为“对象空间重新分配阶段”。</code></pre><h3 id="对象内存分配"><a href="#对象内存分配" class="headerlink" title="对象内存分配"></a>对象内存分配</h3><p>类加载检查通过后，虚拟机将为新生对象分配内存，对象所需内存大小在类加载完成后可以完全确定，对象内存分配任务就是把一块确定大小的内存从堆中划分出来。</p><h4 id="指针碰撞法"><a href="#指针碰撞法" class="headerlink" title="指针碰撞法"></a>指针碰撞法</h4><ul><li>如果堆中内存是绝对规整的。用过的内存放一边，空闲的放一边，中间放着一个指针作为分界点的指示器，那所分配内存就是把指针向空闲一边移动一段与对象大小相等的距离，即为“指针碰撞”<h4 id="空闲列表法"><a href="#空闲列表法" class="headerlink" title="空闲列表法"></a>空闲列表法</h4></li><li>如果堆中内存不规整，已使用内存和未使用内存相互交错，虚拟机就必须一个列表，记录哪些内存块可用，在分配时从列表中找到一块足够大空间划分给对象，并更新列表上记录，即为“空闲列表”<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4></li><li>选择何种分配方式，由堆是否规整决定，而堆是否规整由采用的垃圾收集器是否有压缩整理功能决定。</li><li>使用Serial，ParNew等带Compactg过程的收集器时，系统采用指针碰撞法</li><li>使用CMS这种基于Mark-Sweep算法的收集器时，系统采用空闲列表法<h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3></li><li>Java程序需要通过栈上的references数据来操作堆上的具体对象。因为referencesz只是指向对象的一个引用，并没有定义这个引用通过何种方式去方位堆中对象的具体位置。所以对象访问方式取决于虚拟机实现而定的。</li><li>目前主流的访问方式有使用句柄和直接指针两种。<h4 id="句柄定位"><a href="#句柄定位" class="headerlink" title="句柄定位"></a>句柄定位</h4>使用句柄访问时，Java堆中会划分出一块内存来作为句柄池，references中存储的就是对象的句柄地址。句柄中包含对象实列数据与类型数据各组的具体地址信息  references-&gt;句柄池-&gt;java堆</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g37jd8gwj30ih0900uu.jpg" alt></p><h4 id="直接指针定位"><a href="#直接指针定位" class="headerlink" title="直接指针定位"></a>直接指针定位</h4><p>如果是直接指针访问，Java堆的布局就必须考虑如何放置访问类型数据相关。</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3817gxxj30kf09bwgj.jpg" alt></p><h4 id="各自优点"><a href="#各自优点" class="headerlink" title="各自优点"></a>各自优点</h4><ul><li>句柄访问最大好处就是references中存储的是稳定的句柄地址，在对象移动(垃圾收集时移动对象是普遍行为)时只会改变句柄中的实列数据指针，references本身不需要修改。</li><li>直接指针访问的最大好处是速度快，节省了一次定位的实时间开销。</li></ul><h2 id="9-常量池总结"><a href="#9-常量池总结" class="headerlink" title="9. 常量池总结"></a>9. 常量池总结</h2><h3 id="全局字符串池"><a href="#全局字符串池" class="headerlink" title="全局字符串池"></a>全局字符串池</h3><p>string pool也有叫做string literal pool</p><ul><li>全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。</li><li>在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。</li></ul><h3 id="class文件常量池"><a href="#class文件常量池" class="headerlink" title="class文件常量池"></a>class文件常量池</h3><p>class constant pool</p><ul><li>我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池(constant pool table)，用于存放编译器生成的各种字面量(Literal)和符号引用(Symbolic References)。 </li><li>字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。</li><li>符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量。类和接口的全限定名，字段的名称和描述符，方法的名称和描述符。</li></ul><p>常量池的每一项常量都是一个表，一共有如下表所示的11种各不相同的表结构数据，这每个表开始的第一位都是一个字节的标志位（取值1-12），代表当前这个常量属于哪种常量类型。 </p><h3 id="运行时常量池（runtime-constant-pool）"><a href="#运行时常量池（runtime-constant-pool）" class="headerlink" title="运行时常量池（runtime constant pool）"></a>运行时常量池（runtime constant pool）</h3><p>当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又是什么时候产生的呢？</p><ul><li>jvm在执行某个类的时候，必须经过加载、连接、初始化，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。</li></ul><p>举个实例来说明一下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>         String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String str3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>         String str4 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String str5 <span class="token operator">=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4 <span class="token operator">==</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>回到上面的那个程序，现在就很容易解释整个程序的内存分配过程了，首先，在堆中会有一个”abc”实例，全局StringTable中存放着”abc”的一个引用值</li><li>然后在运行第二句的时候会生成两个实例，一个是”def”的实例对象，并且StringTable中存储一个”def”的引用值，还有一个是new出来的一个”def”的实例对象 与上面那个是不同的实例</li><li>当在解析str3的时候查找StringTable，里面有”abc”的全局驻留字符串引用，所以str3的引用地址与之前的那个已存在的相同</li><li>str4是在运行的时候调用intern()函数，返回StringTable中”def”的引用值，如果没有就将str2的引用值添加进去，在这里，StringTable中已经有了”def”的引用值了，所以返回上面在new str2的时候添加到StringTable中的 “def”引用值</li><li>上面程序的首先经过编译之后，在该类的class常量池中存放一些符号引用，然后类加载之后，将class常量池中存放的符号引用转存到运行时常量池中，然后经过验证，准备阶段之后，在堆中生成驻留字符串的实例对象（也就是上例中str1所指向的”abc”实例对象），然后将这个对象的引用存到全局String Pool中，也就是StringTable中，最后在解析阶段，要把运行时常量池中的符号引用替换成直接引用，那么就直接查询StringTable，保证StringTable里的引用值与运行时常量池中的引用值一致，大概整个过程就是这样了。</li></ul><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>1.全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。</li><li>2.class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。</li><li>3.运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</li></ul><h3 id="class文件常量池和运行时常量池的关系以及区别"><a href="#class文件常量池和运行时常量池的关系以及区别" class="headerlink" title="class文件常量池和运行时常量池的关系以及区别"></a>class文件常量池和运行时常量池的关系以及区别</h3><ul><li>class文件常量池存储的是当class文件被java虚拟机加载进来后存放在方法区的一些字面量和符号引用，字面量包括字符串，基本类型的常量。</li><li><p>运行时常量池是当class文件被加载完成后，java虚拟机会将class文件常量池里的内容转移到运行时常量池里，在class文件常量池的符号引用有一部分是会被转变为直接引用的，比如说类的静态方法或私有方法，实例构造方法，父类方法，这是因为这些方法不能被重写其他版本，所以能在加载的时候就可以将符号引用转变为直接引用，而其他的一些方法是在这个方法被第一次调用的时候才会将符号引用转变为直接引用的。</p><p><strong>总结：</strong> </p></li><li><p>方法区里存储着class文件的信息和运行时常量池,class文件的信息包括类信息和class文件常量池。</p></li><li><p>运行时常量池里的内容除了是class文件常量池里的内容外，还将class文件常量池里的符号引用转变为直接引用，而且运行时常量池里的内容是能动态添加的。例如调用String的intern方法就能将string的值添加到String常量池中，这里String常量池是包含在运行时常量池里的，但在jdk1.8后，将String常量池放到了堆中。</p></li></ul><h2 id="10-类文件结构"><a href="#10-类文件结构" class="headerlink" title="10. 类文件结构"></a>10. 类文件结构</h2><h3 id="1-class类文件结构"><a href="#1-class类文件结构" class="headerlink" title="1.class类文件结构"></a>1.class类文件结构</h3><ul><li>class 文件结构是一组以8位字节为基础单位的二进制流。存储的内容几乎全部是程序运行的必要数据，无空隙。</li><li>如果需要占用8位字节以上空间的数据，则按照高位在前的方式分割成若干个8位字节进行存储。</li><li>class文件结构采用一种类似C语言体系的伪结构体系，这种伪结构只有无符号数和表两种数据类型。</li></ul><h4 id="魔数与Class文件的版本"><a href="#魔数与Class文件的版本" class="headerlink" title="魔数与Class文件的版本"></a>魔数与Class文件的版本</h4><ul><li>class文件的头4个字节称为魔数，唯一作用是确定这个文件是否为一个能被虚拟机接受的文件。</li><li>魔数值可以自由选择,只要未被广泛使用同事不会引起混淆。</li><li>紧接着魔数的4个字节是class文件版本号，第5和第6个字节是次版本你好，7和8个字节是class文件版本号(java版本号从45开始。jdk7是51.0)</li></ul><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><ul><li>主次版本号之后的是常量池，常量池可以理解为class文件中的资源仓库。</li><li>class文件结构中只有常量的容量技术是从1开始</li><li>常量池主要存放两大类常量：字面量(如文本字符串，finald常量)和符号引用(类和接口的全限定名，字段的名称和描述符，方法的名称和描述符)。</li><li>虚拟机运行时,需从常量池获取对应的符号引用，再在类创建时或运行将诶系会，翻译到哪具体的内存地址中。</li></ul><h4 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h4><p>常量池之后的两个字节代表访问标志，用于识别class是类还是接口，是否为public类型或abstract类型等等。</p><h4 id="类索引-父类缩影与接口索引集合"><a href="#类索引-父类缩影与接口索引集合" class="headerlink" title="类索引,父类缩影与接口索引集合"></a>类索引,父类缩影与接口索引集合</h4><ul><li>这三项按顺序排列在访问标志之后,class文件中由这三项来确定整个类的继承关系。</li><li>类索引用于确定类的全限定名，父类索引用于确定类的父类权限定名。接口索引集合描述类实现了哪些接口</li></ul><h4 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h4><p>用于描述接口或类中声明的变量。字段包裹类级别的变量和实列变量。不包括方法内部声明的局部变量。</p><h4 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h4><p>方法表结构依次包括访问标志,名称索引,描述索引,属性集合.</p><h2 id="11-虚拟机字节码执行引擎"><a href="#11-虚拟机字节码执行引擎" class="headerlink" title="11. 虚拟机字节码执行引擎"></a>11. 虚拟机字节码执行引擎</h2><p>执行引擎是Java虚拟机最核心的组成部分之一。</p><h3 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h3><ul><li>栈帧用于虚拟机进行方法调用和方法执行的数据结构。</li><li>栈帧存储了方法的局部变量表,操作数据栈,动态链接和返回地址等信息。每一个方法从调用开始至执行完成过程,都是在虚拟机中入栈到出栈的过程。</li><li>栈帧需要分配多少内存，不受程序运行时期变量数据影响，取决虚拟机的具体实现。</li></ul><h4 id="1-局部变量表"><a href="#1-局部变量表" class="headerlink" title="1.局部变量表"></a>1.局部变量表</h4><ul><li>一组变量值存储空间,存放方法参数和方法内部的局部变量, 类编译为class文件时就在方法的code属性max_locals中确定了方法局部变量表的最大容量。</li><li>一变量槽”Slot“为最小单位,虚拟机没指明solt的占用内存大小,一般每个solt都可以存放一个boolean,bye,char,short,int,float,reference或returnAddress类的数据(32位或更小物理内存存放)。</li><li>它是建立在线程的堆栈上。是线程私有的数据,所以是线程安全的。</li><li>虚拟机通过索引的方式使用局部变量表。执行方法时,通过局部变量表完成参数值到参数变量列表的过程。如果执行实列方法(非static),变量表中第0位索引的slot默认用户传递方法的引用。</li></ul><h4 id="2-操作数栈"><a href="#2-操作数栈" class="headerlink" title="2.操作数栈"></a>2.操作数栈</h4><ul><li>它是一个后入先出的栈。同局部变量表一样，最大深度在编译时写入到code属性的max_stacks中。</li><li>操作数栈的每一个元素可以是任意的Java数据类型。32位的数据类所占的栈容量为1,64位栈容量2(long,double)</li><li>一个方方法刚开始执行时,操作数栈时空的。在方法执行过程中,通过各种字节码指令往操作数栈写入和提取内容,也就是出栈/入栈操作.</li></ul><h4 id="3-动态链接"><a href="#3-动态链接" class="headerlink" title="3.动态链接"></a>3.动态链接</h4><ul><li>每个栈帧都包含一个指向运行时常量池中该栈所属方法的引用，持有这个引用是为了支持方法调用过程中的动态链接</li></ul><h4 id="4-方法返回地址"><a href="#4-方法返回地址" class="headerlink" title="4.方法返回地址"></a>4.方法返回地址</h4><ul><li>一个方法执行后，只有通过正常完成出口和异常完成出口两种方式退出。</li><li>正常完成出口：当执行引擎遇到一个方法返回的字节码指令</li><li>异常完成出口：方法执行过程中遇到异常且方法中未处理此异常,就会导致方法退出。</li><li>方法正常退出时,调用者的程序计数器的值可以作为返回地址。</li><li>方法退出的过程等于就是把当前栈帧出栈。</li></ul><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><ul><li>方法调用不等于方法执行,方法调用阶段唯一任务就是确定被调用方法的版本。</li><li>一切方法调用在Class文件里存储都只是符号引用,而不是方法在实际运行时内存布中的入口地址(直接引用）。</li></ul><h4 id="1-解析"><a href="#1-解析" class="headerlink" title="1.解析"></a>1.解析</h4><ul><li>所有方法调用重点目标方法在Class文件里都是一个常量池的符号引用,解析阶段会将一部分符号引用转化为直接引用。</li><li>“编译器可知,运行期间不可变”这类方法的调用称为解析.(静态方法和私有方法)</li><li>只要能被invokestatic和invokespecial指令调用的方法，都可以在解析阶段中确定唯一的调用版本.(比如静态方法,私有方法,实列构造器,父类方法)它们在类加载时候会把符号引用解析为该方法的直接引用。</li></ul><h4 id="2-静态分派"><a href="#2-静态分派" class="headerlink" title="2.静态分派"></a>2.静态分派</h4><p>在重载时时通过参数的静态类型而不是实际类型作为判定依据的。并且静态类型是编译可知的。<br>静态分派的典型应用就是方法重载</p><pre><code>//左边是静态类型 右边是实际类型Human man=new Man();Huamn woman=new Woman();</code></pre><h4 id="3-动态分派"><a href="#3-动态分派" class="headerlink" title="3.动态分派"></a>3.动态分派</h4><p>方法的重写就是动态分派的体现。</p><h2 id="12-高效并发"><a href="#12-高效并发" class="headerlink" title="12. 高效并发"></a>12. 高效并发</h2><h3 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h3><ul><li>JAVA内模型规定所有的变量都存储在主内存中，每个线程都有自己的工作内存，线程的工作内存中保存的是当前线程使用到的变量值的副本（主内村拷贝过来的）。</li><li>线程对变量的所有操作都必须在工作内存中进行，不能直接与主内存进行读写交.线程间相互的传值需要通过主内存完成。</li></ul><h3 id="内存间的交互"><a href="#内存间的交互" class="headerlink" title="内存间的交互"></a>内存间的交互</h3><p>JAVA内存模型定义了以下8种操作来完成内存交互工作：</p><ul><li><code>lock</code>(锁定)：作用于主内存的变量。把一个变量标识为一条线程独占的状态。</li><li><code>unlock</code>(解锁)：作用于主内存的变量.把一个处于锁定状态的变量释放出来。</li><li><code>read</code>(读取):作用于主内存的变量。把一个变量值从主内存传输到线程的工作内存中，以便随后的<code>load</code>动作使用。</li><li><code>load</code>(载入):作用于工作内存的变量，它把read操作从主内存中得到的值放入工作内存的变量副本中。</li><li><code>use</code>(使用)：作用与工作内存的变量.它把工作内存中一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时就会执行这个操作。</li><li><code>assign</code>(赋值）:作用于工作内存的变量，它把一个从执行引擎收到的赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li><code>store</code>(存储)：作用于工作内存的变量，它把工作内存中的一个变量的值传送到主内存中，以便随后的wirte操作使用。</li><li><p><code>wirte</code>（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量值放入主内存中。</p><p><strong>上述操作虚拟机实现时保证每一种操作都是原子性的。且比如满足如下规则</strong></p></li><li>不 _允许一个变量从主内存读取但工作内存不接受，或者工作内存发起回写了但主内存不接受的情况出现</li><li>变量在工作内存中改变之后必须把该变化同步回主内存</li><li>一个新的变量必须在主内存中诞生。不允许工作内存直接使用未初始化的变量。</li><li>一个变量同一个时刻只能一条线程进行lock操作，但是lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li><li>如果一个变量执行lock操作,那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作。</li><li>如果一个变量事先没有被lock操作锁定，那将不允许执行unlock操作，也不允许去unlock一个被其它线程锁定住的变量</li><li>对一个变量执行unlock操作之前,必须先把此变量同步回主内存中 </li></ul><h3 id="对于volatile型变量的特殊规则"><a href="#对于volatile型变量的特殊规则" class="headerlink" title="对于volatile型变量的特殊规则"></a>对于volatile型变量的特殊规则</h3><ul><li>volatile是虚拟机提供的最轻量级同步机制。它具备两种特性：保证被修饰的变量对所有线程可见（即可见性）和禁止指令重排序。</li><li>volatile只能保证可见性，不能保证操作运算的原子性。</li><li>运算结果并不依赖变量的当前值时和不需要与其他的状态变量共同参与不变约束时适合使用volatile</li></ul><h3 id="对于long和double型变量的特殊规则"><a href="#对于long和double型变量的特殊规则" class="headerlink" title="对于long和double型变量的特殊规则"></a>对于long和double型变量的特殊规则</h3><ul><li>对于64位的数据类型long和double,在内存模型中有一条相对宽松的规定：允许虚拟机将没有被volatile修饰的64位数据类型分为两次32位的操作来新型。</li><li>允许虚拟机实现选择可以不保证64位数据类型的<code>load</code>,<code>storm</code>,<code>read</code>,<code>write</code>这个四个操作的原子性（ong和double的非原子性协定）</li><li>JAVA内存模型虽然允许虚拟机不把<code>long</code>和<code>double</code>变量的读写实现成原子操作，但允许虚拟机选择把这些操作实现为具有原子性的操作。目前各种平台下的虚拟机几乎都选择吧64位数据类型读写操作作为原子操作对待。</li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode我们必知必会的SQL面试题</title>
      <link href="/2019/01/15/sui-bi/leetcode-wo-men-bi-zhi-bi-hui-de-sql-mian-shi-ti/"/>
      <url>/2019/01/15/sui-bi/leetcode-wo-men-bi-zhi-bi-hui-de-sql-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="获取Employee第n高的薪水"><a href="#获取Employee第n高的薪水" class="headerlink" title="获取Employee第n高的薪水"></a>获取Employee第n高的薪水</h2><p>编写一个 SQL 查询，获取 Employee 表中第 n 高的薪水（Salary）</p><pre><code>+----+--------+| Id | Salary |+----+--------+| 1  | 100    || 2  | 200    || 3  | 300    |+----+--------+</code></pre><p>例如上述 Employee 表，n = 2 时，应返回第二高的薪水 200。如果不存在第 n 高的薪水，那么查询应返回 null。</p><pre><code>+------------------------+| getNthHighestSalary(2) |+------------------------+| 200                    |+------------------------+</code></pre><p>分组去重加分页查询语法</p><pre><code>CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INTBEGINSET N = N - 1;  RETURN ( select Salary from Employee  GROUP BY Salary ORDER BY Salary desc  LIMIT N,1    );END</code></pre><h3 id="SQL查询来实现分数排名"><a href="#SQL查询来实现分数排名" class="headerlink" title="SQL查询来实现分数排名"></a>SQL查询来实现分数排名</h3><p>编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><pre><code>+----+-------+| Id | Score |+----+-------+| 1  | 3.50  || 2  | 3.65  || 3  | 4.00  || 4  | 3.85  || 5  | 4.00  || 6  | 3.65  |+----+-------+</code></pre><p>例如，根据上述给定的 Scores 表，你的查询应该返回（按分数从高到低排列）：</p><pre><code>+-------+------+| Score | Rank |+-------+------+| 4.00  | 1    || 4.00  | 1    || 3.85  | 2    || 3.65  | 3    || 3.65  | 3    || 3.50  | 4    |+-------+------+</code></pre><p> 考虑两件事：1按分数降序排列  2 分数相同属同一级</p><ul><li>外面的查询负责查排序后的粉数</li><li>select里的查询语句负责排名操作 通过score条件判断 如果<pre><code>select Score,(SELECT COUNT(DISTINCT score) from Scores WHERE score &gt;= s.score) as Rank  from scores s ORDER BY Score DESC </code></pre></li></ul><h3 id="超过经理收入的员工"><a href="#超过经理收入的员工" class="headerlink" title="超过经理收入的员工"></a>超过经理收入的员工</h3><p>Employee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p><pre><code>+----+-------+--------+-----------+| Id | Name  | Salary | ManagerId |+----+-------+--------+-----------+| 1  | Joe   | 70000  | 3         || 2  | Henry | 80000  | 4         || 3  | Sam   | 60000  | NULL      || 4  | Max   | 90000  | NULL      |+----+-------+--------+-----------+</code></pre><p>给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p><pre><code>+----------+| Employee |+----------+| Joe      |+----------+</code></pre><p>通过</p><p>解答：通过自连接 关联表两次查询 组装出员工表每个员工对应的经理信息 即可通过条件判断取出结果</p><pre><code>select e1.Name Employee  from Employee e1,Employee e2 where e1.ManagerId=e2.Idand e1.Salary&gt;e2.Salary</code></pre><h2 id="部门工资最高的员工"><a href="#部门工资最高的员工" class="headerlink" title="部门工资最高的员工"></a>部门工资最高的员工</h2><p>Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。</p><pre><code>+----+-------+--------+--------------+| Id | Name  | Salary | DepartmentId |+----+-------+--------+--------------+| 1  | Joe   | 70000  | 1            || 2  | Henry | 80000  | 2            || 3  | Sam   | 60000  | 2            || 4  | Max   | 90000  | 1            |+----+-------+--------+--------------+</code></pre><p>Department 表包含公司所有部门的信息。</p><pre><code>+----+----------+| Id | Name     |+----+----------+| 1  | IT       || 2  | Sales    |+----+----------+</code></pre><p>编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。</p><p>解答 内连接匹配查询出所有员工对应的部门名称 然后通过子查询条件匹配</p><pre><code>select d.Name as Department,e.Name as Employee, e.Salary          from Department d  join Employee e on d.Id=e.DepartmentId        where e.Salary &gt;=(select max(Salary) from Employee where DepartmentId=d.Id)</code></pre><h2 id="部门工资前三高的员工"><a href="#部门工资前三高的员工" class="headerlink" title="部门工资前三高的员工"></a>部门工资前三高的员工</h2><p>Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id 。</p><pre><code>+----+-------+--------+--------------+| Id | Name  | Salary | DepartmentId |+----+-------+--------+--------------+| 1  | Joe   | 70000  | 1            || 2  | Henry | 80000  | 2            || 3  | Sam   | 60000  | 2            || 4  | Max   | 90000  | 1            || 5  | Janet | 69000  | 1            || 6  | Randy | 85000  | 1            |+----+-------+--------+--------------+</code></pre><p>Department 表包含公司所有部门的信息。</p><pre><code>+----+----------+| Id | Name     |+----+----------+| 1  | IT       || 2  | Sales    |+----+----------+</code></pre><ul><li>思路是查询Employee a,Employee b 而且a.salary小于b.salary，a.departmentid=b.departmengtid，其中去重后的b数量不能大于3，这样就可以查出每个部门工资前三的员工</li><li>链接两表，将部门id换成name</li><li>如何取前三高？不妨再加入一张Employee表，将其与1中的表作对比，令e2表中的salary大于e1表中的salary</li><li>限制条件：e2表中salary大于e1表中salary的个数少于3 ==》取前三高的salary<pre><code>SELECT Department.Name AS Department, e1.Name AS Employee, e1.Salary AS SalaryFROM Employee e1JOIN DepartmentON e1.DepartmentId = Department.IdWHERE 3 &gt;   (          SELECT COUNT(DISTINCT e2.Salary)           FROM Employee e2          WHERE e2.Salary &gt; e1.Salary AND e1.DepartmentId = e2.DepartmentId          )</code></pre></li></ul><h2 id="删除重复的电子邮箱"><a href="#删除重复的电子邮箱" class="headerlink" title="删除重复的电子邮箱"></a>删除重复的电子邮箱</h2><p>编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。</p><pre><code>+----+------------------+| Id | Email            |+----+------------------+| 1  | john@example.com || 2  | bob@example.com  || 3  | john@example.com |+----+------------------+</code></pre><p>Id 是这个表的主键。</p><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>我们可以使用以下代码，将此表与它自身在电子邮箱列中连接起来。</p><pre><code>SELECT p1.* FROM Person p1,Person p2 WHERE  p1.Email = p2.Email</code></pre><p>然后我们需要找到其他记录中具有相同电子邮件地址的更大 ID。所以我们可以像这样给 WHERE 子句添加一个新的条件。</p><pre><code>SELECT p1.* FROM Person p1,Person p2 WHERE  p1.Email = p2.Email AND p1.Id &gt; p2.Id</code></pre><p>因为我们已经得到了要删除的记录，所以我们最终可以将该语句更改为 DELETE。</p><pre><code>DELETE p1 FROM Person p1, Person p2  WHERE   p1.Email = p2.Email AND p1.Id &gt; p2.Id</code></pre><h2 id="上升的温度"><a href="#上升的温度" class="headerlink" title="上升的温度"></a>上升的温度</h2><p>给定一个 Weather 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。</p><pre><code>+---------+------------------+------------------+| Id(INT) | RecordDate(DATE) | Temperature(INT) |+---------+------------------+------------------+|       1 |       2015-01-01 |               10 ||       2 |       2015-01-02 |               25 ||       3 |       2015-01-03 |               20 ||       4 |       2015-01-04 |               30 |+---------+------------------+------------------+</code></pre><p>例如，根据上述给定的 Weather 表格，返回如下 Id:</p><pre><code>+----+| Id |+----+|  2 ||  4 |+----+</code></pre><ul><li>使用join 和datediff 日期函数 求差  自连接匹配出有昨天的数据</li></ul><pre><code>select * from  weather w1 join weather w2 on DATEDIFF(w1.RecordDate,w2.RecordDate)=1id  RecordDate    Temperature       w2.id          昨天的日期          w2.Temperature(昨天的温度)2      2019-01-02      25                  1                 2019-01-01                104      2019-01-04      30                  3                 2019-01-03               204      2019-01-04      30                  3                 2019-01-03                20条件帅选今天比昨天温度高的数据 w1.Temperature&gt;w2.Temperatureselect w1.id  from  weather w1 join weather w2 on DATEDIFF(w1.RecordDate,w2.RecordDate)=1 where w1.Temperature&gt;w2.Temperature</code></pre><h2 id="行程和用户"><a href="#行程和用户" class="headerlink" title="行程和用户"></a>行程和用户</h2><p>Trips 表中存所有出租车的行程信息。每段行程有唯一键 Id，Client_Id 和 Driver_Id 是 Users 表中 Users_Id 的外键。Status 是枚举类型，枚举成员为 (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’)。</p><pre><code>+----+-----------+-----------+---------+--------------------+----------+| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|+----+-----------+-----------+---------+--------------------+----------+| 1  |     1     |    10     |    1    |     completed      |2013-10-01|| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|| 3  |     3     |    12     |    6    |     completed      |2013-10-01|| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|| 5  |     1     |    10     |    1    |     completed      |2013-10-02|| 6  |     2     |    11     |    6    |     completed      |2013-10-02|| 7  |     3     |    12     |    6    |     completed      |2013-10-02|| 8  |     2     |    12     |    12   |     completed      |2013-10-03|| 9  |     3     |    10     |    12   |     completed      |2013-10-03| | 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|+----+-----------+-----------+---------+--------------------+----------+</code></pre><p>Users 表存所有用户。每个用户有唯一键 Users_Id。Banned 表示这个用户是否被禁止，Role 则是一个表示（‘client’, ‘driver’, ‘partner’）的枚举类型。</p><pre><code>+----------+--------+--------+| Users_Id | Banned |  Role  |+----------+--------+--------+|    1     |   No   | client ||    2     |   Yes  | client ||    3     |   No   | client ||    4     |   No   | client ||    10    |   No   | driver ||    11    |   No   | driver ||    12    |   No   | driver ||    13    |   No   | driver |+----------+--------+--------+</code></pre><p>查出 2013年10月1日 至 2013年10月3日 期间非禁止用户的取消率。基于上表，你的 SQL 语句应返回如下结果，取消率（Cancellation Rate）保留两位小数。</p><pre><code>+------------+-------------------+|     Day    | Cancellation Rate |+------------+-------------------+| 2013-10-01 |       0.33        || 2013-10-02 |       0.00        || 2013-10-03 |       0.50        |+------------+-------------------+</code></pre><p>解法</p><pre><code>#先求出非禁止用户的所有记录 select * from  Trips t  join Users  u on t.Client_Id =u.Users_Id   where u.Banned=&#39;No&#39; 通过if函数加分组 2013年10月1日 至 2013年10月3日 期间非禁止用户的取消率IF(expr1,expr2,expr3)，如果expr1的值为true，则返回expr2的值，如果expr1的值为false，round(x,d)  ，x指要处理的数，d是指保留几位小数select t.Request_at as Day,   round(count( IF ( t.Status !=&quot;completed&quot;, t.Status, NULL ) ) / count(t.Status),2) as `Cancellation Rate`    from  Trips t   join Users u on t.Client_Id =u.Users_Id        where u.Banned=&#39;No&#39;  and t.request_at between  &quot;2013-10-01&quot; and &quot;2013-10-03&quot;  group by t.Request_at </code></pre><h2 id="换座位"><a href="#换座位" class="headerlink" title="换座位"></a>换座位</h2><ul><li>小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</li><li>其中纵列的 id 是连续递增的 小美想改变相邻俩学生的座位。你能不能帮她写一个 SQL query 来输出小美想要的结果呢？</li></ul><pre><code>+---------+---------+|    id   | student |+---------+---------+|    1    | Abbot   ||    2    | Doris   ||    3    | Emerson ||    4    | Green   ||    5    | Jeames  |+---------+---------+</code></pre><p>假如数据输入的是上表，则输出结果如下：</p><pre><code>+---------+---------+|    id   | student |+---------+---------+|    1    | Doris   ||    2    | Abbot   ||    3    | Green   ||    4    | Emerson ||    5    | Jeames  |+---------+---------+</code></pre><p>注意：如果学生人数是奇数，则不需要改变最后一个同学的座位。</p><pre><code>先把简单的偶数都-1；然后对于非最大的奇数id+1；最后(即else)如果存在未变化的数则值不变select    case                                             #如果    when id%2=0 then id-1                           # id%2为偶数 则返回 id-1     when id&lt;(select max(id) from seat) then id+1   #如果表中最大的ID 小于当前返回的ID 则执行 id+1 也就是取最大ID    else id                                          #如果存在未变化的数则值不变    end as id,student from seat  order by  id</code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+docsify打造个人文档</title>
      <link href="/2019/01/04/sui-bi/github-docsify-da-zao-ge-ren-wen-dang/"/>
      <url>/2019/01/04/sui-bi/github-docsify-da-zao-ge-ren-wen-dang/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在日常开发中 前后端对接时 经常要写很多文档Api。docsify就是一个强大的文档生成工具 界面清新好 支持语法高亮和Markdown 语法，并且docsify 扩展了一些 Markdown 语法可以让文档更易读。像vue.js官网(<a href="https://cn.vuejs.org/)就是docsify" target="_blank" rel="noopener">https://cn.vuejs.org/)就是docsify</a> 其中的一种注意 并且是目前用的的最多的主题</p><h3 id="效果图如下"><a href="#效果图如下" class="headerlink" title="效果图如下"></a>效果图如下</h3><p>预览链接：<a href="https://a870439570.github.io/interview-docs" target="_blank" rel="noopener">https://a870439570.github.io/interview-docs</a><br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de06fadda89?w=1237&amp;h=607&amp;f=png&amp;s=367834" alt><br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de06f91f058?w=1919&amp;h=933&amp;f=png&amp;s=239829" alt></p><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>首先先安装好npm和nodejs,这里就不做过多介绍了 自信安装即可 （<a href="https://blog.csdn.net/zimushuang/article/details/79715679）" target="_blank" rel="noopener">https://blog.csdn.net/zimushuang/article/details/79715679）</a></p><p>安装docsify 推荐安装 docsify-cli 工具，可以方便创建及本地预览文档网站。</p><pre><code>npm i docsify-cli -g</code></pre><p>初始化项目 </p><pre><code># 进入指定文件目录 如下：F:\ideWork\githubWork\test_docs 运行    docsify init ./docs</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de06fdd7ea4?w=485&amp;h=72&amp;f=png&amp;s=3356" alt><br>初始化成功后，可以看到 ./docs 目录下创建的几个文件</p><pre><code>index.html 入口文件README.md 会做为主页内容渲染.nojekyll 用于阻止 GitHub Pages 会忽略掉下划线开头的文件</code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de0706dda77?w=341&amp;h=172&amp;f=png&amp;s=13375" alt></p><h2 id="本地预览网站"><a href="#本地预览网站" class="headerlink" title="本地预览网站"></a>本地预览网站</h2><p>运行一个本地服务器通过 docsify serve 可以方便的预览效果，而且提供 LiveReload 功能，可以让实时的预览。默认访问<a href="http://localhost:3000/#/。" target="_blank" rel="noopener">http://localhost:3000/#/。</a></p><pre><code>docsify serve docs</code></pre><p>一个基本的文档网站就搭建好了，docsify还可以自定义导航栏，自定义侧边栏以及背景图和一些开发插件等等<br>更多配置请参考官方文档  <a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">https://docsify.js.org/#/zh-cn/quickstart</a></p><h3 id="下面介绍docsify如何部署到Github-使用免费的站点"><a href="#下面介绍docsify如何部署到Github-使用免费的站点" class="headerlink" title="下面介绍docsify如何部署到Github  使用免费的站点"></a>下面介绍docsify如何部署到Github  使用免费的站点</h3><p>和 GitBook 生成的文档一样，我们可以直接把文档网站部署到 GitHub Pages 或者 VPS 上</p><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>GitHub Pages 支持从三个地方读取文件</p><ul><li>docs/ 目录</li><li>master 分支</li><li>gh-pages 分支</li></ul><p>上传文件至Github仓库  官方推荐直接将文档放在 docs/ 目录下，在设置页面开启 GitHub Pages 功能并选择 master branch /docs folder 选项。<br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de071452a5a?w=778&amp;h=519&amp;f=png&amp;s=64539" alt="在这里插入图片描述"></p><p>此时等待几秒钟 就可以访问了   我这里使用了自定义域名 </p><h3 id="Github如何配置自定义域名"><a href="#Github如何配置自定义域名" class="headerlink" title="Github如何配置自定义域名"></a>Github如何配置自定义域名</h3><p>在根目录下创建CNAME文件  并配置你的阿里云或其它网站购买的域名<br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de07178e371?w=628&amp;h=309&amp;f=png&amp;s=33631" alt="在这里插入图片描述"></p><p>设置页面 Custom domain 更改域名<br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de096c243bc?w=746&amp;h=460&amp;f=png&amp;s=61973" alt="在这里插入图片描述"></p><p>进入域名平台 进行解析  添加继续记录 ；类型为CNAME<br><img src="https://user-gold-cdn.xitu.io/2019/1/4/16816de098ed1780?w=644&amp;h=463&amp;f=png&amp;s=32769" alt="在这里插入图片描述"></p><p>解析后 等待十分钟既可开启了</p><p>官方文档  <a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">https://docsify.js.org/#/zh-cn/quickstart</a></p><p>预览链接：<a href="https://a870439570.github.io/interview-docs" target="_blank" rel="noopener">https://a870439570.github.io/interview-docs</a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docsify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现的Mongodb管理工具</title>
      <link href="/2018/11/21/spring-xi-lie/springboot-shi-xian-de-mongodb-guan-li-gong-ju/"/>
      <url>/2018/11/21/spring-xi-lie/springboot-shi-xian-de-mongodb-guan-li-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>Mongodb网页管理工具,基于Spring Boot2.0，前端采用layerUI实现。</li><li>源于线上环境部署mongodb时屏蔽了外网访问mongodb,所以使用不了mongochef这样方便的远程连接工具，便Mongodb提供的java api实现的的网页版管理</li><li>未设置登录权限相关模块，低耦合性 方便嵌入到现有的项目<h2 id="部署文档"><a href="#部署文档" class="headerlink" title="部署文档"></a>部署文档</h2></li><li><a href="https://a870439570.github.io/work-doc/mongdb" target="_blank" rel="noopener">https://a870439570.github.io/work-doc/mongdb</a></li></ul><h2 id="部分效果图如下"><a href="#部分效果图如下" class="headerlink" title="部分效果图如下"></a>部分效果图如下</h2><h2 id="显示所有的数据源"><a href="#显示所有的数据源" class="headerlink" title="显示所有的数据源"></a>显示所有的数据源</h2><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3g7qepcj31fc0nqwh9.jpg" alt></p><h2 id="显示指定数据源下的表"><a href="#显示指定数据源下的表" class="headerlink" title="显示指定数据源下的表"></a>显示指定数据源下的表</h2><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3gpeenij31140lhwg8.jpg" alt></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/a870439570/Mongodb-WeAdmin" target="_blank" rel="noopener">https://github.com/a870439570/Mongodb-WeAdmin</a></p><p><a href="https://jq.qq.com/?_wv=1027&amp;k=5PIRvFq" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/QQ%E7%BE%A4-924715723-yellowgreen.svg" alt="QQ群"></a><br><a href="https://gitee.com/qinxuewu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Gitee-%E7%A0%81%E4%BA%91-yellow.svg" alt="码云"></a><br><a href="https://github.com/a870439570" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Github-Github-red.svg" alt="Github"></a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud服务链路追踪</title>
      <link href="/2018/10/27/spring-xi-lie/springcloud-fu-wu-lian-lu-zhui-zong/"/>
      <url>/2018/10/27/spring-xi-lie/springcloud-fu-wu-lian-lu-zhui-zong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/a870439570/boot-cloud" target="_blank" rel="noopener">SpringCloud 教程Finchley版本</a></p><h3 id="服务链路追踪-Spring-Cloud-Sleuth-Finchley版本"><a href="#服务链路追踪-Spring-Cloud-Sleuth-Finchley版本" class="headerlink" title="服务链路追踪(Spring Cloud Sleuth)(Finchley版本)"></a>服务链路追踪(Spring Cloud Sleuth)(Finchley版本)</h3><p>在spring Cloud为F版本的时候，已经不需要自己构建Zipkin Server了，只需要下载jar即可，下载地址：<br><a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/" target="_blank" rel="noopener">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p><pre><code>java -jar zipkin-server-2.10.1-exec.jar访问 localhost:9411</code></pre><p> <strong>构建工程</strong> </p><ul><li><p>基本知识讲解完毕，下面我们来实战，本文的案例主要有三个工程组成:一个server-zipkin,它的主要作用使用ZipkinServer 的功能，收集调用数据，并展示；一个service-hi,对外暴露hi接口；一个service-miya,对外暴露miya接口；这两个service可以相互调用；并且只有调用了，server-zipkin才会收集数据的，这就是为什么叫服务追踪了。</p><p><strong>创建service-hi</strong> </p></li></ul><p>application.properties配制文件</p><pre><code>server.port=8988spring.zipkin.base-url=http://localhost:9411spring.application.name=service-hi</code></pre><p>启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceHiApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ServiceHiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ServiceHiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hi"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">callHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"calling trace service-hi  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8989/miya"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"calling trace service-hi "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"i'm service-hi"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Sampler <span class="token function">defaultSampler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Sampler<span class="token punctuation">.</span>ALWAYS_SAMPLE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>  <strong>创建service-miya</strong> </p><p> 创建过程痛service-hi，引入相同的依赖，配置下spring.zipkin.base-url。<br>application.properties配制文件</p><pre><code>server.port=8989spring.zipkin.base-url=http://localhost:9411spring.application.name=service-miya</code></pre><p>启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceMiyaApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ServiceMiyaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ServiceMiyaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hi"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"hi is being called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hi i'm miya!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/miya"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Level<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"info is being called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8988/info"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Sampler <span class="token function">defaultSampler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Sampler<span class="token punctuation">.</span>ALWAYS_SAMPLE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>pom.xml</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span> xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>pflm<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>service<span class="token operator">-</span>miya<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>packaging<span class="token operator">></span>jar<span class="token operator">&lt;</span><span class="token operator">/</span>packaging<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>service<span class="token operator">-</span>miya<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>description<span class="token operator">></span>服务链路追踪演示<span class="token operator">&lt;</span><span class="token operator">/</span>description<span class="token operator">></span>    <span class="token operator">&lt;</span>parent<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>relativePath<span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent from repository <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>reporting<span class="token punctuation">.</span>outputEncoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>reporting<span class="token punctuation">.</span>outputEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>spring<span class="token operator">-</span>cloud<span class="token punctuation">.</span>version<span class="token operator">></span>Finchley<span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>spring<span class="token operator">-</span>cloud<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>zipkin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencyManagement<span class="token operator">></span>        <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>dependencies<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token operator">-</span>cloud<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>type<span class="token operator">></span>pom<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">></span>                <span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token keyword">import</span><span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencyManagement<span class="token operator">></span>    <span class="token operator">&lt;</span>build<span class="token operator">></span>        <span class="token operator">&lt;</span>plugins<span class="token operator">></span>            <span class="token operator">&lt;</span>plugin<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre><ul><li>依次启动上面的工程，打开浏览器访问：<a href="http://localhost:9411/，会出现以下界面：" target="_blank" rel="noopener">http://localhost:9411/，会出现以下界面：</a></li><li>访问：<a href="http://localhost:8989/miya，浏览器出现：" target="_blank" rel="noopener">http://localhost:8989/miya，浏览器出现：</a> i’m service-hi</li><li>再打开<a href="http://localhost:9411/的界面，点击Dependencies,可以发现服务的依赖关系：" target="_blank" rel="noopener">http://localhost:9411/的界面，点击Dependencies,可以发现服务的依赖关系：</a></li></ul><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zipkin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud集成Consul注册中心</title>
      <link href="/2018/10/26/spring-xi-lie/springcloud-ji-cheng-consul-zhu-ce-zhong-xin/"/>
      <url>/2018/10/26/spring-xi-lie/springcloud-ji-cheng-consul-zhu-ce-zhong-xin/</url>
      
        <content type="html"><![CDATA[<p> <strong>Spring Cloud 支持很多服务发现的软件，Eureka 只是其中之一，下面是 Spring Cloud 支持的服务发现软件以及特性对比：</strong><br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3syd6opj30li0bydhx.jpg" alt></p><h3 id="Consul-介绍"><a href="#Consul-介绍" class="headerlink" title="Consul 介绍"></a>Consul 介绍</h3><ul><li>Consul 是 HashiCorp 公司推出的开源工具，用于实现分布式系统的服务发现与配置。与其他分布式服务注册与发现的方案，Consul 的方案更“一站式”，内置了服务注册与发现框 架、分布一致性协议实现、健康检查、Key/Value 存储、多数据中心方案，不再需要依赖其他工具（比如 ZooKeeper 等）。使用起来也较 为简单。Consul 使用 Go 语言编写，因此具有天然可移植性(支持Linux、windows和Mac OS X)；安装包仅包含一个可执行文件，方便部署，与 Docker 等轻量级容器可无缝配合。</li></ul><h3 id="Consul-的优势："><a href="#Consul-的优势：" class="headerlink" title="Consul 的优势："></a>Consul 的优势：</h3><ul><li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft。</li><li>支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等。 zookeeper 和 etcd 均不提供多数据中心功能的支持。</li><li>支持健康检查。 etcd 不提供此功能。</li><li>支持 http 和 dns 协议接口。 zookeeper 的集成较为复杂, etcd 只支持 http 协议。</li><li>官方提供 web 管理界面, etcd 无此功能。</li><li>综合比较, Consul 作为服务注册和配置管理的新星, 比较值得关注和研究。</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>服务发现</li><li>健康检查</li><li>Key/Value 存储</li><li>多数据中心</li></ul><h3 id="Consul-角色"><a href="#Consul-角色" class="headerlink" title="Consul 角色"></a>Consul 角色</h3><ul><li>client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</li><li>server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其他数据中心通讯。 每个数据中心的 server 数量推荐为 3 个或是 5 个。</li></ul><h3 id="Consul-安装"><a href="#Consul-安装" class="headerlink" title="Consul 安装"></a>Consul 安装</h3><p>Consul 不同于 Eureka 需要单独安装，访问Consul 官网下载 Consul 的最新版本，</p><p>我这里以 Windows 为例，下载下来是一个 consul_1.2.1_windows_amd64.zip 的压缩包，解压是是一个 consul.exe 的执行文件。</p><p>cd 到对应的目录下，使用 cmd 启动 Consul</p><pre><code>cd D:\Common Files\consul#cmd启动：consul agent -dev        # -dev表示开发模式运行，另外还有-server表示服务模式运行</code></pre><p>为了方便期间，可以在同级目录下创建一个 run.bat 脚本来启动，脚本内容如下</p><pre><code>consul agent -dev</code></pre><p>启动结果如下：<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3u0g3lqj30oi089jrp.jpg" alt></p><p>启动成功之后访问：<a href="http://localhost:8500，可以看到" target="_blank" rel="noopener">http://localhost:8500，可以看到</a> Consul 的管理界面<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3v9qi9oj30tt0e3dgj.jpg" alt></p><p>这样就意味着我们的 Consul 服务启动成功了。</p><h3 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h3><p>把下载的linux下的安装包consul拷贝到linux环境里面，使用unzip进行解压：</p><p> <strong>2，配置环境变量</strong> </p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile<span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/usr/local/jdk1.8.0_172<span class="token function">export</span> MAVEN_HOME<span class="token operator">=</span>/usr/local/apache-maven-3.5.4<span class="token function">export</span> CONSUL_HOME<span class="token operator">=</span>/usr/local/consul<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$MAVEN_HOME</span>/bin:<span class="token variable">$CONSUL_HOME</span><span class="token keyword">:</span><span class="token variable">$PATH</span><span class="token comment" spellcheck="true">#上面的CONSUL_HOME就是consul的路径，上面的配置仅供参考。</span><span class="token function">source</span> /etc/profile <span class="token comment" spellcheck="true">#命令使配置生效</span><span class="token comment" spellcheck="true">#查看安装的consul版本</span><span class="token punctuation">[</span>root@CentOS124 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># consul -v</span>Consul v1.2.2Protocol 2 spoken by default, understands 2 to 3 <span class="token punctuation">(</span>agent will automatically use protocol <span class="token operator">></span>2 when speaking to compatible agents<span class="token punctuation">)</span><span class="token punctuation">[</span>root@CentOS124 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span></code></pre><h3 id="Consul-服务端"><a href="#Consul-服务端" class="headerlink" title="Consul 服务端"></a>Consul 服务端</h3><p>创建一个 spring-cloud-consul-producer 项目 依赖包如下：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>consul<span class="token operator">-</span>discovery<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><ul><li>spring-boot-starter-actuator 健康检查依赖于此包。</li><li><p>spring-cloud-starter-consul-discovery Spring Cloud Consul 的支持。</p><p><strong>配置文件内容如下</strong> </p></li></ul><pre class=" language-java"><code class="language-java">spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token operator">=</span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>consul<span class="token operator">-</span>producerserver<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8501</span>spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>consul<span class="token punctuation">.</span>host<span class="token operator">=</span>localhostspring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>consul<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8500</span>#注册到consul的服务名称spring<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>consul<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>serviceName<span class="token operator">=</span>service<span class="token operator">-</span>producer</code></pre><ul><li>Consul 的地址和端口号默认是 localhost:8500 ，如果不是这个地址可以自行配置。</li><li><p>spring.cloud.consul.discovery.serviceName 是指注册到 Consul 的服务名称，后期客户端会根据这个名称来进行服务调用。</p><p><strong>启动类</strong> </p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsulProducerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsulProducerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加了 @EnableDiscoveryClient 注解表示支持服务发现。</p><p> <strong>创建一个 Controller，推文提供 hello 的服务</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"helle consul"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了模拟注册均衡负载复制一份上面的项目重命名为 spring-cloud-consul-producer-2 ,修改对应的端口为 8502，修改 hello 方法的返回值为：”helle consul two”，修改完成后依次启动两个项目。</p><p>这时候我们再次在浏览器访问地址：<a href="http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500</a> 就会显示出来两个服务提供者</p><h3 id="Consul-消费端"><a href="#Consul-消费端" class="headerlink" title="Consul 消费端"></a>Consul 消费端</h3><p>创建一个 spring-cloud-consul-consumer 项目，pom 文件和上面示例保持一致</p><p><strong>配置文件内容如下</strong> </p><pre class=" language-bash"><code class="language-bash">spring.application.name<span class="token operator">=</span>spring-cloud-consul-consumerserver.port<span class="token operator">=</span>8503spring.cloud.consul.host<span class="token operator">=</span>127.0.0.1spring.cloud.consul.port<span class="token operator">=</span>8500<span class="token comment" spellcheck="true">#设置不需要注册到 consul 中</span>spring.cloud.consul.discovery.register<span class="token operator">=</span>false</code></pre><p>客户端可以设置注册到 Consul 中，也可以不注册到 Consul 注册中心中，根据我们的业务来选择，只需要在使用服务时通过 Consul 对外提供的接口获取服务信息即可。</p><p> <strong>启动类</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsulConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsulConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> <strong>进行测试</strong> </p><p>创建一个 ServiceController ,试试如果去获取 Consul 中的服务</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DiscoveryClient discoveryClient<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取所有服务</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/services"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">services</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"service-producer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//从所有服务中选择一个服务（轮询）</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/discover"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">discover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> loadBalancer<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"service-producer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Controller 中有俩个方法，一个是获取所有服务名为service-producer的服务信息并返回到页面，一个是随机从服务名为service-producer的服务中获取一个并返回到页面。</p><p>添加完 ServiceController 之后我们启动项目，访问地址：<a href="http://localhost:8503/services，返回jsn数据" target="_blank" rel="noopener">http://localhost:8503/services，返回jsn数据</a> </p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"serviceId"</span><span class="token operator">:</span><span class="token string">"service-producer"</span><span class="token punctuation">,</span><span class="token property">"host"</span><span class="token operator">:</span><span class="token string">"windows10.microdone.cn"</span><span class="token punctuation">,</span><span class="token property">"port"</span><span class="token operator">:</span><span class="token number">8501</span><span class="token punctuation">,</span><span class="token property">"secure"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"metadata"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"secure"</span><span class="token operator">:</span><span class="token string">"false"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"uri"</span><span class="token operator">:</span><span class="token string">"http://windows10.microdone.cn:8501"</span><span class="token punctuation">,</span><span class="token property">"scheme"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">"serviceId"</span><span class="token operator">:</span><span class="token string">"service-producer"</span><span class="token punctuation">,</span><span class="token property">"host"</span><span class="token operator">:</span><span class="token string">"windows10.microdone.cn"</span><span class="token punctuation">,</span><span class="token property">"port"</span><span class="token operator">:</span><span class="token number">8502</span><span class="token punctuation">,</span><span class="token property">"secure"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"metadata"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"secure"</span><span class="token operator">:</span><span class="token string">"false"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"uri"</span><span class="token operator">:</span><span class="token string">"http://windows10.microdone.cn:8502"</span><span class="token punctuation">,</span><span class="token property">"scheme"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>发现我们刚才创建的端口为 8501 和 8502 的两个服务端都存在</p><p>多次访问地址：<a href="http://localhost:8503/discover，页面会交替返回信息：" target="_blank" rel="noopener">http://localhost:8503/discover，页面会交替返回信息：</a></p><p>说明 8501 和 8501 的两个服务会交替出现，从而实现了获取服务端地址的均衡负载。</p><p>大多数情况下我们希望使用均衡负载的形式去获取服务端提供的服务，因此使用第二种方法来模拟调用服务端提供的 hello 方法。</p><p> <strong>创建 CallHelloController ：</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallHelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/call"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServiceInstance serviceInstance <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"service-producer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务地址："</span> <span class="token operator">+</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务名称："</span> <span class="token operator">+</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String callServiceResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>callServiceResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> callServiceResult<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 RestTemplate 进行远程调用。添加完之后重启 spring-cloud-consul-consumer 项目。在浏览器中访问地址：<a href="http://localhost:8503/call，依次返回结果如下：" target="_blank" rel="noopener">http://localhost:8503/call，依次返回结果如下：</a></p><pre><code>helle consulhelle consul two</code></pre><p>说明我们已经成功的调用了 Consul 服务端提供的服务，并且实现了服务端的均衡负载功能</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eureka注册中心增加访问权限</title>
      <link href="/2018/10/26/spring-xi-lie/eureka-zhu-ce-zhong-xin-zeng-jia-fang-wen-quan-xian/"/>
      <url>/2018/10/26/spring-xi-lie/eureka-zhu-ce-zhong-xin-zeng-jia-fang-wen-quan-xian/</url>
      
        <content type="html"><![CDATA[<p>eureka注册中心增加访问权限（Springboot2.0版本解决方案）</p><ul><li>SpringCloud组件它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路有（Zuul），客户端负载均衡（Ribbon），Archaius，Turbine等</li><li>Eureka作用相当于zookeeper,用于微服务项目中的服务注册及发现，在采用springBoot+springCloud开发微服务时，通过一些简单的配置就能够达到基本的目的</li></ul><h3 id="eureka注册中心访问权限"><a href="#eureka注册中心访问权限" class="headerlink" title="eureka注册中心访问权限"></a>eureka注册中心访问权限</h3><p>在注册中心服务pom.xml添加依赖</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加注册中心权限依赖  <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>在注册中心服务application.properties文件（注意），内容如下</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#新版本开启权限</span><span class="token comment" spellcheck="true">#注册中心配置</span>spring.application.name<span class="token operator">=</span>szq-serverserver.port<span class="token operator">=</span>8761eureka.instance.hostname<span class="token operator">=</span>localhosteureka.client.registerWithEureka<span class="token operator">=</span>falseeureka.client.fetch-registry<span class="token operator">=</span>falseeureka.client.serviceUrl.defaultZone<span class="token operator">=</span>http://admin:123456@<span class="token variable">${eureka.instance.hostname}</span><span class="token keyword">:</span><span class="token variable">${server.port}</span>/eureka/<span class="token comment" spellcheck="true">#新版本开启权限</span>spring.security.user.name<span class="token operator">=</span>adminspring.security.user.password<span class="token operator">=</span>123456</code></pre><p>启动注册中心服务项目，浏览器输入<a href="http://localhost:8761/出现eureka控制台页面并要求输入用户名和密码框即为成功" target="_blank" rel="noopener">http://localhost:8761/出现eureka控制台页面并要求输入用户名和密码框即为成功</a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3aw3a7lj309806dwem.jpg" alt></p><h3 id="eureka开启验证后服务无法连接注册中心解决方案"><a href="#eureka开启验证后服务无法连接注册中心解决方案" class="headerlink" title="eureka开启验证后服务无法连接注册中心解决方案"></a>eureka开启验证后服务无法连接注册中心解决方案</h3><p>运行错误提示</p><pre class=" language-java"><code class="language-java">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>TransportException<span class="token operator">:</span> Cannot execute request on any known server</code></pre><p>Spring Cloud 2.0 以上的security默认启用了csrf检验，要在eurekaServer端配置security的csrf检验为false</p><pre><code>服务注册中心注册时加上账号密码eureka.client.serviceUrl.defaultZone=http://admin:123456@localhost:8761/eureka/ </code></pre><ul><li>添加一个继承 WebSecurityConfigurerAdapter 的类</li><li>在类上添加 @EnableWebSecurity 注解；</li><li>覆盖父类的 configure(HttpSecurity http) 方法，关闭掉 csrf<br><code>`</code> java<br>package com.pflm;<br>import org.springframework.security.config.annotation.web.builders.HttpSecurity;<br>import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br>import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</li></ul><p>/**</p><ul><li>eureka开启验证后无法连接注册中心?</li><li>spring Cloud 2.0 以上）的security默认启用了csrf检验，要在eurekaServer端配置security的csrf检验为false</li><li>@author qxw</li><li>@data 2018年7月24日下午1:58:31<br>*/<br>@EnableWebSecurity<br>public class WebSecurityConfig extends WebSecurityConfigurerAdapter{<br>  @Override<pre><code> protected void configure(HttpSecurity http) throws Exception {     http.csrf().disable();     super.configure(http); }</code></pre>}</li></ul><p><code>`</code></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Admin2.1应用监控</title>
      <link href="/2018/10/26/spring-xi-lie/springbootadmin/"/>
      <url>/2018/10/26/spring-xi-lie/springbootadmin/</url>
      
        <content type="html"><![CDATA[<ul><li>Spring Boot Admin 是一个管理和监控Spring Boot 应用程序的开源软件。每个应用都认为是一个客户端，通过HTTP或者使用 Eureka注册到admin server中进行展示，Spring Boot Admin UI部分使用AngularJs将数据展示在前端。</li><li>Spring Boot Admin 是一个针对spring-boot的actuator接口进行UI美化封装的监控工具。他可以：在列表中浏览所有被监控spring-boot项目的基本信息，详细的Health信息、内存信息、JVM信息、垃圾回收信息、各种配置信息（比如数据源、缓存列表和命中率）等，还可以直接修改logger的level。</li></ul><h3 id="设置Spring-Boot-Admin-Server"><a href="#设置Spring-Boot-Admin-Server" class="headerlink" title="设置Spring Boot Admin Server"></a>设置Spring Boot Admin Server</h3><ul><li>新建一个springBoot2.x工程，将Spring Boot Admin Server启动器添加到pom.xml</li><li>使用ide新建工程可以直接选择引入Spring Boot Admin</li></ul><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>de<span class="token punctuation">.</span>codecentric<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>admin<span class="token operator">-</span>starter<span class="token operator">-</span>server<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>de<span class="token punctuation">.</span>codecentric<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>admin<span class="token operator">-</span>server<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>security<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h3 id="启动类添加如下注解"><a href="#启动类添加如下注解" class="headerlink" title="启动类添加如下注解"></a>启动类添加如下注解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAdminServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootAdminApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringbootAdminApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="添加身份验证和授权"><a href="#添加身份验证和授权" class="headerlink" title="添加身份验证和授权"></a>添加身份验证和授权</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecuritySecureConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String adminContextPath<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SecuritySecureConfig</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adminContextPath <span class="token operator">=</span> adminServerProperties<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// @formatter:off</span>        SavedRequestAwareAuthenticationSuccessHandler successHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SavedRequestAwareAuthenticationSuccessHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        successHandler<span class="token punctuation">.</span><span class="token function">setTargetUrlParameter</span><span class="token punctuation">(</span><span class="token string">"redirectTo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        successHandler<span class="token punctuation">.</span><span class="token function">setDefaultTargetUrl</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//授予对所有静态资产和登录页面的公共访问权限。</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/assets/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//必须对每个其他请求进行身份验证</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//    配置登录和注销。</span>                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span>adminContextPath <span class="token operator">+</span> <span class="token string">"/logout"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//启用HTTP-Basic支持。这是Spring Boot Admin Client注册所必需的</span>                <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//使用Cookie启用CSRF保护</span>                <span class="token punctuation">.</span><span class="token function">csrfTokenRepository</span><span class="token punctuation">(</span>CookieCsrfTokenRepository<span class="token punctuation">.</span><span class="token function">withHttpOnlyFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ignoringAntMatchers</span><span class="token punctuation">(</span>                        adminContextPath <span class="token operator">+</span> <span class="token string">"/instances"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//禁用CRSF-Protection Spring Boot Admin Client用于注册的端点。</span>                        adminContextPath <span class="token operator">+</span> <span class="token string">"/actuator/**"</span> <span class="token comment" spellcheck="true">//</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @formatter:on</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="application-properties配置文件"><a href="#application-properties配置文件" class="headerlink" title="application.properties配置文件"></a>application.properties配置文件</h3><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>8088server.tomcat.uri-encoding<span class="token operator">=</span>UTF-8server.tomcat.max-threads<span class="token operator">=</span>1000server.tomcat.min-spare-threads<span class="token operator">=</span>30<span class="token comment" spellcheck="true">#账户密码</span>spring.security.user.name<span class="token operator">=</span>gzpflmspring.security.user.password<span class="token operator">=</span>gzpflm<span class="token comment" spellcheck="true">#项目访问名</span>spring.boot.admin.context-path<span class="token operator">=</span>/szq-monitoring<span class="token comment" spellcheck="true">#UI界面标题</span>spring.boot.admin.ui.title<span class="token operator">=</span>szq-Monitpring</code></pre><p>启动运行：<a href="http://localhost:8088/szq-monitoring/login" target="_blank" rel="noopener">http://localhost:8088/szq-monitoring/login</a> 出现登录界面表示成功<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3byk2lqj30st0j4q3n.jpg" alt></p><h3 id="Spring-Boot客户端配置监控"><a href="#Spring-Boot客户端配置监控" class="headerlink" title="Spring Boot客户端配置监控"></a>Spring Boot客户端配置监控</h3><ul><li>客户端需要配置账户密码 不然无法注册到springBoot Admin</li><li>每个要注册的应用程序都必须包含Spring Boot Admin Client 配置如下<pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>dependency<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>de<span class="token punctuation">.</span>codecentric<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>          <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>admin<span class="token operator">-</span>starter<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><strong>application.properties配置文件</strong> </li></ul><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>8081spring.application.name<span class="token operator">=</span>Spring Boot Clientspring.boot.admin.client.url<span class="token operator">=</span>http://localhost:8088/szq-monitoringmanagement.endpoints.web.exposure.include<span class="token operator">=</span>*spring.boot.admin.client.username<span class="token operator">=</span>gzpflmspring.boot.admin.client.password<span class="token operator">=</span>gzpflmspring.boot.admin.client.enabled<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#启用ip显示</span>spring.boot.admin.client.instance.prefer-ip<span class="token operator">=</span>true</code></pre><p>启动后：监控的服务端就会收到通知 刷新页面就可以看到监控的服务<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3cmpm60j31540lzdh4.jpg" alt></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3dc88adj31af0nowga.jpg" alt></p><p>项目地址：<a href="https://gitee.com/qinxuewu/SpringBoot--Admin-demo" target="_blank" rel="noopener">https://gitee.com/qinxuewu/SpringBoot--Admin-demo</a></p><h3 id="Spring-Boot-Admin-Client配置选项"><a href="#Spring-Boot-Admin-Client配置选项" class="headerlink" title="Spring Boot Admin Client配置选项"></a>Spring Boot Admin Client配置选项</h3><pre class=" language-bash"><code class="language-bash">spring.boot.admin.client.enabled    <span class="token comment" spellcheck="true">#启用S​​pring Boot Admin Client,默认值true</span>spring.boot.admin.client.url  <span class="token comment" spellcheck="true">#逗号分隔Spring Boot Admin服务器的有序URL列表以进行注册</span>spring.boot.admin.client.api-path <span class="token comment" spellcheck="true">#管理服务器上的注册端点的Http路径 默认值"instances"</span><span class="token comment" spellcheck="true">#SBA Server api受HTTP基本身份验证保护时的用户名和密码。</span>spring.boot.admin.client.username spring.boot.admin.client.passwordspring.boot.admin.client.period <span class="token comment" spellcheck="true">#重复注册的间隔（以ms为单位）默认自10,000</span>spring.boot.admin.client.connect-timeout  <span class="token comment" spellcheck="true">#连接超时进行注册（以ms为单位 #默认5,000</span></code></pre><h3 id="官方配置"><a href="#官方配置" class="headerlink" title="官方配置"></a>官方配置</h3><p><a href="http://codecentric.github.io/spring-boot-admin/current/#register-clients-via-spring-boot-admin" target="_blank" rel="noopener">http://codecentric.github.io/spring-boot-admin/current/#register-clients-via-spring-boot-admin</a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springbootAdmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门(二)TCP粘包与拆包问题处理</title>
      <link href="/2018/10/12/netty/netty-ru-men-er-tcp-nian-bao-yu-chai-bao-wen-ti-chu-li/"/>
      <url>/2018/10/12/netty/netty-ru-men-er-tcp-nian-bao-yu-chai-bao-wen-ti-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP粘包与拆包是什么？"><a href="#TCP粘包与拆包是什么？" class="headerlink" title="TCP粘包与拆包是什么？"></a>TCP粘包与拆包是什么？</h2><p>上一章的demo中客户端发送了三条数据<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2rgbc3ij30n20aw0tj.jpg" alt><br>服务端收到确是合并在一起的一条数据<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2ryakjdj30ps02e745.jpg" alt></p><p>这就是是TCP粘包</p><p>TCP是一个”流”协议，就像河流中的溪流一样，没有严格的分界线。<br>当我们客户端向服务端发送数据时（比如以下发送了三条数据A,B,C），原本的想法就是三条数据单独发送，服务端接收时也是接收到三条单独的数据，但是ABC会变成一条数据发送到服务端，这就是粘包<br>所谓拆包: 如果发送数据的时候，你把A、B,B拆成了几份发，就是拆包了。当然数据不是你主动拆的，是TCP流自动拆的</p><h2 id="TCP粘包与拆包产生原因"><a href="#TCP粘包与拆包产生原因" class="headerlink" title="TCP粘包与拆包产生原因"></a>TCP粘包与拆包产生原因</h2><ol><li>要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</li><li>待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</li><li>要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</li><li>接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</li></ol><h2 id="粘包、拆包三种解决方案"><a href="#粘包、拆包三种解决方案" class="headerlink" title="粘包、拆包三种解决方案"></a>粘包、拆包三种解决方案</h2><ul><li>发送数据时在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开（DelimiterBasedFrameDecoder自定义分隔符）</li><li>发送端将每个数据包封装为固定长度（FixedLengthFrameDecoder）</li><li>使用带消息头的协议，消息头存储消息开始标识及消息长度信息，服务端获取消息头的时候解析出消息长度，然后向后读取该长度的内容。（自定义协议）</li></ul><h2 id="自定义分隔符方案"><a href="#自定义分隔符方案" class="headerlink" title="自定义分隔符方案"></a>自定义分隔符方案</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//消息响应处理</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">ClientHander</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                String response <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>msg<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端收到消息: "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 抛弃收到的数据</span>                ReferenceCountUtil<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>  Exception<span class="token punctuation">{</span>        EventLoopGroup group<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bootstrap b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//消息响应处理</span>                ByteBuf buf <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"$_"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelimiterBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientHander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ChannelFuture cf <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//尾部加入分隔符</span>        cf<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">wrappedBuffer</span><span class="token punctuation">(</span><span class="token string">"bbbb$_"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cf<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">wrappedBuffer</span><span class="token punctuation">(</span><span class="token string">"cccc$_"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待客户端端口关闭</span>        cf<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>服务端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">ServerHander</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            String request <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>msg<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端收到的消息 :"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            String response <span class="token operator">=</span> <span class="token string">"服务器响应："</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"$_"</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 创建2个线程，一个是负责接收客户端的连接。一个是负责进行数据传输的</span>        EventLoopGroup pGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup cGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 创建辅助工具类，用于服务器通道的一系列配置</span>        ServerBootstrap b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>pGroup<span class="token punctuation">,</span> cGroup<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//绑定俩个线程组</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//指定NIO的模式</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//设置tcp缓冲区</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_SNDBUF<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//设置发送缓冲大小</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_RCVBUF<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这是接收缓冲大小</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_KEEPALIVE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//保持连接</span>                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//设置特殊分隔符</span>                        ByteBuf buf <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"$_"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelimiterBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//设置字符串形式的解码</span>                        sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerHander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4 进行绑定</span>        ChannelFuture cf1 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5 等待关闭</span>        cf1<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty入门(一)快速入门</title>
      <link href="/2018/10/11/netty/netty-ru-men-yi-kuai-su-ru-men/"/>
      <url>/2018/10/11/netty/netty-ru-men-yi-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="Netty介绍"><a href="#Netty介绍" class="headerlink" title="Netty介绍"></a>Netty介绍</h2><p>  Netty是一个NIO client-server(客户端服务器)框架，使用Netty可以快速开发网络应用，例如服务器和客户端协议。Netty提供了一种新的方式来使开发网络应用程序，这种新的方式使得它很容易使用和有很强的扩展性。Netty的内部实现时很复杂的，但是Netty提供了简单易用的api从网络处理代码中解耦业务逻辑。Netty是完全基于NIO实现的，所以整个Netty都是异步的。</p><h2 id="Netty框架的组成"><a href="#Netty框架的组成" class="headerlink" title="Netty框架的组成"></a>Netty框架的组成</h2><p>   <img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2q52runj30fd08yq49.jpg" alt></p><h2 id="一个Netty程序的工作图如下"><a href="#一个Netty程序的工作图如下" class="headerlink" title="一个Netty程序的工作图如下"></a>一个Netty程序的工作图如下</h2><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2qnpm4rj30dm0cm0xs.jpg" alt><br>1.客户端连接到服务器<br>2.建立连接后，发送或接收数据<br>3.服务器处理所有的客户端连接 </p><h2 id="Netty为什么传输快"><a href="#Netty为什么传输快" class="headerlink" title="Netty为什么传输快"></a>Netty为什么传输快</h2><ul><li>Netty的传输快其实也是依赖了NIO的一个特性——零拷贝。我们知道，Java的内存有堆内存、栈内存和字符串常量池等等，其中堆内存是占用内存空间最大的一块，也是Java对象存放的地方，一般我们的数据如果需要从IO读取到堆内存，中间需要经过Socket缓冲区，也就是说一个数据会被拷贝两次才能到达他的的终点，如果数据量大，就会造成不必要的资源浪费。</li><li>Netty针对这种情况，使用了NIO中的另一大特性——零拷贝，当他需要接收数据的时候，他会在堆内存之外开辟一块内存，数据就直接从IO读到了那块内存中去，在netty里面通过ByteBuf可以直接对这些数据进行直接操作，从而加快了传输速度。</li></ul><h2 id="编写一个HelloWorld"><a href="#编写一个HelloWorld" class="headerlink" title="编写一个HelloWorld"></a>编写一个HelloWorld</h2><p>服务端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 创建2个线程，一个是负责接收客户端的连接。一个是负责进行数据传输的</span>        EventLoopGroup pGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup cGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 创建服务器辅助类</span>        ServerBootstrap b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>pGroup<span class="token punctuation">,</span> cGroup<span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_SNDBUF<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_RCVBUF<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//设置特殊分隔符</span>                ByteBuf buf <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"$_"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelimiterBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置字符串形式的解码</span>                sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4 绑定连接</span>        ChannelFuture cf <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8765</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待服务器监听端口关闭</span>        cf<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>服务端消息处理类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通道刚被激活时会调用次方法     * @param ctx     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server channel active... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 读取消息方法     * @param ctx     * @param msg     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        String body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server :"</span> <span class="token operator">+</span> body <span class="token punctuation">)</span><span class="token punctuation">;</span>        String response <span class="token operator">=</span> <span class="token string">"进行返回给客户端的响应："</span> <span class="token operator">+</span> body <span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 读取完毕后处理方法     * @param ctx     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读完了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 这个方法会在发生异常时触发     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * exceptionCaught() 事件处理方法是当出现 Throwable 对象才会被调用，即当 Netty 由于 IO         * 错误或者处理器在处理事件时抛出的异常时。在大部分情况下，捕获的异常应该被记录下来 并且把关联的 channel         * 给关闭掉。然而这个方法的处理方式会在遇到不同异常的情况下有不 同的实现，比如你可能想在关闭连接之前发送一个错误码的响应消息。         */</span>        <span class="token comment" spellcheck="true">// 出现异常就关闭</span>        t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EventLoopGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bootstrap b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//收到服务端发送过来的消息处理类</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ChannelFuture cf1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            cf1 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8765</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//发送消息</span>            cf1<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"777"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cf1<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cf1<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"888"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//关闭通道</span>            cf1<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>客户端消息处理类</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> 服务端处理通道<span class="token punctuation">.</span>这里只是打印一下请求的内容，并不对请求进行任何的响应 DiscardServerHandler 继承自 <span class="token operator">*</span> ChannelHandlerAdapter， 这个类实现了ChannelHandler接口， ChannelHandler提供了许多事件处理的接口方法， <span class="token operator">*</span> 然后你可以覆盖这些方法。 现在仅仅只需要继承ChannelHandlerAdapter类而不是你自己去实现接口方法。 <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通道刚被激活时会调用次方法     * @param ctx     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client channel active... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**这里我们覆盖了chanelRead()事件处理方法。 每当从客户端收到新的数据时， 这个方法会在收到消息时被调用，     * 读取消息处理方法     * @param ctx  通道处理的上下文信息     * @param msg  接收的消息     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            String body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String response <span class="token operator">=</span> <span class="token string">"收到服务器端的返回信息："</span> <span class="token operator">+</span> body<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 抛弃收到的数据</span>            ReferenceCountUtil<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+hexo搭建个人静态博客</title>
      <link href="/2018/09/22/sui-bi/hello-world/"/>
      <url>/2018/09/22/sui-bi/hello-world/</url>
      
        <content type="html"><![CDATA[<ul><li>写博客的好处是我们用博客表达自己、升华自己。</li><li>平时学习新知识总是经常性会遗忘部分内容，使用过有道云，印象笔记，公众号，缺金社区，csdn,Github,码云等等记录了零零散散一些内容。所以准备使用hexo做一个归纳</li></ul><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>首选安装好node.js和npm</p><h4 id="安装-Heox"><a href="#安装-Heox" class="headerlink" title="安装 Heox"></a>安装 Heox</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><pre class=" language-bash"><code class="language-bash">$ hexo init<span class="token comment" spellcheck="true"># 会生成如下文件</span>├── .deploy <span class="token comment" spellcheck="true">#需要部署的文件</span>├── node_modules <span class="token comment" spellcheck="true">#Hexo插件</span>├── public <span class="token comment" spellcheck="true">#生成的静态网页文件</span>├── scaffolds <span class="token comment" spellcheck="true">#模板</span>├── <span class="token function">source</span> <span class="token comment" spellcheck="true">#博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><span class="token operator">|</span> ├── _drafts <span class="token comment" spellcheck="true">#草稿</span><span class="token operator">|</span> └── _posts <span class="token comment" spellcheck="true">#文章</span>├── themes <span class="token comment" spellcheck="true">#主题</span>├── _config.yml <span class="token comment" spellcheck="true">#全局配置文件</span>└── package.json</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="发表草稿。"><a href="#发表草稿。" class="headerlink" title="发表草稿。"></a>发表草稿。</h3><pre class=" language-bash"><code class="language-bash">$ hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span></code></pre><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy<span class="token comment" spellcheck="true">#打包并上传的github</span>$ hexo d -g</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo clean</code></pre><h3 id="列出网站资料"><a href="#列出网站资料" class="headerlink" title="列出网站资料"></a>列出网站资料</h3><pre class=" language-bash"><code class="language-bash">$ hexo list <span class="token operator">&lt;</span>type<span class="token operator">></span></code></pre><h3 id="显示-Hexo-版本"><a href="#显示-Hexo-版本" class="headerlink" title="显示 Hexo 版本"></a>显示 Hexo 版本</h3><pre class=" language-bash"><code class="language-bash">$ hexo version</code></pre><h3 id="hexo自定义页面"><a href="#hexo自定义页面" class="headerlink" title="hexo自定义页面"></a>hexo自定义页面</h3><pre class=" language-bash"><code class="language-bash">使用：hexo new page <span class="token string">"about"</span> 新建一个 关于我 页面。 使用： hexo new page tags 新建一个 标签 页面。 使用： hexo new page categories 新建一个 分类 页面。 使用： hexo new page <span class="token string">"guestbook"</span> 新建一个 自定义 页面。 </code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(六)storm和kafka集成</title>
      <link href="/2018/09/21/storm/storm-xi-lie-liu-storm-he-kafka-ji-cheng/"/>
      <url>/2018/09/21/storm/storm-xi-lie-liu-storm-he-kafka-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="使用kafka-client-jar进行Storm-Apache-Kafka集成"><a href="#使用kafka-client-jar进行Storm-Apache-Kafka集成" class="headerlink" title="使用kafka-client jar进行Storm Apache Kafka集成"></a>使用kafka-client jar进行Storm Apache Kafka集成</h2><p>这包括新的Apache Kafka消费者API。兼容性 Apache Kafka版本0.10起<br>引入jar包</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>storm<span class="token operator">-</span>kafka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="从kafka中订阅消息读取"><a href="#从kafka中订阅消息读取" class="headerlink" title="从kafka中订阅消息读取"></a>从kafka中订阅消息读取</h2><p>通过使用KafkaSpoutConfig类来配置spout实现。此类使用Builder模式，可以通过调用其中一个Builders构造函数或通过调用KafkaSpoutConfig类中的静态方法构建器来启动。</p><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><p>创建一个简单的不kafka数据源<br>以下将使用发布到“topic”的所有事件，并将它们发送到MyBolt，其中包含“topic”，“partition”，“offset”，“key”，“value”字段。</p><pre class=" language-java"><code class="language-java">  TopologyBuilder tp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tp<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"kafka_spout"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">KafkaSpout</span><span class="token punctuation">(</span>KafkaSpoutConfig<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">"localhost:9092"</span> <span class="token punctuation">,</span> <span class="token string">"qxw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tp<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"kafka_spout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Config cfg<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cfg<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定工作进程数  （jvm数量，分布式环境下可用，本地模式设置无意义）</span>            cfg<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LocalCluster locl<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             locl<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"kkafka-topo"</span><span class="token punctuation">,</span>cfg<span class="token punctuation">,</span>tp<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">MyBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBasicBolt</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple tuple<span class="token punctuation">,</span> BasicOutputCollector basicOutputCollector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受订阅kafka消息：  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受订阅kafka消息：  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer outputFieldsDeclarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(五)DRPC实现远程调用</title>
      <link href="/2018/09/20/storm/storm-xi-lie-wu-drpc-shi-xian-yuan-cheng-diao-yong/"/>
      <url>/2018/09/20/storm/storm-xi-lie-wu-drpc-shi-xian-yuan-cheng-diao-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Trident简介"><a href="#Trident简介" class="headerlink" title="Trident简介"></a>Trident简介</h2><ul><li>Trident拥有一流的抽象，可以读取和写入有状态的来源。状态可以是拓扑的内部 - 例如，保存在内存中并由HDFS支持 -  或者外部存储在Memcached或Cassandra等数据库中。在任何一种情况下，Trident API都没有区别。</li><li>Trident以容错的方式管理状态，以便状态更新在重试和失败时是幂等的。这使您可以推理Trident拓扑，就好像每条消息都是精确处理一次一样。</li><li>在进行状态更新时，可以实现各种级别的容错<h2 id="例子说明"><a href="#例子说明" class="headerlink" title="例子说明"></a>例子说明</h2>假设您正在对流进行计数聚合，并希望将运行计数存储在数据库中。现在假设您在数据库中存储了一个表示计数的值，并且每次处理新元组时都会增加计数。</li></ul><p>发生故障时，将重发送元组。这会在执行状态更新（或任何带有副作用的事物）时出现问题 - 您不知道以前是否曾基于此元组成功更新状态。也许你以前从未处理过元组，在这种情况下你应该增加计数。也许你已经处理了元组并成功递增了计数，但是元组在另一个步骤中处理失败。在这种情况下，您不应增加计数。或许您之前看过元组但在更新数据库时出错。在这种情况下，您应该更新数据库。</p><p>只需将计数存储在数据库中，您就不知道之前是否已经处理过这个元组。因此，您需要更多信息才能做出正确的决定。Trident提供以下语义，足以实现一次性处理语义：</p><ol><li>元组作为小批量处理</li><li>每批元组都有一个称为“事务ID”（txid）的唯一ID。如果批量重播，则给出完全相同的txid</li><li>批次之间订购状态更新。也就是说，在批处理2的状态更新成功之前，不会应用批处理3的状态更新。</li></ol><p>使用这些原语，您的State实现可以检测之前是否已经处理了一批元组，并采取适当的操作以一致的方式更新状态。您采取的操作取决于输入splot提供的确切语义，即每批中的内容。在容错方面有三种可能的splot：“非事务性”，“事务性”和“不透明事务性”。同样，在容错方面有三种可能的状态：“非事务性”，“事务性”和“不透明事务性”。让我们来看看每个splot类型，看看每种喷口可以达到什么样的容错能力。</p><h2 id="Transactional-spout-事物性spouts"><a href="#Transactional-spout-事物性spouts" class="headerlink" title="Transactional spout(事物性spouts)"></a>Transactional spout(事物性spouts)</h2><p>请记住，Trident将元组作为小批量处理，每个批次都被赋予唯一的事务ID。spout的属性根据它们可以提供的关于每批中的含量的保证而变化。事务性spout具有以下属性：</p><ol><li>给定txid的批次始终相同。对txid进行批量重放将与第一次为该txid发出批次完全相同的元组集。</li><li>批处理元组之间没有重叠（元组是一批或另一批，从不多元组）。</li><li>每个元组都是一个批处理（没有跳过元组）<br>这是一个非常容易理解的事物性spout，将流分为不变的固定批次。Storm 为Kafka 实施了一个事务spout。</li></ol><p><strong>为什么不总是使用事务性spout？</strong><br>它们简单易懂。您可能不使用它的一个原因是因为它们不一定非常容错。例如，TransactionalTridentKafkaSpout的工作方式是txid的批处理将包含来自主题的所有Kafka分区的元组。一旦批次被发出，那么在将来重新发出批次的任何时候都必须发出完全相同的元组集合以满足事务性喷口的语义。现在假设从TransactionalTridentKafkaSpout发出批处理，批处理无法处理，同时其中一个Kafka节点发生故障。您现在无法重播与之前相同的批次（因为节点已关闭且主题的某些分区不可用），</p><p>这就是存在“不透明事务”spout的原因 - 它们对丢失源节点具有容错能力，同时仍允许您实现一次性处理语义。</p><p>（一方面注意 - 一旦Kafka支持复制，就有可能拥有对节点故障具有容错能力的事务性spout，但该功能尚不存在。）</p><p>假设您的拓扑计算字数，并且您希望将字数存储在键/值数据库中。键将是单词，值将包含计数。您已经看到只存储计数，因为该值不足以知道您之前是否处理过一批元组。相反，您可以做的是将事务id与数据库中的count一起存储为原子值。然后，在更新计数时，您只需将数据库中的事务ID与当前批次的事务ID进行比较。如果它们是相同的，则跳过更新 - 由于强大的排序，您确定数据库中的值包含当前批次。如果它们不同，则增加计数。这个逻辑有效，因为txid的批处理永远不会改变，</p><p>假设您正在处理由以下一批元组组成的txid 3：</p><pre><code>[&quot;man&quot;][&quot;man&quot;][&quot;dog&quot;]</code></pre><p>假设数据库当前包含以下键/值对：</p><pre><code>man =&gt; [count=3, txid=1]dog =&gt; [count=4, txid=3]apple =&gt; [count=10, txid=2]</code></pre><p>与“man”关联的txid为txid 1.由于当前txid为3，因此您确定该批次中未表示此批元组。因此，您可以继续将计数增加2并更新txid。另一方面，“dog”的txid与当前的txid相同。因此，您确定已知当前批次的增量已在数据库中表示为“dog”键。所以你可以跳过更新。完成更新后，数据库如下所示：</p><pre><code>man =&gt; [count=5, txid=3]dog =&gt; [count=4, txid=3]apple =&gt; [count=10, txid=2]</code></pre><h2 id="不透明事务性-模糊事务型"><a href="#不透明事务性-模糊事务型" class="headerlink" title="不透明事务性(模糊事务型)"></a>不透明事务性(模糊事务型)</h2><p>模糊事务型spout不能保证txid的一批元组保持不变。不透明的事务性spout具有以下属性：</p><ol><li>每个元组只需一批成功处理。但是，元组可能无法在一个批处理中处理，然后在稍后的批处理中成功处理。</li><li>对于不透明的事务性spout，如果数据库中的事务id与当前批处理的事务id相同，则不再可能使用跳过状态更新的技巧。这是因为批次可能在状态更新之间发生了变化。</li></ol><h2 id="非事务型-spout"><a href="#非事务型-spout" class="headerlink" title="非事务型 spout"></a>非事务型 spout</h2><p>非事务型 spout不对每批中的物品提供任何保证。因此它可能最多只进行一次处理，在这种情况下，在批次失败后不会重试元组。或者它可能具有至少一次处理，其中元组可以通过多个批次成功处理。对于这种spout，没有办法实现完全一次的语义。</p><h2 id="不同类型的-Spout-与-State-的总结"><a href="#不同类型的-Spout-与-State-的总结" class="headerlink" title="不同类型的 Spout 与 State 的总结"></a>不同类型的 Spout 与 State 的总结</h2><p>模糊事务型 state 具有最好的容错性特征，不过这是以在数据库中存储更多的内容为代价的（一个 txid 和两个 value）。事务型 state 要求的存储空间相对较小，但是它的缺点是只对事务型 spout 有效。相对的，非事务型要求的存储空间最少，但是它也不能提供任何的恰好一次的消息执行语义。</p><p>你选择 state 与 spout 的时候必须在容错性与存储空间占用之间权衡。可以根据你的应用的需求来确定哪种组合最适合你。</p><h2 id="Trident代码实例"><a href="#Trident代码实例" class="headerlink" title="Trident代码实例"></a>Trident代码实例</h2><p>简单输出数据</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TridentTopology1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 接受一组输入字段并发出零个或多个元组作为输出 （类似storm bolt数据流处理组件）     * @author qxw     * @data 2018年9月19日下午6:17:14     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunction</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFunction</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>TridentTuple tuple<span class="token punctuation">,</span> TridentCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a:  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b:  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c:  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d:  "</span><span class="token operator">+</span>tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//固定批处理数据源（类似storm原生的spout） 声明2个输入的字段</span>        FixedBatchSpout spout <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FixedBatchSpout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置批处理大小</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置数据内容</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否循环发送</span>        spout<span class="token punctuation">.</span><span class="token function">setCycle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建topology</span>        TridentTopology topology <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TridentTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定数据源</span>         Stream input<span class="token operator">=</span>topology<span class="token punctuation">.</span><span class="token function">newStream</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">,</span> spout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要实现storm原生spolt--bolt的模式在Trident中用each实现</span>         input<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token keyword">new</span> <span class="token class-name">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//执行函数 类似bolt</span>                 <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//为空不向下发送</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>        Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaxSpoutPending</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"TridentTopology1"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Trident操作-flters海量数据过滤"><a href="#Trident操作-flters海量数据过滤" class="headerlink" title="Trident操作 - flters海量数据过滤"></a>Trident操作 - flters海量数据过滤</h2><p>通过要继承BaseFilter，重写isKeep方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TridentTopology2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 可以海量数据进行过滤，需要继承BaseFilter，重写isKeep方法     * @author qxw     * @data 2018年9月21日上午10:57:00     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFilter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isKeep</span><span class="token punctuation">(</span>TridentTuple tuple<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//能够被2对第1个和第2个值进行相加.然后除2，为0则发射，不为零则不发射射</span>                   <span class="token keyword">return</span> tuple<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 类似原生storm bolt数据流处理组件     * @author qxw     * @data 2018年9月21日下午3:31:12     */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunction</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFunction</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>TridentTuple tuple<span class="token punctuation">,</span> TridentCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取tuple输入内容</span>        Integer a <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer b <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer c <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer d <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getIntegerByField</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a: "</span><span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">", b: "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">", c: "</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">", d: "</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//固定批处理数据源（类似storm原生的spout） 声明a,b,c,d四个字段</span>        FixedBatchSpout spout <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FixedBatchSpout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设置批处理大小</span>                        <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//设置数据内容</span>         <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//是否循环发送</span>         spout<span class="token punctuation">.</span><span class="token function">setCycle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建topology</span>         TridentTopology topology <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TridentTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定数据源</span>         Stream input<span class="token operator">=</span>topology<span class="token punctuation">.</span><span class="token function">newStream</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">,</span> spout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要实现storm原生spolt--bolt的模式在Trident中用each实现 (随机分组)</span>         input<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//本地模式</span>         Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         conf<span class="token punctuation">.</span><span class="token function">setMaxSpoutPending</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"TridentTopology2"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//集群模式</span><span class="token comment" spellcheck="true">//         StormSubmitter.submitTopology("TridentTopology1", conf, buildTopology());</span>    <span class="token punctuation">}</span></code></pre><h2 id="Triden-实现单词计数统计"><a href="#Triden-实现单词计数统计" class="headerlink" title="Triden 实现单词计数统计"></a>Triden 实现单词计数统计</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TridentWordCount</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunction</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFunction</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>TridentTuple tuple<span class="token punctuation">,</span> TridentCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String word<span class="token operator">=</span>tuple<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Long count<span class="token operator">=</span>tuple<span class="token punctuation">.</span><span class="token function">getLongByField</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>word<span class="token operator">+</span><span class="token string">"   :  "</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 创建spout */</span>        FixedBatchSpout spout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedBatchSpout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"sentence"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token string">"java php asd java"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token string">"php css js html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token string">"js php java java"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span><span class="token string">"a a b c d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//是否循环发送</span>        spout<span class="token punctuation">.</span><span class="token function">setCycle</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 创建topology */</span>        TridentTopology topology <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TridentTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 创建Stream spout1, 分词、统计 */</span>        topology<span class="token punctuation">.</span><span class="token function">newStream</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">,</span> spout<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//先切割</span>                        <span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"sentence"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//分组</span>                        <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">//聚合统计</span>                        <span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//输出函数</span>                        <span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">,</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//设置并行度</span>                        <span class="token punctuation">.</span><span class="token function">parallelismHint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaxSpoutPending</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"TridentWordCount"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Trident-实现Drpc"><a href="#Trident-实现Drpc" class="headerlink" title="Trident 实现Drpc"></a>Trident 实现Drpc</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TridentDrpc</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyFunction</span> <span class="token keyword">extends</span> <span class="token class-name">BaseFunction</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>TridentTuple tridentTuple<span class="token punctuation">,</span> TridentCollector tridentCollector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String sentence <span class="token operator">=</span> tridentTuple<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> sentence<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tridentCollector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvalidTopologyException<span class="token punctuation">,</span> AuthorizationException<span class="token punctuation">,</span> AlreadyAliveException <span class="token punctuation">{</span>        TridentTopology topology<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TridentTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaxSpoutPending</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//本地模式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LocalDRPC drpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalDRPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Stream input<span class="token operator">=</span>topology<span class="token punctuation">.</span><span class="token function">newDRPCStream</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>drpc<span class="token punctuation">)</span><span class="token punctuation">;</span>            input<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"args"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"wordCount"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DRPC RESULT: "</span> <span class="token operator">+</span> drpc<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token string">"cat the dog jumped"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            drpc<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cluster<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//集群模式</span>            conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StormSubmitter<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> topology<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>官方文档：<a href="https://github.com/apache/storm/blob/master/docs/Trident-state.md" target="_blank" rel="noopener">https://github.com/apache/storm/blob/master/docs/Trident-state.md</a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(四)并行度和流分组</title>
      <link href="/2018/09/19/storm/storm-xi-lie-si-bing-xing-du-he-liu-fen-zu/"/>
      <url>/2018/09/19/storm/storm-xi-lie-si-bing-xing-du-he-liu-fen-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="并行度-parallelism-概念"><a href="#并行度-parallelism-概念" class="headerlink" title="并行度(parallelism)概念"></a>并行度(parallelism)概念</h2><ul><li>一个运行中的拓扑是由什么构成的：工作进程（worker processes），执行器（executors）和任务（tasks）</li><li>在 Worker 中运行的是拓扑的一个子集。一个 worker 进程是从属于某一个特定的拓扑的，在 worker<br>进程中会运行一个或者多个与拓扑中的组件相关联的 executor。一个运行中的拓扑就是由这些运行于 Storm集群中的很多机器上的进程组成的。s</li><li>一个 executor 是由 worker 进程生成的一个线程。在 executor 中可能会有一个或者多个 task，这些 task<br>都是为同一个组件（spout 或者 bolt）服务的。</li><li>task 是实际执行数据处理的最小工作单元（注意，task 并不是线程） —— 在你的代码中实现的每个 spout 或者 bolt 都会在集群中运行很多个 task。在拓扑的整个生命周期中每个组件的 task 数量都是保持不变的，不过每个组件的 executor数量却是有可能会随着时间变化。在默认情况下 task 的数量是和 executor 的数量一样的，也就是说，默认情况下 Storm会在每个线程上运行一个 task。</li></ul><h2 id="Storm的流分组策略"><a href="#Storm的流分组策略" class="headerlink" title="Storm的流分组策略"></a>Storm的流分组策略</h2><ul><li>Storm的分组策略对结果有着直接的影响，不同的分组的结果一定是不一样的。其次，不同的分组策略对资源的利用也是有着非常大的不同</li><li>拓扑定义的一部分就是为每个Bolt指定输入的数据流，而数据流分组则定义了在Bolt的task之间如何分配数据流。</li></ul><h2 id="八种流分组定义"><a href="#八种流分组定义" class="headerlink" title="八种流分组定义"></a>八种流分组定义</h2><p><strong>Shuffle grouping:</strong></p><ul><li>随机分组：随机的将tuple分发给bolt的各个task，每个bolt实例接收到相同数量的tuple。</li></ul><p><strong>Fields grouping:</strong></p><ul><li>按字段分组：根据指定的字段的值进行分组，举个栗子，流按照“user-id”进行分组，那么具有相同的“user-id”的tuple会发到同一个task，而具有不同“user-id”值的tuple可能会发到不同的task上。这种情况常常用在单词计数，而实际情况是很少用到，因为如果某个字段的某个值太多，就会导致task不均衡的问题。</li></ul><p><strong>Partial Key grouping:</strong></p><ul><li>部分字段分组：流由分组中指定的字段分区，如“字段”分组，但是在两个下游Bolt之间进行负载平衡，当输入数据歪斜时，可以更好地利用资源。优点。有了这个分组就完全可以不用Fields grouping了</li></ul><p><strong>All grouping:</strong></p><ul><li>广播分组：将所有的tuple都复制之后再分发给Bolt所有的task，每一个订阅数据流的task都会接收到一份相同的完全的tuple的拷贝。</li></ul><p><strong>Global grouping:</strong></p><ul><li>全局分组：这种分组会将所有的tuple都发到一个taskid最小的task上。由于所有的tuple都发到唯一一个task上，势必在数据量大的时候会造成资源不够用的情况。</li></ul><p><strong>None grouping</strong>:</p><ul><li>不分组：不指定分组就表示你不关心数据流如何分组。目前来说不分组和随机分组效果是一样的，但是最终，Storm可能会使用与其订阅的bolt或spout在相同进程的bolt来执行这些tuple</li></ul><p><strong>Direct grouping:</strong></p><ul><li>指向分组：这是一种特殊的分组策略。以这种方式分组的流意味着将由元组的生成者决定消费者的哪个task能接收该元组。指向分组只能在已经声明为指向数据流的数据流中声明。tuple的发射必须使用emitDirect种的一种方法。Bolt可以通过使用TopologyContext或通过在OutputCollector（返回元组发送到的taskID）中跟踪emit方法的输出来获取其消费者的taskID。</li></ul><p><strong>Local or shuffle grouping:</strong><br>本地或随机分组：和随机分组类似，但是如果目标Bolt在同一个工作进程中有一个或多个任务，那么元组将被随机分配到那些进程内task。简而言之就是如果发送者和接受者在同一个worker则会减少网络传输，从而提高整个拓扑的性能。有了此分组就完全可以不用shuffle grouping了。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>修改上一章节的Topology<br><a href="https://juejin.im/post/5c3024395188252584691be0" target="_blank" rel="noopener">Storm(三)Java编写第一个本地模式demo</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>topology<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>LocalCluster<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>TopologyBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>OutBolt<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>OutBolt2<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 拓扑的并行性 * @author qxw * @data 2018年9月17日下午2:49:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopologyTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置</span>        Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定工作进程数  （jvm数量，分布式环境下可用，本地模式设置无意义）</span>        cfg<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造拓扑流程图</span>        TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据源（产生2个执行器和俩个任务）</span>        builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNumTasks</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据建流处理组件（产生2个执行器和4个任务）</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"out-bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNumTasks</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//随机分组</span>        <span class="token comment" spellcheck="true">//设置bolt的并行度和任务数:（产生6个执行器和6个任务）</span><span class="token comment" spellcheck="true">//        builder.setBolt("out-bol2", new OutBolt2(),6).shuffleGrouping("out-bolt").setNumTasks(6); //随机分组</span>        <span class="token comment" spellcheck="true">//设置字段分组（产生8个执行器和8个任务）字段分组 </span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"out-bol2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutBolt2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fieldsGrouping</span><span class="token punctuation">(</span><span class="token string">"out-bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"outdata"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNumTasks</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置广播分组</span>        <span class="token comment" spellcheck="true">//builder.setBolt("write-bolt", new OutBolt2(), 4).allGrouping("print-bolt");</span>        <span class="token comment" spellcheck="true">//设置全局分组</span>        <span class="token comment" spellcheck="true">//builder.setBolt("write-bolt", new OutBolt2(), 4).globalGrouping("print-bolt");</span>        <span class="token comment" spellcheck="true">//1 本地模式</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交拓扑图  会一直轮询执行</span>        cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"topo"</span><span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 集群模式</span><span class="token comment" spellcheck="true">//        StormSubmitter.submitTopology("topo", cfg, builder.createTopology());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(三)java编写第个storm程序</title>
      <link href="/2018/09/18/storm/storm-xi-lie-san-java-bian-xie-di-ge-storm-cheng-xu/"/>
      <url>/2018/09/18/storm/storm-xi-lie-san-java-bian-xie-di-ge-storm-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h2><p>在本地模式下，Storm拓扑结构运行在本地计算机的单一JVM进程上。这个模式用于开发、测试以及调试，因为这是观察所有组件如何协同工作的最简单方法。在这种模式下，我们可以调整参数，观察我们的拓扑结构如何在不同的Storm配置环境下运行。要在本地模式下运行，我们要下载Storm开发依赖，以便用来开发并测试我们的拓扑结构。我们创建了第一个Storm工程以后，很快就会明白如何使用本地模式了。<br>NOTE: 在本地模式下，跟在集群环境运行很像。不过很有必要确认一下所有组件都是线程安全的，因为当把它们部署到远程模式时它们可能会运行在不同的JVM进程甚至不同的物理机上，这个时候它们之间没有直接的通讯或共享内存。 </p><h2 id="远程模式"><a href="#远程模式" class="headerlink" title="远程模式"></a>远程模式</h2><p>在远程模式下，我们向Storm集群提交拓扑，它通常由许多运行在不同机器上的流程组成。远程模式不会出现调试信息， 因此它也称作生产模式。不过在单一开发机上建立一个Storm集群是一个好主意，可以在部署到生产环境之前，用来确认拓扑在集群环境下没有任何问题。</p><h2 id="常用Java-api"><a href="#常用Java-api" class="headerlink" title="常用Java api"></a>常用Java api</h2><p>1）基本接口</p><pre class=" language-java"><code class="language-java">   （<span class="token number">1</span>）IComponent接口   （<span class="token number">2</span>）ISpout接口   （<span class="token number">3</span>）IRichSpout接口   （<span class="token number">4</span>）IStateSpout接口   （<span class="token number">5</span>）IRichStateSpout接口   （<span class="token number">6</span>）IBolt接口   （<span class="token number">7</span>）IRichBolt接口   （<span class="token number">8</span>）IBasicBolt接口</code></pre><p>2）基本抽象类</p><pre class=" language-java"><code class="language-java">（<span class="token number">1</span>）BaseComponent抽象类（<span class="token number">2</span>）BaseRichSpout抽象类（<span class="token number">3</span>）BaseRichBolt抽象类（<span class="token number">4</span>）BaseTransactionalBolt抽象类（<span class="token number">5</span>）BaseBasicBolt抽象类</code></pre><p>创建数据源（Spouts )</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>spout<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>SpoutOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichSpout<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据源 spout * @author qxw * @data 2018年9月17日上午11:21:00 *  * 申明数据源的方式：继承BaseRichSpout类 ， 重写需要的方法。实现IRichSpout接口 重写所有的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSource</span>  <span class="token keyword">extends</span> <span class="token class-name">BaseRichSpout</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> SpoutOutputCollector collector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"groovy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"ruby"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Map conf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> SpoutOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 轮询tuple 发送数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里可以查询数据库 或者读取消息队列中的数据、测试使用map替代</span>        <span class="token keyword">final</span> Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//发送单词到下一个拓扑节点</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明发送数据的名称     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//指定名称 用于下一个节店取值时使用</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在该spout关闭前执行，但是并不能得到保证其一定被执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spout关闭前执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  当Spout已经从失效模式中激活时被调用。该Spout的nextTuple()方法很快就会被调用。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当Spout已经从失效模式中激活时被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 当Spout已经失效时被调用。在Spout失效期间，nextTuple不会被调用。Spout将来可能会也可能不会被重新激活。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当Spout已经失效时被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 成功处理tuple回调方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ack</span><span class="token punctuation">(</span>Object paramObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功处理tuple回调方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理失败tuple回调方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>Object paramObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"paramObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数据流处理组件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>BasicOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseBasicBolt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据库流处理组件 *  * 打印出输处理的bolt * 实现方式：继承BaseBasicBolt类  或实现IBasicBolt * @author qxw * @data 2018年9月17日上午11:36:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBasicBolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 接受一个tuple进行处理，也可发送数据到下一级组件     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">,</span> BasicOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">////获取上一个组件所声明的Field</span>        String value<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据源发送的data: "</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送到下一个组件</span>        collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明发送数据的名称     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可同时发送多个Field</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"outdata"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>BasicOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseBasicBolt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据库流处理组件 *  * 打印出输处理的bolt * 实现方式：继承BaseBasicBolt类  或实现IBasicBolt * @author qxw * @data 2018年9月17日上午11:36:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutBolt2</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBasicBolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 接受一个tuple进行处理，也可发送数据到下一级组件     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">,</span> BasicOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">////获取上一个组件所声明的Field</span>        String value<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"outdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收OutBolt数据库流处理组件发送的值：   "</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明发送数据的名称     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>构造拓扑图</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>topology<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>LocalCluster<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>TopologyBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>OutBolt<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>OutBolt2<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopologyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置</span>        Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定工作进程数  （jvm数量，分布式环境下可用，本地模式设置无意义）</span>        cfg<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造拓扑流程图</span>        TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据源</span>        builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置数据建流处理组件</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"out-bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机分组</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"out-bol2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutBolt2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"out-bolt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1 本地模式</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交拓扑图  会一直轮询执行</span>        cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"topo"</span><span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 集群模式</span><span class="token comment" spellcheck="true">//        StormSubmitter.submitTopology("topo", cfg, builder.createTopology());</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="storm实现单词计数器统计"><a href="#storm实现单词计数器统计" class="headerlink" title="storm实现单词计数器统计"></a>storm实现单词计数器统计</h2><p><img src="https://user-gold-cdn.xitu.io/2019/1/5/1681c0d7a465181f?w=298&amp;h=264&amp;f=png&amp;s=14505" alt="在这里插入图片描述"></p><p><strong>数据源Spout</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>wordCount<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>SpoutOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>IRichSpout<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 数据源 * @author qxw * @data 2018年9月18日上午11:58:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordSpout</span> <span class="token keyword">implements</span> <span class="token class-name">IRichSpout</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> SpoutOutputCollector collector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> lines <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"long long ago I like playing with cat"</span><span class="token punctuation">,</span>                <span class="token string">"playing with cat make me happy"</span><span class="token punctuation">,</span>                <span class="token string">"I feel happy to be with you"</span><span class="token punctuation">,</span>                <span class="token string">"you give me courage"</span><span class="token punctuation">,</span>                <span class="token string">"I like to be together with you"</span><span class="token punctuation">,</span>                <span class="token string">"long long ago I like you"</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Map conf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span>SpoutOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token operator">=</span>collector<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//发送数据</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">>=</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ack</span><span class="token punctuation">(</span>Object msgId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>Object msgId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getComponentConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>切割组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordSplitBolt</span> <span class="token keyword">implements</span> <span class="token class-name">IRichBolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>     <span class="token keyword">private</span> OutputCollector collector<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span>OutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">/**     * 这个函数也会被不断执行，但它的数据来自于上游。     * 这里将文本行分割为单词，并发送     * @param tuple     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token punctuation">{</span>         String line <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>String word <span class="token operator">:</span> words<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getComponentConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>统计组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountBolt</span> <span class="token keyword">implements</span> <span class="token class-name">IRichBolt</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> OutputCollector collector<span class="token punctuation">;</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> counts<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化放方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span>OutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>counts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 统计单词出现的次数 一般是存储到数据库     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String word<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Long count <span class="token operator">=</span> 1L<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             count <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>         counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"统计单词："</span><span class="token operator">+</span>word<span class="token operator">+</span><span class="token string">" 出现次数: "</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">,</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getComponentConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>输出组件</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordReportBolt</span> <span class="token keyword">implements</span> <span class="token class-name">IRichBolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span>            OutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String word<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long count<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">getLongByField</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"实时统计单词出现次数  "</span><span class="token operator">+</span><span class="token string">"%s\t%d\n"</span><span class="token punctuation">,</span> word<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getComponentConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Topology主函数类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordTopology</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 组建拓扑，并使用流分组</span>        TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"WordSpout"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WordSpout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"WordSplitBolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WordSplitBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"WordSpout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"WordCountBolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WordCountBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fieldsGrouping</span><span class="token punctuation">(</span><span class="token string">"WordSplitBolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"WordReportBolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WordReportBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">globalGrouping</span><span class="token punctuation">(</span><span class="token string">"WordCountBolt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置</span>        Config cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalCluster cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//提交拓扑图  会一直轮询执行</span>       cluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"wordcount-topo"</span><span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://user-gold-cdn.xitu.io/2019/1/5/1681c0d7a47ac4a9?w=876&amp;h=258&amp;f=png&amp;s=43581" alt="在这里插入图片描述"></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(二)常用shell命令操作</title>
      <link href="/2018/09/17/storm/storm-xi-lie-er-chang-yong-shell-ming-ling-cao-zuo/"/>
      <url>/2018/09/17/storm/storm-xi-lie-er-chang-yong-shell-ming-ling-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>官方文档<br><a href="http://storm.apache.org/releases/1.2.2/Command-line-client.html" target="_blank" rel="noopener">http://storm.apache.org/releases/1.2.2/Command-line-client.html</a></p><h3 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@web1 apache-storm-1.2.2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bin/storm help</span>Commands:    activate    blobstore    classpath    deactivate    dev-zookeeper    drpc    get-errors    heartbeats    <span class="token function">help</span>    jar    <span class="token function">kill</span>    kill_workers    list    localconfvalue    logviewer    monitor    nimbus    node-health-check    pacemaker    rebalance    remoteconfvalue    repl    set_log_level    shell    sql    supervisor    ui    upload-credentials    versionHelp:     <span class="token function">help</span>     <span class="token function">help</span> <span class="token operator">&lt;</span>command<span class="token operator">></span>Documentation <span class="token keyword">for</span> the storm client can be found at http://storm.apache.org/documentation/Command-line-client.htmlConfigs can be overridden using one or <span class="token function">more</span> -c flags, e.g. <span class="token string">"storm list -c nimbus.host=nimbus.mycompany.com"</span></code></pre><p><strong>activate（激活指定拓扑的spouts。）</strong></p><pre><code>语法：storm activate topology-name</code></pre><p><strong>classpath（在运行命令时打印storm客户端使用的类路径）</strong></p><pre><code>storm classpath</code></pre><p><strong>deactivate  停用指定拓扑的spouts</strong> </p><pre><code>storm deactivate topology-name</code></pre><p><strong>drpc (启动DRPC守护程序)</strong></p><pre><code>storm drpc</code></pre><p><strong>get-errors</strong><br>从正在运行的拓扑中获取最新错误。返回的结果包含组件名称的键值对和错误组件的组件错误。结果以json格式返回</p><pre><code>storm get-errors topology-name</code></pre><p><strong>jar</strong><br>使用指定的参数运行类的主要方法。提交拓扑使用</p><pre><code>storm jar topology-jar-path class ...</code></pre><p><strong>kill</strong><br>使用名称终止拓扑topology-name 您可以使用-w标志覆盖Storm在停用和关闭之间等待的时间长度</p><pre><code>storm kill topology-name [-w wait-time-secs]</code></pre><p><strong>list</strong><br>列出正在运行的拓扑及其状态</p><pre><code>storm list</code></pre><p><strong>localconfvalue</strong><br>打印出本地Storm配置的conf-name的值</p><pre><code>storm localconfvalue conf-name</code></pre><p><strong>logviewer</strong><br>启动Logviewer守护进程</p><pre><code>storm logviewe</code></pre><p><strong>nimbus</strong><br>启动Nimbus守护进程</p><pre><code>storm nimbus</code></pre><p><strong>supervisor</strong> </p><pre><code>storm supervisor</code></pre><p><strong>version</strong></p><pre><code>storm version</code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm系列(一)环境搭建安装</title>
      <link href="/2018/09/12/storm/storm-xi-lie-yi-huan-jing-da-jian-an-zhuang/"/>
      <url>/2018/09/12/storm/storm-xi-lie-yi-huan-jing-da-jian-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Apache-Storm"><a href="#什么是Apache-Storm" class="headerlink" title="什么是Apache Storm"></a>什么是Apache Storm</h3><p>Apache Storm是一个分布式实时大数据处理系统。Storm设计用于在容错和水平可扩展方法中处理大量数据。它是一个流数据框架，具有最高的摄取率。虽然Storm是无状态的，它通过Apache ZooKeeper管理分布式环境和集群状态。它很简单，您可以并行地对实时数据执行各种操作。</p><h3 id="Apache-Storm-和-Hadoop对比"><a href="#Apache-Storm-和-Hadoop对比" class="headerlink" title="Apache Storm 和 Hadoop对比"></a>Apache Storm 和 Hadoop对比</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138034dd15d34?w=704&amp;h=306&amp;f=png&amp;s=46836" alt="输入图片说明"></p><h3 id="Apache-Storm优势"><a href="#Apache-Storm优势" class="headerlink" title="Apache Storm优势"></a>Apache Storm优势</h3><ul><li>storm是开源的，强大的，用户友好的。它可以用于小公司和大公司。</li><li>Storm是容错的，灵活的，可靠的，并且支持任何编程语言。</li><li>允许实时流处理。</li><li>Storm是令人难以置信的快，因为它具有巨大的处理数据的力量。</li><li>Storm可以通过线性增加资源来保持性能，即使在负载增加的情况下。它是高度可扩展的。</li><li>Storm在几秒钟或几分钟内执行数据刷新和端到端传送响应取决于问题。它具有非常低的延迟。</li><li>Storm有操作智能。</li><li>Storm提供保证的数据处理，即使群集中的任何连接的节点死或消息丢失。</li></ul><h2 id="Storm-系统中包含以下几个基本概念："><a href="#Storm-系统中包含以下几个基本概念：" class="headerlink" title="Storm 系统中包含以下几个基本概念："></a>Storm 系统中包含以下几个基本概念：</h2><p><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">拓扑（Topologies）</a><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">这里写链接内容</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">流（Streams）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">数据源（Spouts</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">数据流处理组件（Bolts）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">数据流分组（Stream groupings）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">可靠性（Reliability）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">任务（Tasks）</a><br><a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">工作进程（Workers）</a></p><h3 id="Apache-Storm的组件"><a href="#Apache-Storm的组件" class="headerlink" title="Apache Storm的组件"></a>Apache Storm的组件</h3><p> <strong>Tuple</strong> </p><ul><li><p>Tuple是Storm中的主要数据结构。它是有序元素的列表。默认情况下，Tuple支持所有数据类型。通常，它被建模为一组逗号分隔的值，并传递到Storm集群。</p><p><strong>Stream</strong> </p></li><li><p>流是元组的无序序列。</p><p><strong>Spouts</strong> </p></li><li><p>流的源。通常，Storm从原始数据源（如Twitter Streaming API，Apache Kafka队列，Kestrel队列等）接受输入数据。否则，您可以编写spouts以从数据源读取数据。“ISpout”是实现spouts的核心接口，一些特定的接口是IRichSpout，BaseRichSpout，KafkaSpout等。</p><p><strong>Bolts</strong> </p></li><li>Bolts是逻辑处理单元。Spouts将数据传递到Bolts和Bolts过程，并产生新的输出流。Bolts可以执行过滤，聚合，加入，与数据源和数据库交互的操作。Bolts接收数据并发射到一个或多个Bolts。 “IBolt”是实现Bolts的核心接口。一些常见的接口是IRichBolt，IBasicBolt等。</li></ul><h3 id="Storm工作流程"><a href="#Storm工作流程" class="headerlink" title="Storm工作流程"></a>Storm工作流程</h3><p>一个工作的Storm集群应该有一个Nimbus和一个或多个supervisors。另一个重要的节点是Apache ZooKeeper，它将用于nimbus和supervisors之间的协调。</p><p> <strong>现在让我们仔细看看Apache Storm的工作流程 −</strong> </p><ul><li>最初，nimbus将等待“Storm拓扑”提交给它。</li><li>一旦提交拓扑，它将处理拓扑并收集要执行的所有任务和任务将被执行的顺序。</li><li>然后，nimbus将任务均匀分配给所有可用的supervisors。</li><li>在特定的时间间隔，所有supervisor将向nimbus发送心跳以通知它们仍然运行着。</li><li>当supervisor终止并且不向心跳发送心跳时，则nimbus将任务分配给另一个supervisor。</li><li>当nimbus本身终止时，supervisor将在没有任何问题的情况下对已经分配的任务进行工作。</li><li>一旦所有的任务都完成后，supervisor将等待新的任务进去。</li><li>同时，终止nimbus将由服务监控工具自动重新启动。</li><li>重新启动的网络将从停止的地方继续。同样，终止supervisor也可以自动重新启动。由于网络管理程序和supervisor都可以自动重新启动，并且两者将像以前一样继续，因此Storm保证至少处理所有任务一次。</li><li><p>一旦处理了所有拓扑，则网络管理器等待新的拓扑到达，并且类似地，管理器等待新的任务。</p><p><strong>默认情况下，Storm集群中有两种模式：</strong> </p></li><li>本地模式 -此模式用于开发，测试和调试，因为它是查看所有拓扑组件协同工作的最简单方法。在这种模式下，我们可以调整参数，使我们能够看到我们的拓扑如何在不同的Storm配置环境中运行。在本地模式下，storm拓扑在本地机器上在单个JVM中运行。</li><li>生产模式 -在这种模式下，我们将拓扑提交到工作Storm集群，该集群由许多进程组成，通常运行在不同的机器上。如在storm的工作流中所讨论的，工作集群将无限地运行，直到它被关闭。</li></ul><h3 id="Storm安装（首先安装jdk和zookeeper）"><a href="#Storm安装（首先安装jdk和zookeeper）" class="headerlink" title="Storm安装（首先安装jdk和zookeeper）"></a>Storm安装（首先安装jdk和zookeeper）</h3><p><a href="https://www.apache.org/dyn/closer.lua/storm/apache-storm-1.2.2/apache-storm-1.2.2.tar.gz" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.lua/storm/apache-storm-1.2.2/apache-storm-1.2.2.tar.gz</a><br>下载解压，编辑conf/storm.yaml文件</p><pre><code>##填写zookeeper集群的ip地址或者主机名########### These MUST be filled in for a storm configurationstorm.zookeeper.servers:     - &quot;192.168.2.149&quot;     - &quot;192.168.2.150&quot;     - &quot;192.168.2.151&quot;nimbus.seeds: [&quot;192.168.2.149&quot;]#配置数据存储路径storm.local.dir: &quot;/data/ms/storm-1.1.1/data&quot;##配置节点健康检测storm.health.check.dir: &quot;healthchecks&quot;storm.health.check.timeout.ms: 5000storm.local.hostname: &quot;192.168.2.150&quot;#配置supervisor： 开启几个端口插槽，就开启几个对应的worker进程supervisor.slots.ports:    - 6700    - 6701    - 6702    - 6703</code></pre><p>配置详解 <a href="http://xstarcd.github.io/wiki/Cloud/storm_config_detail.html" target="_blank" rel="noopener">http://xstarcd.github.io/wiki/Cloud/storm_config_detail.html</a></p><h3 id="启动守护进程"><a href="#启动守护进程" class="headerlink" title="启动守护进程"></a>启动守护进程</h3><p>最后一步是启动所有的Storm守护进程。 在监督下运行这些守护进程是非常重要的。 Storm是一个快速失败(fail-fast)系统，意味着只要遇到意外错误，进程就会停止。 Storm的设计可以在任何时候安全停止，并在重新启动过程时正确恢复。 这就是为什么Storm在进程中不保持状态 - 如果Nimbus或Supervisors重新启动，运行的拓扑结构不受影响。 以下是如何运行Storm守护进程：</p><pre><code>Nimbus：在Storm主控节点上运行命令bin/storm nimbus &amp;，启动Nimbus后台程序，并放到后台执行。Supervisor：在Storm各个工作节点上运行命令bin/storm supervisor &amp;。UI： 在Storm主控节点上运行命令bin/storm ui &amp;，启动UI后台程序，并放到后台执行</code></pre><p>访问<a href="http://192.168.1.191:8080" target="_blank" rel="noopener">http://192.168.1.191:8080</a>  成功</p><p>参考链接：<a href="https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md" target="_blank" rel="noopener">https://github.com/weyo/Storm-Documents/blob/master/Manual/zh/Concepts.md</a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> storm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper实现分布式锁和队列</title>
      <link href="/2018/08/29/spring-xi-lie/zookeeper-shi-xian-fen-bu-shi-suo-he-dui-lie/"/>
      <url>/2018/08/29/spring-xi-lie/zookeeper-shi-xian-fen-bu-shi-suo-he-dui-lie/</url>
      
        <content type="html"><![CDATA[<h3 id="Zookeeper客户端（Apache-Curator）"><a href="#Zookeeper客户端（Apache-Curator）" class="headerlink" title="Zookeeper客户端（Apache Curator）"></a>Zookeeper客户端（Apache Curator）</h3><p> <strong>ZooKeeper常用客户端</strong> </p><ul><li>zookeeper自带的客户端是官方提供的，比较底层、使用起来写代码麻烦、不够直接。</li><li>Apache Curator是Apache的开源项目，封装了zookeeper自带的客户端，使用相对简便，易于使用。</li><li><p>zkclient是另一个开源的ZooKeeper客户端，其地址：<a href="https://github.com/adyliu/zkclient生产环境不推荐使用。" target="_blank" rel="noopener">https://github.com/adyliu/zkclient生产环境不推荐使用。</a> </p><p><strong>Curator主要解决了三类问题</strong> </p></li><li>封装ZooKeeper client与ZooKeeper server之间的连接处理</li><li>提供了一套Fluent风格的操作API</li><li>提供ZooKeeper各种应用场景(recipe, 比如共享锁服务, 集群领导选举机制)的抽象封装</li></ul><h3 id="Java操作api"><a href="#Java操作api" class="headerlink" title="Java操作api"></a>Java操作api</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFramework<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFrameworkFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>recipes<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>InterProcessMutex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>ExponentialBackoffRetry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>CreateMode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Stat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  Curator主要解决了三类问题    1.封装ZooKeeper client与ZooKeeper server之间的连接处理    2.提供了一套Fluent风格的操作API    3.提供ZooKeeper各种应用场景(recipe, 比如共享锁服务, 集群领导选举机制)的抽象封装 * @author qxw * @data 2018年8月14日下午2:08:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CuratorAp</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Curator客户端     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 集群模式则是多个ip     */</span><span class="token comment" spellcheck="true">//    private static final String zkServerIps = "192.168.10.124:2182,192.168.10.124:2183,192.168.10.124:2184";</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String zkServerIps <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>client<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>CuratorAp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>client<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//通过工程创建连接</span>                       client<span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span>zkServerIps<span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">connectionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">///连接超时时间</span>                               <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设定会话时间</span>                               <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 重试策略：初试时间为1s 重试10次</span><span class="token comment" spellcheck="true">//                               .namespace("super")  // 设置命名空间以及开始建立连接</span>                               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//开启连接</span>                         client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//分布锁</span>                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> client<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建节点   不加withMode默认为持久类型节点     * @param path  节点路径     * @param value  值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">create</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>            <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建节点      * @param path  节点路径     * @param value  值     * @param modeType 节点类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">create</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String value<span class="token punctuation">,</span>String modeType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//持久型节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//临时节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//持久类型顺序性节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//临时类型顺序性节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取单个节点     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getData</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *获取字节点     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getChildren</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改节点值     * @param path     * @param valu     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">setData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String valu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>valu<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除节点     * @param path     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">delete</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guaranteed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deletingChildrenIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 检测节点是否存在     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span>  <span class="token function">checkExists</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Stat s<span class="token operator">=</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token operator">==</span>null<span class="token operator">?</span> <span class="token boolean">false</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分布式锁 对象     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InterProcessMutex <span class="token function">getLock</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        InterProcessMutex lock<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span>  lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        if(checkExists("/qxw")){</span><span class="token comment" spellcheck="true">//            delete("/qxw");</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q1", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q2", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q3", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        ExecutorService pool = Executors.newCachedThreadPool();</span><span class="token comment" spellcheck="true">//        getConnection().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).inBackground(new BackgroundCallback() {</span><span class="token comment" spellcheck="true">//            public void processResult(CuratorFramework cf, CuratorEvent ce) throws Exception {</span><span class="token comment" spellcheck="true">//                System.out.println("code:" + ce.getResultCode());</span><span class="token comment" spellcheck="true">//                System.out.println("type:" + ce.getType());</span><span class="token comment" spellcheck="true">//                System.out.println("线程为:" + Thread.currentThread().getName());</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        }, pool)</span><span class="token comment" spellcheck="true">//        .forPath("/super/qxw/q4","q4内容".getBytes());</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        System.out.println("读取节点： "+getData("/qxw"));</span><span class="token comment" spellcheck="true">//        System.out.println("读取字节点："+getChildren("/qxw").toString());</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 分布锁演示     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">final</span> InterProcessMutex lock<span class="token operator">=</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"/lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> CountDownLatch c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                                c<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//加锁</span>                        lock<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"___"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            lock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CountDownLatch执行完"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="zookeeper-集群的-监控图形化页面"><a href="#zookeeper-集群的-监控图形化页面" class="headerlink" title="zookeeper 集群的 监控图形化页面"></a>zookeeper 集群的 监控图形化页面</h3><p><a href="https://gitee.com/crystony/zookeeper-web" target="_blank" rel="noopener">https://gitee.com/crystony/zookeeper-web</a></p><p>如果你是gradle用户(2.0以上),请直接执行以下命令运行项目：</p><pre><code>gradle jettyRun</code></pre><p>如果你没使用gralde,执行项目跟路径下的脚本,linux/windows用户执行</p><pre><code>gradlew/gradlew.bat jettyRun</code></pre><p>自动下载gralde完成后,会自动使用jetty启动项目</p><p>如果想将项目导入IDE调试,eclipse用户执行</p><pre><code> gradlew/gradlew.bat eclipse</code></pre><p>idea用户执行</p><pre><code>gradlew/gradlew.bat idea</code></pre><h3 id="zookeeper分布式锁原理"><a href="#zookeeper分布式锁原理" class="headerlink" title="zookeeper分布式锁原理"></a>zookeeper分布式锁原理</h3><p>分布式锁主要用于在分布式环境中保护跨进程、跨主机、跨网络的共享资源实现互斥访问，以达到保证数据的一致性。<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g3s8j9tmj30gv0ddjs0.jpg" alt="输入图片说明"></p><p>左边的整个区域表示一个Zookeeper集群，locker是Zookeeper的一个持久节点，node_1、node_2、node_3是locker这个持久节点下面的临时顺序节点。client_1、client_2、client_n表示多个客户端，Service表示需要互斥访问的共享资源。</p><p> <strong>分布式锁获取思路</strong> </p><ol><li>在获取分布式锁的时候在locker节点下创建临时顺序节点，释放锁的时候删除该临时节点。</li><li>客户端调用createNode方法在locker下创建临时顺序节点，然后调用getChildren(“locker”)来获取locker下面的所有子节点，注意此时不用设置任何Watcher。</li><li>客户端获取到所有的子节点path之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。</li><li>如果发现自己创建的节点并非locker所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时对其注册事件监听器。</li><li>之后，等待它释放锁，也就是等待获取到锁的那个客户端B把自己创建的那个节点删除。，则客户端A的Watcher会收到相应通知，此时再次判断自己创建的节点是否是locker子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点并注册监听。</li></ol><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper客户端Curator入门</title>
      <link href="/2018/08/28/java/apache-curator-ru-men/"/>
      <url>/2018/08/28/java/apache-curator-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="Zookeeper客户端（Apache-Curator）"><a href="#Zookeeper客户端（Apache-Curator）" class="headerlink" title="Zookeeper客户端（Apache Curator）"></a>Zookeeper客户端（Apache Curator）</h3><ul><li>zookeeper自带的客户端是官方提供的，比较底层、使用起来写代码麻烦、不够直接。</li><li>Apache Curator是Apache的开源项目，封装了zookeeper自带的客户端，使用相对简便，易于使用。</li><li>zkclient是另一个开源的ZooKeeper客户端，其地址：<a href="https://github.com/adyliu/zkclient生产环境不推荐使用。" target="_blank" rel="noopener">https://github.com/adyliu/zkclient生产环境不推荐使用。</a><br>   <strong>Curator主要解决了三类问题</strong> </li><li>封装ZooKeeper client与ZooKeeper server之间的连接处理</li><li>提供了一套Fluent风格的操作API</li><li>提供ZooKeeper各种应用场景(recipe, 比如共享锁服务, 集群领导选举机制)的抽象封装</li></ul><h3 id="Java操作api"><a href="#Java操作api" class="headerlink" title="Java操作api"></a>Java操作api</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>qxw<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFramework<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>CuratorFrameworkFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>recipes<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>InterProcessMutex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>curator<span class="token punctuation">.</span>retry<span class="token punctuation">.</span>ExponentialBackoffRetry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>CreateMode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Stat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  Curator主要解决了三类问题    1.封装ZooKeeper client与ZooKeeper server之间的连接处理    2.提供了一套Fluent风格的操作API    3.提供ZooKeeper各种应用场景(recipe, 比如共享锁服务, 集群领导选举机制)的抽象封装 * @author qxw * @data 2018年8月14日下午2:08:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CuratorAp</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Curator客户端     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework client <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 集群模式则是多个ip     */</span><span class="token comment" spellcheck="true">//    private static final String zkServerIps = "192.168.10.124:2182,192.168.10.124:2183,192.168.10.124:2184";</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String zkServerIps <span class="token operator">=</span> <span class="token string">"127.0.0.1:2181"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CuratorFramework <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>client<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>CuratorAp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>client<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//通过工程创建连接</span>                       client<span class="token operator">=</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span>zkServerIps<span class="token punctuation">)</span>                               <span class="token punctuation">.</span><span class="token function">connectionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">///连接超时时间</span>                               <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设定会话时间</span>                               <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 重试策略：初试时间为1s 重试10次</span><span class="token comment" spellcheck="true">//                               .namespace("super")  // 设置命名空间以及开始建立连接</span>                               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//开启连接</span>                         client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//分布锁</span>                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> client<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建节点   不加withMode默认为持久类型节点     * @param path  节点路径     * @param value  值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">create</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>            <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建节点      * @param path  节点路径     * @param value  值     * @param modeType 节点类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">create</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String value<span class="token punctuation">,</span>String modeType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//持久型节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//临时节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//持久类型顺序性节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//临时类型顺序性节点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>modeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//若创建节点的父节点不存在会先创建父节点再创建子节点</span>                <span class="token keyword">return</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentsIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取单个节点     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getData</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *获取字节点     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getChildren</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 修改节点值     * @param path     * @param valu     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">setData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span>String valu<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">,</span>valu<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除节点     * @param path     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">delete</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">guaranteed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deletingChildrenIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 检测节点是否存在     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span>  <span class="token function">checkExists</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Stat s<span class="token operator">=</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token operator">==</span>null<span class="token operator">?</span> <span class="token boolean">false</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分布式锁 对象     * @param path     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InterProcessMutex <span class="token function">getLock</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        InterProcessMutex lock<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"/super"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span>  lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        if(checkExists("/qxw")){</span><span class="token comment" spellcheck="true">//            delete("/qxw");</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q1", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q2", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        System.out.println("创建节点："+create("/qxw/q3", "苏打水法萨芬撒"));</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        ExecutorService pool = Executors.newCachedThreadPool();</span><span class="token comment" spellcheck="true">//        getConnection().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).inBackground(new BackgroundCallback() {</span><span class="token comment" spellcheck="true">//            public void processResult(CuratorFramework cf, CuratorEvent ce) throws Exception {</span><span class="token comment" spellcheck="true">//                System.out.println("code:" + ce.getResultCode());</span><span class="token comment" spellcheck="true">//                System.out.println("type:" + ce.getType());</span><span class="token comment" spellcheck="true">//                System.out.println("线程为:" + Thread.currentThread().getName());</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        }, pool)</span><span class="token comment" spellcheck="true">//        .forPath("/super/qxw/q4","q4内容".getBytes());</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//        System.out.println("读取节点： "+getData("/qxw"));</span><span class="token comment" spellcheck="true">//        System.out.println("读取字节点："+getChildren("/qxw").toString());</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***     * 分布锁演示     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        <span class="token keyword">final</span> InterProcessMutex lock<span class="token operator">=</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"/lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> CountDownLatch c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                                c<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//加锁</span>                        lock<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"___"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            lock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CountDownLatch执行完"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="zookeeper-集群的-监控图形化页面"><a href="#zookeeper-集群的-监控图形化页面" class="headerlink" title="zookeeper 集群的 监控图形化页面"></a>zookeeper 集群的 监控图形化页面</h3><p><a href="https://gitee.com/crystony/zookeeper-web" target="_blank" rel="noopener">https://gitee.com/crystony/zookeeper-web</a></p><p>如果你是gradle用户(2.0以上),请直接执行以下命令运行项目：</p><pre><code>gradle jettyRun</code></pre><p>如果你没使用gralde,执行项目跟路径下的脚本,linux/windows用户执行</p><pre><code>gradlew/gradlew.bat jettyRun</code></pre><p>自动下载gralde完成后,会自动使用jetty启动项目</p><p>如果想将项目导入IDE调试,eclipse用户执行</p><pre><code> gradlew/gradlew.bat eclipse</code></pre><p>idea用户执行</p><pre><code>gradlew/gradlew.bat idea</code></pre><h3 id="zookeeper分布式锁原理"><a href="#zookeeper分布式锁原理" class="headerlink" title="zookeeper分布式锁原理"></a>zookeeper分布式锁原理</h3><p>分布式锁主要用于在分布式环境中保护跨进程、跨主机、跨网络的共享资源实现互斥访问，以达到保证数据的一致性。<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2tsm8jrj30gw0djmxo.jpg" alt></p><p>左边的整个区域表示一个Zookeeper集群，locker是Zookeeper的一个持久节点，node_1、node_2、node_3是locker这个持久节点下面的临时顺序节点。client_1、client_2、client_n表示多个客户端，Service表示需要互斥访问的共享资源。</p><p> <strong>分布式锁获取思路</strong> </p><ol><li>在获取分布式锁的时候在locker节点下创建临时顺序节点，释放锁的时候删除该临时节点。</li><li>客户端调用createNode方法在locker下创建临时顺序节点，然后调用getChildren(“locker”)来获取locker下面的所有子节点，注意此时不用设置任何Watcher。</li><li>客户端获取到所有的子节点path之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。</li><li>如果发现自己创建的节点并非locker所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时对其注册事件监听器。</li><li>之后，等待它释放锁，也就是等待获取到锁的那个客户端B把自己创建的那个节点删除。，则客户端A的Watcher会收到相应通知，此时再次判断自己创建的节点是否是locker子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点并注册监听。</li></ol><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成ElasticSearch6.2</title>
      <link href="/2018/08/28/spring-xi-lie/springboot-ji-cheng-elasticsearch6-2/"/>
      <url>/2018/08/28/spring-xi-lie/springboot-ji-cheng-elasticsearch6-2/</url>
      
        <content type="html"><![CDATA[<h2 id="elasticsearch-Java-High-Level-REST-Client-api"><a href="#elasticsearch-Java-High-Level-REST-Client-api" class="headerlink" title="elasticsearch (Java High Level REST Client) api"></a>elasticsearch (Java High Level REST Client) api</h2><p>Java高级REST客户端在Java低级REST客户端之上工作。它的主要目标是公开API特定的方法，接受请求对象作为参数并返回响应对象，以便客户端自己处理请求编组和响应非编组。</p><p>可以同步或异步调用每个API。同步方法返回响应对象，而名称以async后缀结尾的异步方法需要一旦收到响应或错误就通知（在由低级客户端管理的线程池上）的侦听器参数。</p><p>Java高级REST客户端依赖于Elasticsearch核心项目。它接受与the相同的请求参数，TransportClient并返回相同的响应对象。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>Java高级REST客户端需要Java 1.8并依赖于Elasticsearch核心项目。客户端版本与客户端开发的Elasticsearch版本相同。它接受与the相同的请求参数，TransportClient 并返回相同的响应对象</p><h2 id="代码初始化方式"><a href="#代码初始化方式" class="headerlink" title="代码初始化方式"></a>代码初始化方式</h2><pre class=" language-java"><code class="language-java">RestHighLevelClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>        RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9201</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>IDE新建SpringBoot项目<br>pom.xml配置</p><pre class=" language-java"><code class="language-java">  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">-</span>rest<span class="token operator">-</span>high<span class="token operator">-</span>level<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">-</span>rest<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">-</span>rest<span class="token operator">-</span>client<span class="token operator">-</span>sniffer<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">16</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>application.properties</p><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>80server.servlet.context-path<span class="token operator">=</span>/es-bootspring.data.elasticsearch.cluster-nodes<span class="token operator">=</span>192.168.1.191:9200</code></pre><p>数据配置，进行初始化操作</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  elasticsearch spring-data 目前支持的最高版本为5.5 所以需要自己注入生成客户端 * * 数据配置，进行初始化操作 * @author qinxuewu * @version 1.00 * @time 28/8/2018下午 5:54 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ESConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>RestHighLevelClient<span class="token operator">></span><span class="token punctuation">,</span> InitializingBean<span class="token punctuation">,</span> DisposableBean <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ESConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.data.elasticsearch.cluster-nodes}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String clusterNodes<span class="token punctuation">;</span>    <span class="token keyword">private</span> RestHighLevelClient restHighLevelClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 控制Bean的实例化过程     *     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RestHighLevelClient <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> restHighLevelClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取接口返回的实例的class     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RestHighLevelClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>restHighLevelClient <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                restHighLevelClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">final</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error closing ElasticSearch client: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        restHighLevelClient <span class="token operator">=</span> <span class="token function">buildClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> RestHighLevelClient <span class="token function">buildClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            restHighLevelClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span>clusterNodes<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>clusterNodes<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> restHighLevelClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EsDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>EsDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断索引是否存在     * @param index 索引(关系型数据库)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIndexExist</span><span class="token punctuation">(</span>String index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            GetRequest getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            getRequest<span class="token punctuation">.</span><span class="token function">fetchSourceContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FetchSourceContext</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            getRequest<span class="token punctuation">.</span><span class="token function">storedFields</span><span class="token punctuation">(</span><span class="token string">"_none_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exists<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"判断索引是否存在是否存在异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断索引是否存在     * @param index  索引(关系型数据库)     * @param type   类型(关系型数据表)     * @param id     数据ID     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIndexExist</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span>String type<span class="token punctuation">,</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            GetRequest getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            getRequest<span class="token punctuation">.</span><span class="token function">fetchSourceContext</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FetchSourceContext</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            getRequest<span class="token punctuation">.</span><span class="token function">storedFields</span><span class="token punctuation">(</span><span class="token string">"_none_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exists<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"判断索引是否存在是否存在异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建索引     * @param index  索引(关系型数据库)     * @param type   类型(关系型数据表)     * @param obj    数据源     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndexOne</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span> JSONObject obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建索引异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 创建索引         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param id     数据ID         * @param obj    数据源         * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndexOne</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String id<span class="token punctuation">,</span> JSONObject obj<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                IndexRequest request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>                client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 批量创建索         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param list   数据源         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bacthIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>JSONObject<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>IndexRequest<span class="token operator">></span> requests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    requests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">generateNewsRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>IndexRequest indexRequest <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"批量创建索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> IndexRequest <span class="token function">generateNewsRequest</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>JSONObject obj<span class="token punctuation">)</span><span class="token punctuation">{</span>            IndexRequest indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>            indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> indexRequest<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 删除索引         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param id     数据ID         * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span>String type<span class="token punctuation">,</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                DeleteRequest request<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"删除索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>  <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 修改索引         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param id     数据ID         * @param obj    数据源         * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String id<span class="token punctuation">,</span> JSONObject obj<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                UpdateRequest updateRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                updateRequest<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>                client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>  <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 查询单条索引         * @param index  索引(关系型数据库)         * @param type   类型(关系型数据表)         * @param id     数据ID         */</span>        <span class="token keyword">public</span> GetResponse <span class="token function">findById</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String id<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                GetRequest getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                GetResponse getResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> getResponse<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询单条索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 查询单条索引         * @param index     索引(关系型数据库)         * @param type      类型(关系型数据表)         * @param id        数据ID         * @param includes  显示字段         * @param excludes  排除字段         */</span>        <span class="token keyword">public</span> GetResponse <span class="token function">findById</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String id<span class="token punctuation">,</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> includes<span class="token punctuation">,</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> excludes<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                GetRequest getRequest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                FetchSourceContext fetchSourceContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FetchSourceContext</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> includes<span class="token punctuation">,</span> excludes<span class="token punctuation">)</span><span class="token punctuation">;</span>                getRequest<span class="token punctuation">.</span><span class="token function">fetchSourceContext</span><span class="token punctuation">(</span>fetchSourceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                GetResponse getResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span>  getResponse<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询单条索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 查询列表索引         * @param index        索引(关系型数据库)         * @param type         类型(关系型数据表)         * @return         */</span>        <span class="token keyword">public</span> SearchResponse <span class="token function">getAllIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>            SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询列表索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>  null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询列表索引     * @param index        索引(关系型数据库)     * @param type         类型(关系型数据表)     * @param includes     显示字段     * @param excludes     排除字段     * @return     */</span>    <span class="token keyword">public</span> SearchResponse <span class="token function">getAllIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> includes<span class="token punctuation">,</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> excludes<span class="token punctuation">)</span><span class="token punctuation">{</span>        SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sourceBuilder<span class="token punctuation">.</span><span class="token function">fetchSource</span><span class="token punctuation">(</span>includes<span class="token punctuation">,</span>excludes<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> response<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询列表索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 查询列表索引         * @param index        索引(关系型数据库)         * @param type         类型(关系型数据表)         * @param sourceBuilder  查询条件         * @return         */</span>        <span class="token keyword">public</span> SearchResponse <span class="token function">getAllIndex</span><span class="token punctuation">(</span>String index<span class="token punctuation">,</span> String type<span class="token punctuation">,</span> SearchSourceBuilder sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">{</span>            SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"查询列表索引异常"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span>  null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>创建索引</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> EsDao esDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndexOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>            String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>            JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"qxw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String <span class="token punctuation">[</span><span class="token punctuation">]</span> tags<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"标签1"</span><span class="token punctuation">,</span><span class="token string">"标签2"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">,</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>            esDao<span class="token punctuation">.</span><span class="token function">createIndexOne</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>批量创建索引</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bacthIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>JSONObject<span class="token operator">></span>  list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject obj<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"qxw"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        esDao<span class="token punctuation">.</span><span class="token function">bacthIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>根据ID查询</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String id<span class="token operator">=</span><span class="token string">"NWrCg2UBU-HvVB1XZxe1"</span><span class="token punctuation">;</span>        String result<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>修改操作</strong></p><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String id<span class="token operator">=</span><span class="token string">"NWrCg2UBU-HvVB1XZxe1"</span><span class="token punctuation">;</span>        JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token string">"2018-08-29 00:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        esDao<span class="token punctuation">.</span><span class="token function">updateIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>根据ID查询 指定过滤字段</strong></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 根据ID查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String id<span class="token operator">=</span><span class="token string">"NWrCg2UBU-HvVB1XZxe1"</span><span class="token punctuation">;</span>        GetResponse res<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果index："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果type："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果id："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果source："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**     * 根据ID查询 指定过滤字段     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findByIdexcludes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String id<span class="token operator">=</span><span class="token string">"NWrCg2UBU-HvVB1XZxe1"</span><span class="token punctuation">;</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> includes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不过滤</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> excludes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"tags"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//过滤字段</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>esDao<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>id<span class="token punctuation">,</span>includes<span class="token punctuation">,</span>excludes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>查询所有</strong></p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">getAllIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//必须为小写</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        String result<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> includes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不过滤</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> excludes<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"tags"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//过滤字段</span>        String result2<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>includes<span class="token punctuation">,</span>excludes<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定过滤字段查询结果："</span><span class="token operator">+</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>条件查询 /匹配所有</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">getAllIndexByFiled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 使用QueryBuilder         * termQuery("key", obj) 完全匹配         * termsQuery("key", obj1, obj2..)   一次匹配多个值         * matchQuery("key", Obj) 单个匹配, field不支持通配符, 前缀具高级特性         * multiMatchQuery("text", "field1", "field2"..);  匹配多个字段, field有通配符忒行         * matchAllQuery();         匹配所有文件         */</span>        <span class="token comment" spellcheck="true">//匹配所有文件</span>        SearchSourceBuilder searchSourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        searchSourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>searchSourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配所有查询结果："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>模糊、排序查询</strong></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**     * 条件查询     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span>  <span class="token function">getAllIndexByFiled3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String index<span class="token operator">=</span><span class="token string">"testdb"</span><span class="token punctuation">;</span>        String type<span class="token operator">=</span><span class="token string">"userinfo"</span><span class="token punctuation">;</span>        SearchSourceBuilder search3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder("name","qxw");</span>         <span class="token comment" spellcheck="true">//在匹配查询上启用模糊匹配</span><span class="token comment" spellcheck="true">//        matchQueryBuilder.fuzziness(Fuzziness.AUTO);</span><span class="token comment" spellcheck="true">//        //在匹配查询上设置前缀长度选项</span><span class="token comment" spellcheck="true">//        matchQueryBuilder.prefixLength(3); </span><span class="token comment" spellcheck="true">//        //设置最大扩展选项以控制查询的模糊过程</span><span class="token comment" spellcheck="true">//        matchQueryBuilder.maxExpansions(10); </span>        <span class="token comment" spellcheck="true">//默认情况下，搜索请求会返回文档的内容,设置fasle不会返回窝</span><span class="token comment" spellcheck="true">//        search3.fetchSource(false);</span>        <span class="token comment" spellcheck="true">//也接受一个或多个通配符模式的数组，以控制以更精细的方式包含或排除哪些字段</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> includeFields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"tags"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> excludeFields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"_type"</span><span class="token punctuation">,</span><span class="token string">"_index"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        search3<span class="token punctuation">.</span><span class="token function">fetchSource</span><span class="token punctuation">(</span>includeFields<span class="token punctuation">,</span> excludeFields<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定排序</span>        search3<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldSortBuilder</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>SortOrder<span class="token punctuation">.</span>DESC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//启用模糊查询 fuzziness(Fuzziness.AUTO)</span><span class="token comment" spellcheck="true">//        search3.query(QueryBuilders.matchQuery("name","qxw").fuzziness(Fuzziness.AUTO));</span>        <span class="token comment" spellcheck="true">//模糊查询，?匹配单个字符，*匹配多个字符</span><span class="token comment" spellcheck="true">//        search3.query(QueryBuilders.wildcardQuery("name","*qxw*"));</span>        <span class="token comment" spellcheck="true">//搜索name中或tags  中包含有qxw的文档（必须与music一致)</span><span class="token comment" spellcheck="true">//        search3.query(QueryBuilders.multiMatchQuery("qxw","name","tags"));</span>        <span class="token comment" spellcheck="true">//多条件查询 相当于and</span>        BoolQueryBuilder boolQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询age=32</span>        TermQueryBuilder termQuery<span class="token operator">=</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//匹配多个值  相当于sql 中in(....)操作</span>        TermsQueryBuilder termQuerys<span class="token operator">=</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termsQuery</span><span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span><span class="token string">"PWrIg2UBU-HvVB1XzRce"</span><span class="token punctuation">,</span><span class="token string">"XWqYhGUBU-HvVB1Xahct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模糊查询name中包含qxw</span>        WildcardQueryBuilder queryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">wildcardQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"*qxw*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>termQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>termQuerys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        //设置from确定结果索引的选项以开始搜索。默认为0。</span><span class="token comment" spellcheck="true">//        search3.from(0);</span><span class="token comment" spellcheck="true">//        //设置size确定要返回的搜索命中数的选项。默认为10。</span><span class="token comment" spellcheck="true">//        search3.size(1);</span>        search3<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchResponse result<span class="token operator">=</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>search3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析SearchHits</span>        SearchHits hits <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> totalHits <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> maxScore <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getMaxScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchHit<span class="token punctuation">[</span><span class="token punctuation">]</span> searchHits <span class="token operator">=</span> hits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> searchHits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String indexs <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String types <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String ids <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sourceAsString <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> sourceAsMap <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id ："</span><span class="token operator">+</span>ids<span class="token operator">+</span>sourceAsMap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>esDao<span class="token punctuation">.</span><span class="token function">getAllIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>type<span class="token punctuation">,</span>search3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h2><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">AggregationsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>          String index<span class="token operator">=</span><span class="token string">"emptydb"</span><span class="token punctuation">;</span>          String  type<span class="token operator">=</span><span class="token string">"empty"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        List&lt;JSONObject>  list=new ArrayList&lt;>();</span><span class="token comment" spellcheck="true">//        JSONObject obj=new JSONObject();</span><span class="token comment" spellcheck="true">//        obj.put("name","小明"); obj.put("age",25); obj.put("salary",10000); obj.put("detpty","技术部");</span><span class="token comment" spellcheck="true">//        list.add(obj);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        JSONObject obj2=new JSONObject();</span><span class="token comment" spellcheck="true">//        obj2.put("name","小蛋"); obj2.put("age",22); obj2.put("salary",5000); obj2.put("detpty","技术部");</span><span class="token comment" spellcheck="true">//        list.add(obj2);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        JSONObject obj3=new JSONObject();</span><span class="token comment" spellcheck="true">//        obj3.put("name","张三"); obj3.put("age",24); obj3.put("salary",300); obj3.put("detpty","销售部");</span><span class="token comment" spellcheck="true">//        list.add(obj3);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        JSONObject obj4=new JSONObject();</span><span class="token comment" spellcheck="true">//        obj4.put("name","李四"); obj4.put("age",22); obj4.put("salary",4000); obj4.put("detpty","采购部");</span><span class="token comment" spellcheck="true">//        list.add(obj4);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//          //添加测试数据</span><span class="token comment" spellcheck="true">//        esDao.bacthIndex(index,type,list);</span>        SearchSourceBuilder searchSourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>searchSourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算所有员工的平均年龄</span>        <span class="token comment" spellcheck="true">//terms(查询字段别名).field(分组字段)</span>        searchSourceBuilder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token string">"average_age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchResponse res<span class="token operator">=</span>client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"聚合操作查询结果："</span><span class="token operator">+</span>res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Aggregations aggregations <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Aggregation<span class="token operator">></span> aggregationMap <span class="token operator">=</span> aggregations<span class="token punctuation">.</span><span class="token function">getAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"聚合操作解析："</span><span class="token operator">+</span>aggregationMap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch安装及Api使用</title>
      <link href="/2018/08/27/java/elasticsearch-an-zhuang-ji-java-api-shi-yong/"/>
      <url>/2018/08/27/java/elasticsearch-an-zhuang-ji-java-api-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="ElasticSearch-简介"><a href="#ElasticSearch-简介" class="headerlink" title="ElasticSearch 简介"></a>ElasticSearch 简介</h3><p>ElasticSearch是一个高度可扩展的开源搜索引擎并使用REST API，所以您值得拥有。 在本教程中，将介绍开始使用ElasticSearch的一些主要概念。</p><h3 id="下载并运行ElasticSearch"><a href="#下载并运行ElasticSearch" class="headerlink" title="下载并运行ElasticSearch"></a>下载并运行ElasticSearch</h3><p>ElasticSearch可以从elasticsearch.org下载对应的文件格式，如ZIP和TAR.GZ。下载并提取一个运行它的软件包之后不会容易得多，需要提前安装Java运行时环境。<br>下载链接 <a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/products/elasticsearch</a></p><h3 id="在Windows上运行ElasticSearch"><a href="#在Windows上运行ElasticSearch" class="headerlink" title="在Windows上运行ElasticSearch"></a>在Windows上运行ElasticSearch</h3><ul><li>从命令窗口运行位于bin文件夹中的elasticsearch.bat。这将会启动ElasticSearch在控制台的前台运行，这意味着我们可在控制台中看到运行信息或一些错误信息，并可以使用CTRL + C停止或关闭它。</li><li>在启动过程中，ElasticSearch的实例运行会占用大量的内存，所以在这一过程中，电脑会变得比较慢，需要耐心等待，启动加载完成后电脑就可以正常使用了</li><li>当ElasticSearch的实例并运行，您可以使用<a href="http://localhost:9200检查是否运行成功" target="_blank" rel="noopener">http://localhost:9200检查是否运行成功</a></li></ul><h3 id="Linux安装ElasticSearch"><a href="#Linux安装ElasticSearch" class="headerlink" title="Linux安装ElasticSearch"></a><a href="https://blog.csdn.net/weixin_41615494/article/details/79591335" target="_blank" rel="noopener">Linux安装ElasticSearch</a></h3><p>访问elasticSearch官网地址 <a href="https://www.elastic.co/" target="_blank" rel="noopener">https://www.elastic.co/</a><br>下载指定版本的安装包：elasticsearch-6.1.1.tar.gz,上传至指定目录/usr/local/elasticsearch</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#解压</span><span class="token function">tar</span> -zxvf elasticsearch-6.1.1.tar.gz<span class="token comment" spellcheck="true">#创建数据存储目录</span><span class="token function">mkdir</span> -p /usr/local/elasticsearch/data<span class="token comment" spellcheck="true">#创建日志存储目录</span><span class="token function">mkdir</span> -p /usr/local/elasticsearch/logs<span class="token comment" spellcheck="true">#进入到es安装目录下的config文件夹中，修改elasticsearch.yml 文件</span><span class="token comment" spellcheck="true">#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。</span>cluster.name: qxw-application<span class="token comment" spellcheck="true">#节点名称</span>node.name: node-1 <span class="token comment" spellcheck="true">#设置索引数据的存储路径</span>path.data: /usr/local/elasticsearch/data <span class="token comment" spellcheck="true">#设置日志的存储路径</span>path.logs: /usr/local/elasticsearch/logs <span class="token comment" spellcheck="true">#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中</span>network.host: 192.168.1.191<span class="token comment" spellcheck="true">#设置对外服务的http端口</span>http.port: 9200 <span class="token comment" spellcheck="true">#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点</span>discovery.zen.ping.unicast.hosts: <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span></code></pre><p><strong>修改host 文件，执行命令 vi /etc/hosts</strong><br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2v4apszj30fl038a9x.jpg" alt></p><p> <strong>因为安全问题elasticsearch 不让用root用户直接运行，所以要创建新用户。</strong> </p><pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> es<span class="token function">passwd</span> es再输入两次密码<span class="token punctuation">(</span>自定义<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#给新创建用户文件夹执行权限</span><span class="token function">chown</span> -R es:es /usr/local/elasticsearch切换es用户：su es启动集群命令：<span class="token function">cd</span>  /usr/local/elasticsearchbin/elasticsearch</code></pre><p> <strong>在es用户下启动时报错</strong><br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2vqkp6nj30xk05v3zh.jpg" alt></p><pre><code>原因：Centos6不支持SecComp，而ES默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动详见 ：https://github.com/elastic/elasticsearch/issues/22899解决方案：在elasticsearch.yml中新增配置bootstrap.system_call_filter，设为false。bootstrap.system_call_filter: false</code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2wl1lpkj30u303pgm5.jpg" alt></p><p> <strong>第一个问题的原因：</strong> </p><pre class=" language-bash"><code class="language-bash">原因：无法创建本地文件问题,用户最大可创建文件数太小解决方案：切换到root用户，编辑limits.conf配置文件， 添加类似如下内容：<span class="token function">vi</span> /etc/security/limits.conf添加如下内容: 注意*不要去掉了* soft nofile 65536* hard nofile 131072备注：* 代表Linux所有用户名称（比如 hadoop）需要保存、退出、重新登录才可生效。</code></pre><p><strong>第二个错误的原因：</strong> </p><pre class=" language-bash"><code class="language-bash">原因：无法创建本地线程问题,用户最大可创建线程数太小解决方案：切换到root用户，进入limits.d目录下，修改90-nproc.conf 配置文件。<span class="token function">vi</span> /etc/security/limits.d/90-nproc.conf找到如下内容：* soft nproc 1024<span class="token comment" spellcheck="true">#修改为</span>* soft nproc 4096</code></pre><p><strong>第三个错误的原因：</strong> </p><pre><code>原因：最大虚拟内存太小每次启动机器都手动执行下。root用户执行命令：执行命令：sysctl -w vm.max_map_count=262144查看修改结果命令：sysctl -a|grep vm.max_map_count  看是否已经修改永久性修改策略：echo &quot;vm.max_map_count=262144&quot; &gt;&gt; /etc/sysctl.conf</code></pre><p> <strong>切换到es用户执行:bin/elasticsearch</strong><br>访问：<a href="http://192.168.1.191:9200/" target="_blank" rel="noopener">http://192.168.1.191:9200/</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#后台启动</span><span class="token punctuation">[</span>es@localhost elasticsearch-6.4.0<span class="token punctuation">]</span>$ ./bin/elasticsearch -d<span class="token punctuation">[</span>es@localhost elasticsearch-6.4.0<span class="token punctuation">]</span>$ jps27587 Jps27573 Elasticsearch</code></pre><h3 id="elasticsearch-服务安全配置"><a href="#elasticsearch-服务安全配置" class="headerlink" title="elasticsearch 服务安全配置"></a>elasticsearch 服务安全配置</h3><p> <strong>一、目前主要通过插件的形式来控制：</strong> </p><ol><li>常用的插件主要包括：elasticsearch-http-basic，search-guard，shield</li><li>由于shield是收费的暂时还未研究（研究后统一补充）</li><li>search-guard主要用于elasticsearch2.x以后的版本（研究后统一补充）</li><li>elasticsearch-http-basic主要用于elasticsearch1.x的版本</li><li><p>基于目前我们es集群大部分都是1.5.2版本的，所以主要使用http-basic来控制来自http请求的访问。</p><p><strong>二、elasticsearch-http-basic安装：</strong> </p></li><li>下载elasticsearch-http-basic-1.5.1.jar（下载地址：<a href="https://github.com/Asquera/elasticsearch-http-basic/releases）" target="_blank" rel="noopener">https://github.com/Asquera/elasticsearch-http-basic/releases）</a></li><li>在ES的plugins文件夹下新建http-basic文件夹</li><li>把下载的 elasticsearch-http-basic-1.5.1.jar拷贝到新建的http-basic文件夹下</li><li>修改ES的配置文件elasticsearch.yml,在文件末尾添加以下配置：</li></ol><pre class=" language-bash"><code class="language-bash">配置名                                     默认值                            说明http.basic.enabled                         <span class="token boolean">true</span>                            开关，开启会接管全部HTTP连接http.basic.user                          <span class="token string">"admin"</span>                          账号http.basic.password                      <span class="token string">"admin_pw"</span>                       密码http.basic.ipwhitelist            <span class="token punctuation">[</span><span class="token string">"localhost"</span>, <span class="token string">"127.0.0.1"</span><span class="token punctuation">]</span>    白名单内的ip访问不需要通过账号和密码，支持ip和主机名，不支持ip区间或正则http.basic.trusted_proxy_chains    <span class="token punctuation">[</span><span class="token punctuation">]</span>                                    信任代理列表http.basic.log    <span class="token boolean">false</span>                                              把无授权的访问事件添加到ES的日志http.basic.xforward    <span class="token string">""</span>                                          记载代理路径的header字段名5.重启ES集群目前我们主要通过http.basic.ipwhitelist 白名单 + 用户名、密码来控制外部机器对ES集群的http请求，1.在白名单内的ip列表用户无需验证可直接通过ES节点的ip地址访问ES，白名单外的用户无权访问ES集群2.由于白名单无法控制通过域名的访问，如果要通过域名访问ES必须要通过用户名和密码来访问</code></pre><h3 id="java中使用elastaicsearch-RestHighLevelClient"><a href="#java中使用elastaicsearch-RestHighLevelClient" class="headerlink" title="java中使用elastaicsearch(RestHighLevelClient)"></a>java中使用elastaicsearch(RestHighLevelClient)</h3><p>官方文档可以得知，现在存在至少三种Java客户端。</p><ol><li>Transport Client</li><li>Java High Level REST Client</li><li>Java Low Level Rest Client</li><li>强烈建议ES5及其以后的版本使用Java High Level REST Client</li></ol><p><strong>java High Level REST Client 介绍</strong> </p><ul><li>Java High Level REST Client 是基于Java Low Level REST Client的，每个方法都可以是同步或者异步的。同步方法返回响应对象，而异步方法名以“async”结尾，并需要传入一个监听参数，来确保提醒是否有错误发生。</li><li>Java High Level REST Client需要Java1.8版本和ES。并且ES的版本要和客户端版本一致。和TransportClient接收的参数和返回值是一样的。</li></ul><p>引入maven依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>elasticsearch<span class="token punctuation">.</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>elasticsearch<span class="token operator">-</span>rest<span class="token operator">-</span>high<span class="token operator">-</span>level<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">6.2</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>Java基础操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestClientTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        index();</span><span class="token comment" spellcheck="true">//        bacthIndex();</span>         <span class="token function">queryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入数据     */</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//RestHighLevelClient实例需要低级客户端构建器来构建</span>            RestHighLevelClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IndexRequest indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"标题图表题大法师飞洒发顺丰三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token string">"2018-08-21 17:43:50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//添加索引</span>            client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//http://localhost:9200/demo/demo/_search  浏览器运行查询数据</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量插入数据     */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">bacthIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       RestHighLevelClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       List<span class="token operator">&lt;</span>IndexRequest<span class="token operator">></span> requests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       requests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">generateNewsRequest</span><span class="token punctuation">(</span><span class="token string">"中印边防军于拉达克举行会晤 强调维护边境和平"</span><span class="token punctuation">,</span> <span class="token string">"2018-01-27T08:34:00Z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>IndexRequest indexRequest <span class="token operator">:</span> requests<span class="token punctuation">)</span> <span class="token punctuation">{</span>           bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>           client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IndexRequest <span class="token function">generateNewsRequest</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span>String publishTime<span class="token punctuation">)</span><span class="token punctuation">{</span>        IndexRequest indexRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span>publishTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        indexRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> indexRequest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询操作     * https://blog.csdn.net/paditang/article/details/78802799     * https://blog.csdn.net/A_Story_Donkey/article/details/79667670     * https://www.cnblogs.com/wenbronk/p/6432990.html     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">queryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        RestHighLevelClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这个sourcebuilder就类似于查询语句中最外层的部分。包括查询分页的起始，</span>        <span class="token comment" spellcheck="true">// 查询语句的核心，查询结果的排序，查询结果截取部分返回等一系列配置</span>        SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 结果开始处</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查询结果终止处</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查询的等待时间</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeValue</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 使用QueryBuilder             * termQuery("key", obj) 完全匹配             * termsQuery("key", obj1, obj2..)   一次匹配多个值             * matchQuery("key", Obj) 单个匹配, field不支持通配符, 前缀具高级特性             * multiMatchQuery("text", "field1", "field2"..);  匹配多个字段, field有通配符忒行             * matchAllQuery();         匹配所有文件             */</span>            MatchQueryBuilder matchQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"费德勒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分词精确查询</span><span class="token comment" spellcheck="true">//            TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery("tag", "体育");</span><span class="token comment" spellcheck="true">//            // 查询在时间区间范围内的结果  范围查询</span><span class="token comment" spellcheck="true">//            RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery("publishTime");</span><span class="token comment" spellcheck="true">//            rangeQueryBuilder.gte("2018-01-26T08:00:00Z");</span><span class="token comment" spellcheck="true">//            rangeQueryBuilder.lte("2018-01-26T20:00:00Z");</span>            <span class="token comment" spellcheck="true">// 等同于bool，将两个查询合并</span>            BoolQueryBuilder boolBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            boolBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>matchQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            boolBuilder.must(termQueryBuilder);</span><span class="token comment" spellcheck="true">//            boolBuilder.must(rangeQueryBuilder);</span>            sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 排序</span><span class="token comment" spellcheck="true">//            FieldSortBuilder fsb = SortBuilders.fieldSort("date");</span><span class="token comment" spellcheck="true">//            fsb.order(SortOrder.DESC);</span><span class="token comment" spellcheck="true">//            sourceBuilder.sort(fsb);</span>            SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>            SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Kibana-linux下安装"><a href="#Kibana-linux下安装" class="headerlink" title="Kibana linux下安装"></a>Kibana linux下安装</h3><ul><li>下载地址：<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/downloads/kibana</a></li><li><p>解压：tar zxvf kibana-6.4.0-linux-x64.tar.gz</p><p><strong>配置</strong><br><a href="https://www.elastic.co/guide/cn/kibana/current/settings.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/kibana/current/settings.html</a></p><pre class=" language-bash"><code class="language-bash">server.port: 5601server.host: <span class="token string">"192.168.1.191"</span>elasticsearch.url: <span class="token string">"http://192.168.1.191:9200"</span></code></pre><p><strong>启动</strong> </p></li></ul><pre class=" language-bash"><code class="language-bash">./kibana  //不能关闭终端<span class="token function">nohup</span>  ./kibana <span class="token operator">></span> /nohub.out <span class="token operator">&amp;</span>  //可关闭终端，在nohup.out中查看log在浏览器中访问：http://192.168.1.191:5601/</code></pre><h3 id="FileBeats-与-LogStash-的安装"><a href="#FileBeats-与-LogStash-的安装" class="headerlink" title="FileBeats 与 LogStash 的安装"></a>FileBeats 与 LogStash 的安装</h3><ul><li>LogStash 可以用来对日志进行收集并进行过滤整理后输出到 ES 中，FileBeats 是一个更加轻量级的日志收集工具。 </li><li>现在最常用的方式是通过 FileBeats 收集目标日志，然后统一输出到 LogStash 做进一步的过滤，在由 LogStash 输出到 ES 中进行存储。</li></ul><p>官方提供了压缩包下载， <a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/downloads/logstash</a> 。 下载完成后解压即可。</p><pre><code>tar zxvf logstash-6.2.2.tar.gz###  进入目录cd logstash-6.2.2</code></pre><p>LogStash 的运行需要指定一个配置文件，来指定数据的流向，我们在当前目录下创建一个 first.conf 文件，其内容如下:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">###  配置输入为 beats</span>input <span class="token punctuation">{</span>    beats <span class="token punctuation">{</span>            port <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"5044"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">###  数据过滤</span>filter <span class="token punctuation">{</span>    grok <span class="token punctuation">{</span>            match <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token string">"message"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"%{COMBINEDAPACHELOG}"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    geoip <span class="token punctuation">{</span>            <span class="token function">source</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"clientip"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 输出到本机的 ES</span>output <span class="token punctuation">{</span>    elasticsearch <span class="token punctuation">{</span>            hosts <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span> <span class="token string">"192.168.1.191:9200"</span>  <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面配置了 LogStash 输出日志到 ES 中 配置完成后就可以通过如下方式启动 LogStash 了</p><pre><code>bin/logstash -f first.conf --config.reload.automatic</code></pre><h3 id="安装运行-FileBeats"><a href="#安装运行-FileBeats" class="headerlink" title="安装运行 FileBeats"></a>安装运行 FileBeats</h3><p>FileBeats 也提供了下载包，地址为 <a href="https://www.elastic.co/downloads/beats/filebeat" target="_blank" rel="noopener">https://www.elastic.co/downloads/beats/filebeat</a> 。找到系统对应的包下载后解压即可。</p><pre><code>tar zxvf filebeat-6.2.2-darwin-x86_64.tar.gzcd filebeat-6.2.2-darwin-x86_64</code></pre><p>进入目录编辑 filebeat.yml 找到对应的配置项，配置如下</p><pre><code>- type: log   # Change to true to enable this prospector configuration.    enabled: True    # Paths that should be crawled and fetched. Glob based paths.    # 读取 Nginx 的日志    paths:      - /usr/local/nginx/logs/*.log# 输出到本机的 LogStashoutput.logstash:  # The Logstash hosts  hosts: [&quot;localhost:5044&quot;]</code></pre><h3 id="配置完成后执行如下命令，启动-FileBeat-即可"><a href="#配置完成后执行如下命令，启动-FileBeat-即可" class="headerlink" title="配置完成后执行如下命令，启动 FileBeat 即可"></a>配置完成后执行如下命令，启动 FileBeat 即可</h3><pre><code># FileBeat 需要以 root 身份启动，因此先更改配置文件的权限sudo chown root filebeat.ymlsudo ./filebeat -e -c filebeat.yml -d &quot;publish&quot;</code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase快速入门</title>
      <link href="/2018/08/13/java/hbase-kuai-su-ru-men/"/>
      <url>/2018/08/13/java/hbase-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="Apache-HBase"><a href="#Apache-HBase" class="headerlink" title="Apache HBase"></a>Apache HBase</h3><ul><li>Apache HBase™是Hadoop数据库，是一个分布式，可扩展的大数据存储。</li><li>当您需要对大数据进行随机，实时读/写访问时，请使用Apache HBase™。该项目的目标是托管非常大的表 - 数十亿行X百万列 - 在商品硬件集群上。Apache HBase是一个开源的，分布式的，版本化的非关系数据库</li></ul><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>线性和模块化可扩展性。</li><li>严格一致的读写操作。</li><li>表的自动和可配置分片</li><li>RegionServers之间的自动故障转移支持。</li><li>方便的基类，用于使用Apache HBase表支持Hadoop MapReduce作业。</li><li>易于使用的Java API，用于客户端访问。</li><li>阻止缓存和布隆过滤器以进行实时查询。</li><li>查询谓词通过服务器端过滤器下推</li><li>Thrift网关和REST-ful Web服务，支持XML，Protobuf和二进制数据编码选项</li><li>可扩展的基于jruby（JIRB）的外壳</li><li>支持通过Hadoop指标子系统将指标导出到文件或Ganglia; 或通过JMX</li></ul><h3 id="安装-独立HBase"><a href="#安装-独立HBase" class="headerlink" title="安装  独立HBase"></a>安装  独立HBase</h3><p>HBase要求安装JDK。有关支持的JDK版本的信息<br><img src="https://images.gitee.com/uploads/images/2018/0809/161554_01933e92_1478371.png" alt="输入图片说明" title="屏幕截图.png"></p><p>从此Apache下载镜像列表中选择一个下载站点。单击建议的顶部链接。这将带您进入HBase版本的镜像。单击名为stable的文件夹，然后将以.tar.gz结尾的二进制文件下载到本地文件系统。暂时不要下载以src.tar.gz结尾的文件。</p><p>解压缩下载的文件，然后切换到新创建的目录。</p><pre><code>$ tar -xzvf hbase-1.2.6.1-bin.tar.gz</code></pre><p>为HBase设置Java目录，并从conf文件夹打开hbase-env.sh文件。编辑JAVA_HOME环境变量，改变路径到当前JAVA_HOME变量</p><pre><code>#编辑/home/hbase-1.2.6.1/conf/hbase-env.sh#配置hbase-env.sh文件：把29行的注释取消，配置虚拟机上面的Java地址export JAVA_HOME=/usr/local/java/jdk1.7.0_79</code></pre><p>编辑conf/hbase-site.xml，这是主要的HBase配置文件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  配置hbase存在位置<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>hbase<span class="token punctuation">.</span>rootdir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>file<span class="token operator">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//home/pflm/HBase/HFiles&lt;/value></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>      <span class="token operator">&lt;</span>property<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  配置hbase文件保存路径<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>hbase<span class="token punctuation">.</span>zookeeper<span class="token punctuation">.</span>property<span class="token punctuation">.</span>dataDir<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token operator">/</span>home<span class="token operator">/</span>pflm<span class="token operator">/</span>HBase<span class="token operator">/</span>zookeeper<span class="token operator">&lt;</span><span class="token operator">/</span>value<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><p>到此 HBase 的安装配置已成功完成。可以通过使用 HBase 的 bin 文件夹中提供 start-hbase.sh 脚本启动 HBase</p><pre><code>$ ./bin/start-hbase.sh</code></pre><p>运行HBase启动脚本，它会提示一条消息：HBase has started</p><pre><code>starting master, logging to /usr/local/HBase/bin/../logs/hbase-tpmaster-localhost.localdomain.out</code></pre><ul><li>该./start-hbase.sh脚本是作为启动HBase的一种便捷方式。发出命令，如果一切顺利，将在标准输出中记录一条消息，显示HBase已成功启动。您可以使用该jps命令验证是否有一个正在运行的进程HMaster。在独立模式下，HBase运行此单个JVM中的所有守护程序，即HMaster，单个HRegionServer和ZooKeeper守护程序。转到<code>http：// localhost：16010</code>以查看HBase Web UI。</li></ul><h3 id="HBase-Shell"><a href="#HBase-Shell" class="headerlink" title="HBase Shell"></a>HBase Shell</h3><p>要访问HBase shell，必须导航进入到HBase的主文件夹。</p><pre><code>#进入shell/bin/hbase shell#列出HBase的所有表。hbase(main):001:0&gt; listTABLE</code></pre><p> <strong>通用命令</strong> </p><pre><code>status: 提供HBase的状态，例如，服务器的数量。version: 提供正在使用HBase版本。table_help: 表引用命令提供帮助whoami: 提供有关用户的信息。</code></pre><p> <strong>HBase在表中操作的命令。</strong> </p><pre class=" language-bash"><code class="language-bash">create: 创建一个表。list: 列出HBase的所有表。disable: 禁用表。is_disabled: 验证表是否被禁用。enable: 启用一个表。is_enabled: 验证表是否已启用。describe: 提供了一个表的描述。alter: 改变一个表。exists: 验证表是否存在。drop: 从HBase中删除表。drop_all: 丢弃在命令中给出匹配“regex”的表</code></pre><p> <strong>数据操纵语言</strong> </p><pre class=" language-bash"><code class="language-bash">put: 把指定列在指定的行中单元格的值在一个特定的表。get: 取行或单元格的内容。delete: 删除表中的单元格值。deleteall: 删除给定行的所有单元格。scan: 扫描并返回表数据。count: 计数并返回表中的行的数目。truncate: 禁用，删除和重新创建一个指定的表。</code></pre><h3 id="解决Java-API不能远程访问HBase的问题"><a href="#解决Java-API不能远程访问HBase的问题" class="headerlink" title="解决Java API不能远程访问HBase的问题"></a>解决Java API不能远程访问HBase的问题</h3><p> <strong>1、配置Linux的hostname</strong> </p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@CentOS124 hbase-1.2.6.1<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vie /etc/sysconfig/network</span>NETWORKING<span class="token operator">=</span>yesHOSTNAME<span class="token operator">=</span>CentOS124   <span class="token comment" spellcheck="true">#名字随便</span></code></pre><p>这里配置的hostname要Linux重启才生效，为了不重启就生效，我们可以执行：hostname CentOS124命令，暂时设置hostname</p><p> <strong>2、配置Linux的hosts，映射ip的hostname的关系</strong> </p><pre><code>#映射ip的hostname的关系[root@CentOS124 hbase-1.2.6.1]# vim /etc/host#查看hbase ip绑定是否成功[root@CentOS124 hbase-1.2.6.1]# netstat -anp|grep 16010</code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2y9ladfj30jb01sdfs.jpg" alt></p><p> <strong>3、配置访问windows的hosts</strong> </p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#hbase</span>192.168.10.124  CentOS124</code></pre><h1 id="Java-操作远程hbase"><a href="#Java-操作远程hbase" class="headerlink" title="Java 操作远程hbase"></a>Java 操作远程hbase</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HbaseTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span>  Connection connection<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Configuration configuration<span class="token punctuation">;</span>     <span class="token keyword">static</span> <span class="token punctuation">{</span>         configuration <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置连接参数：HBase数据库使用的端口</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.property.clientPort"</span><span class="token punctuation">,</span> <span class="token string">"2181"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置连接参数：HBase数据库所在的主机IP</span>        configuration<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"192.168.10.124"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// configuration.addResource("hbase-site.xml");</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 取得一个数据库连接对象</span>            connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token string">"gazw"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        deleteTable("gazw");</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span>String tableName<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> cf1<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>         Admin admin <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//HTD需要TableName类型的tableName，创建TableName类型的tableName</span>        TableName tbName <span class="token operator">=</span> TableName<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断表述否已存在，不存在则创建表</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span><span class="token function">tableExists</span><span class="token punctuation">(</span>tbName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表"</span> <span class="token operator">+</span> tableName <span class="token operator">+</span> <span class="token string">"已存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//通过HTableDescriptor创建一个HTableDescriptor将表的描述传到createTable参数中</span>        HTableDescriptor HTD <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTableDescriptor</span><span class="token punctuation">(</span>tbName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为描述器添加表的详细参数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String cf <span class="token operator">:</span> cf1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建HColumnDescriptor对象添加表的详细的描述</span>            HColumnDescriptor HCD <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HColumnDescriptor</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">;</span>            HTD<span class="token punctuation">.</span><span class="token function">addFamily</span><span class="token punctuation">(</span>HCD<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//调用createtable方法创建表</span>        admin<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span>HTD<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> HBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka安装搭建以及SpringBoot集成</title>
      <link href="/2018/08/05/java/kafka-an-zhuang-da-jian-yi-ji-springboot-ji-cheng/"/>
      <url>/2018/08/05/java/kafka-an-zhuang-da-jian-yi-ji-springboot-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="kafka介绍"><a href="#kafka介绍" class="headerlink" title="kafka介绍"></a>kafka介绍</h3><p>根据官网的介绍，ApacheKafka®是一个分布式流媒体平台，它主要有3种功能：</p><ul><li>发布和订阅消息流，这个功能类似于消息队列，这也是kafka归类为消息队列框架的原因</li><li>以容错的方式记录消息流，kafka以文件的方式来存储消息流</li><li>可以再消息发布的时候进行处理</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>在系统或应用程序之间构建可靠的用于传输实时数据的管道，消息队列功能</li><li>建实时的流数据处理程序来变换或处理数据流，数据处理功能</li></ul><p> <strong>Kafka目前主要作为一个分布式的发布订阅式的消息系统使用  下图为消息传输流程</strong> </p><p><img src="https://images.gitee.com/uploads/images/2018/0803/172529_eb95e4cd_1478371.png" alt="输入图片说明"></p><ul><li>Producer即生产者，向Kafka集群发送消息，在发送消息之前，会对消息进行分类，即Topic，上图展示了两个producer发送了分类为topic1的消息，另外一个发送了topic2的消息。</li><li>Topic即主题，通过对消息指定主题可以将消息分类，消费者可以只关注自己需要的Topic中的消息</li><li>Consumer即消费者，消费者通过与kafka集群建立长连接的方式，不断地从集群中拉取消息，然后可以对这些消息进行处理。</li></ul><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>在kafka官网 <a href="http://kafka.apache.org/downloads下载到最新的kafka安装包，选择下载二进制版本的tgz文件" target="_blank" rel="noopener">http://kafka.apache.org/downloads下载到最新的kafka安装包，选择下载二进制版本的tgz文件</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>首先确保你的机器上安装了jdk，kafka需要java运行环境，以前的kafka还需要zookeeper，新版的kafka已经内置了一个zookeeper环境，所以我们可以直接使用。</li><li><p>如果只需要进行最简单的尝试的话我们只需要解压到任意目录即可，这里我们将kafka压缩包解压到/home目录<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g2z5kqoxj30qw05z0t6.jpg" alt></p><p>kafka解压目录下下有一个config的文件夹，里面放置的是我们的配置文件</p><p>consumer.properites 消费者配置</p><p>producer.properties 生产者配置</p></li></ul><p> <strong>server.properties kafka服务器的配置，此配置文件用来配置kafka服务器 目前仅介绍几个最基础的配置</strong> </p><ul><li>broker.id 申明当前kafka服务器在集群中的唯一ID，需配置为integer,并且集群中的每一个kafka服务器的id都应是唯一的，我们这里采用默认配置即可</li><li>listeners 申明此kafka服务器需要监听的端口号，如果是在本机上跑虚拟机运行可以不用配置本项，默认会使用localhost的地址，如果是在远程服务器上运行则必须配置，例如：　<code>listeners=PLAINTEXT:// 192.168.180.128:9092</code>。并确保服务器的9092端口能够访问</li><li>zookeeper.connect 申明kafka所连接的zookeeper的地址 ，需配置为zookeeper的地址，由于本次使用的是kafka高版本中自带zookeeper，使用默认配置即可 <code>zookeeper.connect=localhost:2181</code></li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>启动zookeeper</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#前台启动</span><span class="token punctuation">[</span>root@CentOS124 home<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd kafka2.11/</span><span class="token punctuation">[</span>root@CentOS124 kafka2.11<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bin/zookeeper-server-start.sh config/zookeeper.properties</span><span class="token comment" spellcheck="true">#后台启动</span><span class="token punctuation">[</span>root@CentOS124 kafka2.11<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bin/zookeeper-server-start.sh config/zookeeper.properties 1>/dev/null 2>&amp;1 &amp;</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span> 18466<span class="token comment" spellcheck="true">#查看是否启动成功</span><span class="token punctuation">[</span>root@CentOS124 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#  ps -ef|grep kafka</span></code></pre><p>启动kafka</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@CentOS124 kafka2.11<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bin/kafka-server-start.sh config/server.properties</span><span class="token comment" spellcheck="true">#后台启动</span><span class="token punctuation">[</span>root@CentOS124 kafka2.11<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bin/kafka-server-start.sh config/server.properties 1>/dev/null 2>&amp;1 &amp;</span><span class="token comment" spellcheck="true">#创建 topic</span><span class="token punctuation">[</span>root@CentOS124 kafka2.11<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><span class="token comment" spellcheck="true">#查看Kafka 中的 topic 列表</span>bin/kafka-topics.sh --list --zookeeper localhost:2181</code></pre><h3 id="配置kafka集群"><a href="#配置kafka集群" class="headerlink" title="配置kafka集群"></a>配置kafka集群</h3><ul><li>条件有限，在同一个机器上启动三个broker来模拟kafka集群，三个broker使用另外安装的同一个zookeeper服务（实际集群中，每个broker通常在不同的机器上，也会使用不同host的zookeeper）</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#复制server.properties配置文件为三份，分别起名为server.properties，server-2.properties，server-3.properties</span>三份配置中都要修改以下<span class="token comment" spellcheck="true">#三个配置中分别修改为0,2,3</span>broker.id<span class="token operator">=</span>0<span class="token comment" spellcheck="true">#三个配置中分别修改为9092,9093,9094</span>port<span class="token operator">=</span>9092<span class="token comment" spellcheck="true">#kafka-logs，kafka-logs-2，kafka-logs-3</span>log.dirs<span class="token operator">=</span>/tmp/kafka-logs<span class="token comment" spellcheck="true">#都设置为3，即每个topic默认三个partition</span>num.partitions<span class="token operator">=</span>3<span class="token comment" spellcheck="true">#zookeeper集群地址，外部可以配置，这里环境有限  使用默认既可</span>zookeeper.connect<span class="token operator">=</span>localhost:2181<span class="token comment" spellcheck="true">#分别进入kafka目录下 执行如下命令启动服务控制台输出日子完成了</span>bin/kafka-server-start.sh config/server.propertiesbin/kafka-server-start.sh config/server-2.propertiesbin/kafka-server-start.sh config/server-3.properties</code></pre><h3 id="springBoot中如何使用kafka"><a href="#springBoot中如何使用kafka" class="headerlink" title="springBoot中如何使用kafka"></a>springBoot中如何使用kafka</h3><p>首先创建一个springBoot项目 引入spring-kafka<br><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1g300zr7lj30wu0d8dj9.jpg" alt></p><p> <strong>application.properties 配置</strong> </p><pre class=" language-bash"><code class="language-bash">server.port<span class="token operator">=</span>8080<span class="token comment" spellcheck="true">#kafka地址 brokers集群地址用,隔开</span>spring.kafka.bootstrap-servers<span class="token operator">=</span>127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094<span class="token comment" spellcheck="true">#生产者的配置，大部分我们可以使用默认的，这里列出几个比较重要的属性</span><span class="token comment" spellcheck="true">#每批次发送消息的数量</span>spring.kafka.producer.batch-size<span class="token operator">=</span>16<span class="token comment" spellcheck="true">#发送失败重试次数</span>spring.kafka.producer.retries<span class="token operator">=</span>0<span class="token comment" spellcheck="true">#即32MB的批处理缓冲区</span>spring.kafka.producer.buffer-memory<span class="token operator">=</span>33554432<span class="token comment" spellcheck="true">#key序列化方式</span>spring.kafka.producer.key-serializer<span class="token operator">=</span>org.apache.kafka.common.serialization.StringSerializerspring.kafka.producer.value-serializer<span class="token operator">=</span>org.apache.kafka.common.serialization.StringSerializer<span class="token comment" spellcheck="true">#消费者的配置</span><span class="token comment" spellcheck="true">##Kafka中没有初始偏移或如果当前偏移在服务器上不再存在时,默认区最新 ，有三个选项 【latest, earliest, none】</span>spring.kafka.consumer.auto-offset-reset<span class="token operator">=</span>latest<span class="token comment" spellcheck="true">#是否开启自动提交</span>spring.kafka.consumer.enable-auto-commit<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#自动提交的时间间隔</span>spring.kafka.consumer.auto-commit-interval<span class="token operator">=</span>100<span class="token comment" spellcheck="true">#key的解码方式</span>spring.kafka.consumer.key-deserializer<span class="token operator">=</span>org.apache.kafka.common.serialization.StringDeserializer<span class="token comment" spellcheck="true">#value的解码方式</span>spring.kafka.consumer.value-deserializer<span class="token operator">=</span>org.apache.kafka.common.serialization.StringDeserializer<span class="token comment" spellcheck="true">#在kafka/config文件的consumer.properties中有配置</span>spring.kafka.consumer.group-id<span class="token operator">=</span>test-consumer-group</code></pre><p> <strong>创建Producer生产者</strong> </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>modules<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>core<span class="token punctuation">.</span>KafkaTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 〈生产者〉 * @author qinxuewu * @create 18/8/4下午11:56 * @since 1.0.0 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> KafkaTemplate kafkaTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送消息方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JSONObject obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"生产者发送消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这个 topic 在 Java 程序中是不需要提前在 Kafka 中设置的，因为它会在发送的时候自动创建你设置的 topic</span>        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"qxw"</span><span class="token punctuation">,</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> <strong>创建消费者</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Consumer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  同时监听两个 topic 的消息了，可同时监听多个topic     * @param record     * @throws Exception     */</span>    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"test"</span><span class="token punctuation">,</span><span class="token string">"qxw"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kafkaMessage <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kafkaMessage<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object message <span class="token operator">=</span> kafkaMessage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费者开始消费message："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> <strong>运行后就可以看到控制台输出了</strong> </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                  <span class="token annotation punctuation">@SpringBootTest</span>                               <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaDemoApplicationTests</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Autowired</span>                                    <span class="token keyword">private</span> Producer producer<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@Test</span>                                         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token keyword">try</span> <span class="token punctuation">{</span>                                             Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                                         <span class="token punctuation">}</span>                                         <span class="token punctuation">}</span>                                         <span class="token punctuation">}</span>                                             </code></pre><h3 id="kafka-配置文件参数详解"><a href="#kafka-配置文件参数详解" class="headerlink" title="kafka 配置文件参数详解"></a><a href="https://www.cnblogs.com/alan319/p/8651434.html" target="_blank" rel="noopener">kafka 配置文件参数详解</a></h3><p><a href="https://www.cnblogs.com/alan319/p/8651434.html" target="_blank" rel="noopener">https://www.cnblogs.com/alan319/p/8651434.html</a><br>kafka的配置分为 broker、producter、consumer三个不同的配置</p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单微信小程序个人博客</title>
      <link href="/2018/01/21/spring-xi-lie/jian-dan-wei-xin-xiao-cheng-xu-ge-ren-bo-ke/"/>
      <url>/2018/01/21/spring-xi-lie/jian-dan-wei-xin-xiao-cheng-xu-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>简单微信笔记小程序.</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a><a href="https://a870439570.github.io/blog-sharon/" target="_blank" rel="noopener">文档</a></h3><ul><li><a href="https://a870439570.github.io/blog-sharon/" target="_blank" rel="noopener">https://a870439570.github.io/blog-sharon/</a></li></ul><h3 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h3><ul><li>SpringBoot2.0 h2数据库</li><li>html2wxml  用于微信小程序的HTML和Markdown格式的富文本渲染组件，支持代码高亮（<a href="https://gitee.com/qwqoffice/html2wxml）部署小程序需要集成插件" target="_blank" rel="noopener">https://gitee.com/qwqoffice/html2wxml）部署小程序需要集成插件</a></li></ul><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa35e1a81?w=327&amp;h=686&amp;f=png&amp;s=138430" alt="输入图片说明"></p><h3 id="分类列"><a href="#分类列" class="headerlink" title="分类列"></a>分类列</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa34f4106?w=308&amp;h=678&amp;f=png&amp;s=160844" alt="输入图片说明"><br><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa364a99d?w=313&amp;h=689&amp;f=png&amp;s=67782" alt="输入图片说明"></p><h3 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa37c7a18?w=311&amp;h=683&amp;f=png&amp;s=126084" alt="输入图片说明"></p><h3 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa5a4ecfe?w=315&amp;h=683&amp;f=png&amp;s=40744" alt="输入图片说明"><br><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138bfa5b74b1b?w=318&amp;h=693&amp;f=png&amp;s=40358" alt="输入图片说明"></p><h3 id="海报分享"><a href="#海报分享" class="headerlink" title="海报分享"></a>海报分享</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/3/168138c0383f0173?w=319&amp;h=688&amp;f=png&amp;s=196882" alt="输入图片说明"></p><h3 id="体验地址"><a href="#体验地址" class="headerlink" title="体验地址"></a>体验地址</h3><p><img src="https://user-gold-cdn.xitu.io/2019/1/6/168214b1982a6a93?w=2800&amp;h=800&amp;f=jpeg&amp;s=164058" alt="输入图片说明"></p><h3 id="后端项目-Halo-可能是最好的-Java-博客系统。"><a href="#后端项目-Halo-可能是最好的-Java-博客系统。" class="headerlink" title="后端项目 Halo 可能是最好的 Java 博客系统。"></a>后端项目 Halo 可能是最好的 Java 博客系统。</h3><p><strong>Halo</strong> [ˈheɪloʊ]，意为光环。当然，你也可以当成拼音读(哈喽)。</p><p>轻快，简洁，功能强大，使用 Java 开发的博客系统。</p><p><a href="https://jq.qq.com/?_wv=1027&amp;k=5PIRvFq" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/QQ%E7%BE%A4-924715723-yellowgreen.svg" alt="QQ群"></a><br><a href="https://gitee.com/qinxuewu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Gitee-%E7%A0%81%E4%BA%91-yellow.svg" alt="码云"></a><br><a href="https://github.com/a870439570/blog-sharon" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Github-Github-red.svg" alt="Github"></a></p><p><img src="http://wx1.sinaimg.cn/large/006b7Nxngy1g1eu6ewhl9j30760763yz.jpg" alt="觉得本文不错的话，分享一下给小伙伴吧~"></p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme Theme introduction</title>
      <link href="/2015/09/07/demo/demo/"/>
      <url>/2015/09/07/demo/demo/</url>
      
        <content type="html"><![CDATA[<p>细的前端选项<br>Front-matter选项中的所有内容都不是必需的。不过我还是建议在值至少灌装title和date。</p><p>选项    默认    描述<br>标题    Markdown的文件标题    帖子标题，强烈建议填写此选项<br>日期    创建文件的日期和时间    发布时间，强烈建议填写此选项，最好确保它是全局唯一的<br>作者    author 在根 _config.yml    发表作者<br>IMG    一个值 featureImages    发布要素图像，例如： <a href="http://xxx.com/xxx.jpg" target="_blank" rel="noopener">http://xxx.com/xxx.jpg</a><br>最佳    true    推荐帖子（帖子是否有顶部），如果是top值true，则推荐为主页帖子。<br>覆盖    false    该v1.0.2添加的版本指示后是否需要添加到网页转盘盖。<br>coverImg    空值    新版本v1.0.2表示帖子需要在主页的封面上显示图像路径。如果不是，则默认使用帖子的默认图像。<br>密码    空值    帖子读了密码。如果要为文章设置阅读验证密码，可以设置password必须加密的值，SHA256以防止其他人看到它。前提是该verifyPassword选项在主题中激活config.yml<br>TOC    true    无论TOC是否打开，您都可以关闭文章的TOC功能。前提是该toc选项在主题中激活config.yml<br>mathjax    false    是否启用数学公式支持，是否启动本文mathjax，并且需要在主题_config.yml文件中打开它。<br>摘要    空值    发布摘要，自定义发布摘要内容，如果属性有值，则明信片摘要会显示文字，否则程序会自动截取部分文章作为摘要<br>类别    空值    文章分类，该主题的分类代表宏观上较大的分类，一个分类只推荐一篇文章。<br>标签    空值    贴标签，帖子可以有多个标签<br>注意：</p><p>如果没有写img属性，帖子的特色piature将采取余数，并选择主题的特色图片让所有帖子的图片都有自己的特点。<br>值date应尽量保证每一篇文章都是独一无二的，因为Gitalk和Gitment认识id本主题中的价值被唯一地标识date。<br>如果要设置读取文章验证密码的功能，则不仅应在Front-matter中使用SHA256加密设置密码值，还应激活主题中的配置_config.yml。<br>以下是帖子的例子Front-matter。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
